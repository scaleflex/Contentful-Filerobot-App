{"ast":null,"code":"import H, { useEffect } from 'react';\nimport g from '@contentful/f36-tokens';\nimport { cx, css } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nimport { useDensity } from '@contentful/f36-utils';\nvar q = Object.defineProperty,\n  J = Object.defineProperties;\nvar K = Object.getOwnPropertyDescriptors;\nvar d = Object.getOwnPropertySymbols;\nvar x = Object.prototype.hasOwnProperty,\n  E = Object.prototype.propertyIsEnumerable;\nvar P = (e, o, t) => o in e ? q(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  p = (e, o) => {\n    for (var t in o || (o = {})) x.call(o, t) && P(e, t, o[t]);\n    if (d) for (var t of d(o)) E.call(o, t) && P(e, t, o[t]);\n    return e;\n  },\n  i = (e, o) => J(e, K(o));\nvar a = (e, o) => {\n  var t = {};\n  for (var r in e) x.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && d) for (var r of d(e)) o.indexOf(r) < 0 && E.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar Z = \"span\";\nfunction $() {\n  return css({\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    maxWidth: \"100%\"\n  });\n}\nfunction ee() {\n  return css({\n    wordBreak: \"break-word\"\n  });\n}\nfunction S(he, v) {\n  var y = he,\n    {\n      fontSize: e = \"fontSizeM\",\n      fontStack: o = \"fontStackPrimary\",\n      fontWeight: t = \"fontWeightNormal\",\n      fontColor: r = \"gray800\",\n      lineHeight: f = \"lineHeightM\",\n      letterSpacing: m = \"letterSpacingDefault\",\n      children: n,\n      isTruncated: l,\n      isWordBreak: c,\n      as: X,\n      className: w,\n      margin: O = \"none\"\n    } = y,\n    Y = a(y, [\"fontSize\", \"fontStack\", \"fontWeight\", \"fontColor\", \"lineHeight\", \"letterSpacing\", \"children\", \"isTruncated\", \"isWordBreak\", \"as\", \"className\", \"margin\"]);\n  let j = X || Z;\n  return H.createElement(Box, i(p({}, Y), {\n    as: j,\n    className: cx(css({\n      padding: 0,\n      fontFamily: g[o],\n      fontWeight: g[t],\n      color: g[r],\n      fontSize: g[e],\n      lineHeight: g[f],\n      letterSpacing: g[m]\n    }), l ? $() : null, c ? ee() : null, w),\n    margin: O,\n    ref: v\n  }), n);\n}\nS.displayName = \"Text\";\nvar s = H.forwardRef(S);\nvar te = \"span\";\nfunction A(m, f) {\n  var n = m,\n    {\n      children: e,\n      fontWeight: o = \"fontWeightNormal\",\n      testId: t = \"cf-ui-caption\"\n    } = n,\n    r = a(n, [\"children\", \"fontWeight\", \"testId\"]);\n  let l = useDensity();\n  return H.createElement(s, i(p({\n    as: te,\n    testId: t,\n    fontSize: l === \"high\" ? \"fontSizeSHigh\" : \"fontSizeS\",\n    lineHeight: l === \"high\" ? \"lineHeightSHigh\" : \"lineHeightS\",\n    fontColor: \"gray900\",\n    fontWeight: o\n  }, r), {\n    ref: f\n  }), e);\n}\nA.displayName = \"Caption\";\nvar D = H.forwardRef(A);\nvar ne = \"h1\";\nfunction C(f, r) {\n  var m = f,\n    {\n      children: e,\n      testId: o = \"cf-ui-heading\"\n    } = m,\n    t = a(m, [\"children\", \"testId\"]);\n  let n = useDensity();\n  return H.createElement(s, i(p({\n    as: ne,\n    testId: o,\n    marginBottom: \"spacingM\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\",\n    fontSize: n === \"high\" ? \"fontSizeXlHigh\" : \"fontSizeXl\",\n    lineHeight: n === \"high\" ? \"lineHeightXlHigh\" : \"lineHeightXl\"\n  }, t), {\n    ref: r\n  }), e);\n}\nC.displayName = \"Heading\";\nvar I = H.forwardRef(C);\nvar ie = \"h3\";\nfunction L(f, r) {\n  var m = f,\n    {\n      children: e,\n      testId: o = \"cf-ui-subheading\"\n    } = m,\n    t = a(m, [\"children\", \"testId\"]);\n  let n = useDensity();\n  return H.createElement(s, i(p({\n    as: ie,\n    testId: o,\n    marginBottom: \"spacingM\",\n    fontSize: n === \"high\" ? \"fontSizeLHigh\" : \"fontSizeL\",\n    lineHeight: n === \"high\" ? \"lineHeightLHigh\" : \"lineHeightL\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\"\n  }, t), {\n    ref: r\n  }), e);\n}\nL.displayName = \"Subheading\";\nvar N = H.forwardRef(L);\nvar G = e => (useEffect(() => {\n  console.warn(\"Forma 36: Typography component is deprecated. You can safely remove it from your components.\");\n}, []), H.createElement(H.Fragment, null, e.children));\nG.displayName = \"Typography\";\nvar se = \"h2\";\nfunction b(m, f) {\n  var n = m,\n    {\n      children: e,\n      size: o = \"default\",\n      testId: t = \"cf-ui-display-text\"\n    } = n,\n    r = a(n, [\"children\", \"size\", \"testId\"]);\n  let l = \"fontSize2Xl\",\n    c = \"lineHeight2Xl\";\n  return o === \"large\" && (l = \"fontSize3Xl\", c = \"lineHeight3Xl\"), H.createElement(s, i(p({\n    as: se,\n    testId: t,\n    marginBottom: o === \"default\" ? \"spacingL\" : \"spacingXl\",\n    fontSize: l,\n    lineHeight: c,\n    fontColor: \"gray900\",\n    fontWeight: \"fontWeightDemiBold\"\n  }, r), {\n    ref: f\n  }), e);\n}\nb.displayName = \"DisplayText\";\nvar W = H.forwardRef(b);\nvar ce = \"h2\";\nfunction U(m, f) {\n  var n = m,\n    {\n      children: e,\n      className: o,\n      testId: t = \"cf-ui-section-heading\"\n    } = n,\n    r = a(n, [\"children\", \"className\", \"testId\"]);\n  let l = useDensity();\n  return H.createElement(s, i(p({\n    as: ce,\n    testId: t,\n    marginBottom: \"spacingL\",\n    fontWeight: \"fontWeightMedium\",\n    fontColor: \"gray600\",\n    fontSize: l === \"high\" ? \"fontSizeSHigh\" : \"fontSizeS\",\n    lineHeight: l === \"high\" ? \"lineHeightSHigh\" : \"lineHeightS\",\n    className: cx(css({\n      letterSpacing: g.letterSpacingDefault,\n      textTransform: \"lowercase\",\n      \"&:first-letter\": {\n        textTransform: \"uppercase\"\n      }\n    }), o)\n  }, r), {\n    ref: f\n  }), e);\n}\nU.displayName = \"SectionHeading\";\nvar z = H.forwardRef(U);\nvar T = H.forwardRef((f, r) => {\n  var m = f,\n    {\n      children: e,\n      testId: o = \"cf-ui-paragraph\"\n    } = m,\n    t = a(m, [\"children\", \"testId\"]);\n  let n = useDensity();\n  return H.createElement(s, i(p({\n    as: \"p\",\n    testId: o,\n    fontSize: n === \"high\" ? \"fontSizeMHigh\" : \"fontSizeM\",\n    lineHeight: n === \"high\" ? \"lineHeightMHigh\" : \"lineHeightM\",\n    marginBottom: \"spacingM\"\n  }, t), {\n    ref: r\n  }), e);\n});\nT.displayName = \"Paragraph\";\nexport { D as Caption, W as DisplayText, I as Heading, T as Paragraph, z as SectionHeading, N as Subheading, s as Text, G as Typography };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/Caption/Caption.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/Text/Text.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/Heading/Heading.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/Subheading/Subheading.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/Typography.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/DisplayText/DisplayText.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/SectionHeading/SectionHeading.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-typography/src/Paragraph/Paragraph.tsx"],"sourcesContent":["import React from 'react';\nimport { FontWeightTokens } from '@contentful/f36-tokens';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\nimport { useDensity } from '@contentful/f36-utils';\n\nconst CAPTION_DEFAULT_TAG = 'span';\n\nexport interface CaptionInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  fontWeight?: Extract<\n    FontWeightTokens,\n    'fontWeightNormal' | 'fontWeightMedium'\n  >;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type CaptionProps<\n  E extends React.ElementType = typeof CAPTION_DEFAULT_TAG,\n> = PolymorphicProps<CaptionInternalProps, E>;\n\nfunction _Caption<E extends React.ElementType = typeof CAPTION_DEFAULT_TAG>(\n  {\n    children,\n    fontWeight = 'fontWeightNormal',\n    testId = 'cf-ui-caption',\n    ...otherProps\n  }: CaptionProps<E>,\n  ref: React.Ref<any>,\n) {\n  const density = useDensity();\n\n  return (\n    <Text\n      as={CAPTION_DEFAULT_TAG}\n      testId={testId}\n      fontSize={density === 'high' ? 'fontSizeSHigh' : 'fontSizeS'}\n      lineHeight={density === 'high' ? 'lineHeightSHigh' : 'lineHeightS'}\n      fontColor=\"gray900\"\n      fontWeight={fontWeight}\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_Caption.displayName = 'Caption';\n\nexport const Caption: PolymorphicComponent<\n  ExpandProps<CaptionInternalProps>,\n  typeof CAPTION_DEFAULT_TAG\n> = React.forwardRef(_Caption);\n","import React from 'react';\nimport tokens, {\n  FontSizeTokens,\n  LineHeightTokens,\n  FontWeightTokens,\n  FontStackTokens,\n  ColorTokens,\n  LetterSpacingTokens,\n} from '@contentful/f36-tokens';\nimport { css, cx } from 'emotion';\nimport {\n  Box,\n  type PolymorphicComponent,\n  type CommonProps,\n  type MarginProps,\n  type PolymorphicProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nexport interface TextInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  fontSize?: FontSizeTokens;\n  lineHeight?: LineHeightTokens;\n  letterSpacing?: LetterSpacingTokens;\n  fontStack?: FontStackTokens;\n  fontWeight?: FontWeightTokens;\n  fontColor?: ColorTokens;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nconst TEXT_DEFAULT_TAG = 'span';\n\nfunction truncatedStyle() {\n  return css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    maxWidth: '100%',\n  });\n}\n\nfunction wordBreakStyle() {\n  return css({\n    wordBreak: 'break-word',\n  });\n}\n\nexport type TextProps<E extends React.ElementType = typeof TEXT_DEFAULT_TAG> =\n  PolymorphicProps<TextInternalProps, E>;\n\nfunction _Text<E extends React.ElementType = typeof TEXT_DEFAULT_TAG>(\n  {\n    fontSize = 'fontSizeM',\n    fontStack = 'fontStackPrimary',\n    fontWeight = 'fontWeightNormal',\n    fontColor = 'gray800',\n    lineHeight = 'lineHeightM',\n    letterSpacing = 'letterSpacingDefault',\n    children,\n    isTruncated,\n    isWordBreak,\n    as,\n    className,\n    margin = 'none',\n    ...otherProps\n  }: TextProps<E>,\n  ref: React.Ref<any>,\n) {\n  const Element: React.ElementType = as || TEXT_DEFAULT_TAG;\n\n  return (\n    <Box\n      {...otherProps}\n      as={Element}\n      className={cx(\n        css({\n          padding: 0,\n          fontFamily: tokens[fontStack],\n          fontWeight: tokens[fontWeight],\n          color: tokens[fontColor],\n          fontSize: tokens[fontSize],\n          lineHeight: tokens[lineHeight],\n          letterSpacing: tokens[letterSpacing],\n        }),\n        isTruncated ? truncatedStyle() : null,\n        isWordBreak ? wordBreakStyle() : null,\n        className,\n      )}\n      margin={margin}\n      ref={ref}\n    >\n      {children}\n    </Box>\n  );\n}\n\n_Text.displayName = 'Text';\n\nexport const Text: PolymorphicComponent<\n  ExpandProps<TextInternalProps>,\n  typeof TEXT_DEFAULT_TAG\n> = React.forwardRef(_Text);\n","import React from 'react';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\nimport { useDensity } from '@contentful/f36-utils';\n\nconst HEADING_DEFAULT_TAG = 'h1';\n\nexport type HeadingElement = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6';\n\nexport interface HeadingInternalProps extends CommonProps, MarginProps {\n  as?: HeadingElement;\n  children?: React.ReactNode;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type HeadingProps<\n  E extends React.ElementType = typeof HEADING_DEFAULT_TAG,\n> = PolymorphicProps<HeadingInternalProps, E>;\n\nfunction _Heading<E extends React.ElementType = typeof HEADING_DEFAULT_TAG>(\n  { children, testId = 'cf-ui-heading', ...otherProps }: HeadingProps<E>,\n  ref: React.Ref<any>,\n) {\n  const density = useDensity();\n\n  return (\n    <Text\n      as={HEADING_DEFAULT_TAG}\n      testId={testId}\n      marginBottom=\"spacingM\"\n      fontWeight=\"fontWeightDemiBold\"\n      fontColor=\"gray900\"\n      fontSize={density === 'high' ? 'fontSizeXlHigh' : 'fontSizeXl'}\n      lineHeight={density === 'high' ? 'lineHeightXlHigh' : 'lineHeightXl'}\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_Heading.displayName = 'Heading';\n\nexport const Heading: PolymorphicComponent<\n  ExpandProps<HeadingInternalProps>,\n  typeof HEADING_DEFAULT_TAG\n> = React.forwardRef(_Heading);\n","import React from 'react';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport type { HeadingElement } from '../Heading';\nimport { Text } from '../Text';\nimport { useDensity } from '@contentful/f36-utils';\n\nconst SUBHEADING_DEFAULT_TAG = 'h3';\n\nexport interface SubheadingInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  as?: HeadingElement;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type SubheadingProps<\n  E extends React.ElementType = typeof SUBHEADING_DEFAULT_TAG,\n> = PolymorphicProps<SubheadingInternalProps, E>;\n\nfunction _Subheading<\n  E extends React.ElementType = typeof SUBHEADING_DEFAULT_TAG,\n>(\n  { children, testId = 'cf-ui-subheading', ...otherProps }: SubheadingProps<E>,\n  ref: React.Ref<any>,\n) {\n  const density = useDensity();\n\n  return (\n    <Text\n      as={SUBHEADING_DEFAULT_TAG}\n      testId={testId}\n      marginBottom=\"spacingM\"\n      fontSize={density === 'high' ? 'fontSizeLHigh' : 'fontSizeL'}\n      lineHeight={density === 'high' ? 'lineHeightLHigh' : 'lineHeightL'}\n      fontWeight=\"fontWeightDemiBold\"\n      fontColor=\"gray900\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_Subheading.displayName = 'Subheading';\n\nexport const Subheading: PolymorphicComponent<\n  ExpandProps<SubheadingInternalProps>,\n  typeof SUBHEADING_DEFAULT_TAG\n> = React.forwardRef(_Subheading);\n","import React, { useEffect } from 'react';\n\nexport interface TypographyProps {\n  children?: React.ReactNode;\n}\n\n/**\n * @deprecated\n */\nexport const Typography = (props: TypographyProps) => {\n  useEffect(() => {\n    // eslint-disable-next-line no-console -- allow this warning until we refactor\n    console.warn(\n      'Forma 36: Typography component is deprecated. You can safely remove it from your components.',\n    );\n  }, []);\n  return <>{props.children}</>;\n};\n\nTypography.displayName = 'Typography';\n","import React from 'react';\nimport { FontSizeTokens, LineHeightTokens } from '@contentful/f36-tokens';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\nimport type { HeadingElement } from '../Heading';\n\nconst DISPLAY_TEXT_DEFAULT_TAG = 'h2';\n\nexport interface DisplayTextInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  size?: 'default' | 'large';\n  as?: HeadingElement;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type DisplayTextProps<\n  E extends React.ElementType = typeof DISPLAY_TEXT_DEFAULT_TAG,\n> = PolymorphicProps<DisplayTextInternalProps, E>;\n\nfunction _DisplayText<\n  E extends React.ElementType = typeof DISPLAY_TEXT_DEFAULT_TAG,\n>(\n  {\n    children,\n    size = 'default',\n    testId = 'cf-ui-display-text',\n    ...otherProps\n  }: DisplayTextProps<E>,\n  ref: React.Ref<any>,\n) {\n  let fontSize: FontSizeTokens = 'fontSize2Xl';\n  let lineHeight: LineHeightTokens = 'lineHeight2Xl';\n\n  if (size === 'large') {\n    fontSize = 'fontSize3Xl';\n    lineHeight = 'lineHeight3Xl';\n  }\n\n  return (\n    <Text\n      as={DISPLAY_TEXT_DEFAULT_TAG}\n      testId={testId}\n      marginBottom={size === 'default' ? 'spacingL' : 'spacingXl'}\n      fontSize={fontSize}\n      lineHeight={lineHeight}\n      fontColor=\"gray900\"\n      fontWeight=\"fontWeightDemiBold\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_DisplayText.displayName = 'DisplayText';\n\nexport const DisplayText: PolymorphicComponent<\n  ExpandProps<DisplayTextInternalProps>,\n  typeof DISPLAY_TEXT_DEFAULT_TAG\n> = React.forwardRef(_DisplayText);\n","import React from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport { css, cx } from 'emotion';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport type { HeadingElement } from '../Heading';\nimport { Text } from '../Text';\nimport { useDensity } from '@contentful/f36-utils';\n\nconst SECTION_HEADING_DEFAULT_TAG = 'h2';\n\nexport interface SectionHeadingInternalProps extends CommonProps, MarginProps {\n  children?: React.ReactNode;\n  as?: HeadingElement;\n  isTruncated?: boolean;\n  isWordBreak?: boolean;\n}\n\nexport type SectionHeadingProps<\n  E extends React.ElementType = typeof SECTION_HEADING_DEFAULT_TAG,\n> = PolymorphicProps<SectionHeadingInternalProps, E>;\n\nfunction _SectionHeading<\n  E extends React.ElementType = typeof SECTION_HEADING_DEFAULT_TAG,\n>(\n  {\n    children,\n    className,\n    testId = 'cf-ui-section-heading',\n    ...otherProps\n  }: SectionHeadingProps<E>,\n  ref: React.Ref<any>,\n) {\n  const density = useDensity();\n\n  return (\n    <Text\n      as={SECTION_HEADING_DEFAULT_TAG}\n      testId={testId}\n      marginBottom=\"spacingL\"\n      fontWeight=\"fontWeightMedium\"\n      fontColor=\"gray600\"\n      fontSize={density === 'high' ? 'fontSizeSHigh' : 'fontSizeS'}\n      lineHeight={density === 'high' ? 'lineHeightSHigh' : 'lineHeightS'}\n      className={cx(\n        css({\n          letterSpacing: tokens.letterSpacingDefault,\n          textTransform: 'lowercase',\n          '&:first-letter': {\n            textTransform: 'uppercase',\n          },\n        }),\n        className,\n      )}\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n}\n\n_SectionHeading.displayName = 'SectionHeading';\n\nexport const SectionHeading: PolymorphicComponent<\n  ExpandProps<SectionHeadingInternalProps>,\n  typeof SECTION_HEADING_DEFAULT_TAG\n> = React.forwardRef(_SectionHeading);\n","import React from 'react';\nimport type {\n  PropsWithHTMLElement,\n  CommonProps,\n  MarginProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '../Text';\nimport { useDensity } from '@contentful/f36-utils';\n\nexport type ParagraphInternalProps = CommonProps &\n  MarginProps & {\n    children: React.ReactNode;\n    isTruncated?: boolean;\n    isWordBreak?: boolean;\n  };\n\nexport type ParagraphProps = PropsWithHTMLElement<ParagraphInternalProps, 'p'>;\n\nexport const Paragraph = React.forwardRef<\n  HTMLParagraphElement,\n  ExpandProps<ParagraphProps>\n>(({ children, testId = 'cf-ui-paragraph', ...otherProps }, ref) => {\n  const density = useDensity();\n\n  return (\n    <Text\n      as=\"p\"\n      testId={testId}\n      fontSize={density === 'high' ? 'fontSizeMHigh' : 'fontSizeM'}\n      lineHeight={density === 'high' ? 'lineHeightMHigh' : 'lineHeightM'}\n      marginBottom=\"spacingM\"\n      {...otherProps}\n      ref={ref}\n    >\n      {children}\n    </Text>\n  );\n});\n\nParagraph.displayName = 'Paragraph';\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}