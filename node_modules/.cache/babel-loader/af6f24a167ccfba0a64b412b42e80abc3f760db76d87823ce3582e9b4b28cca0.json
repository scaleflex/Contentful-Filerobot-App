{"ast":null,"code":"import { cx, css } from 'emotion';\nimport m from 'react';\nimport { Stack, Box, Flex } from '@contentful/f36-core';\nimport o from '@contentful/f36-tokens';\nimport { useDensity, hexToRGBA } from '@contentful/f36-utils';\nimport { Spinner } from '@contentful/f36-spinner';\nimport { Tooltip } from '@contentful/f36-tooltip';\nvar io = Object.defineProperty,\n  so = Object.defineProperties;\nvar ao = Object.getOwnPropertyDescriptors;\nvar E = Object.getOwnPropertySymbols;\nvar L = Object.prototype.hasOwnProperty,\n  W = Object.prototype.propertyIsEnumerable;\nvar X = (t, r, e) => r in t ? io(t, r, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : t[r] = e,\n  i = (t, r) => {\n    for (var e in r || (r = {})) L.call(r, e) && X(t, e, r[e]);\n    if (E) for (var e of E(r)) W.call(r, e) && X(t, e, r[e]);\n    return t;\n  },\n  R = (t, r) => so(t, ao(r));\nvar b = (t, r) => {\n  var e = {};\n  for (var n in t) L.call(t, n) && r.indexOf(n) < 0 && (e[n] = t[n]);\n  if (t != null && E) for (var n of E(t)) r.indexOf(n) < 0 && W.call(t, n) && (e[n] = t[n]);\n  return e;\n};\nvar H = ({\n    withDivider: t\n  }) => {\n    let r = lo(t);\n    return {\n      buttonGroup: css({\n        display: \"inline-flex\",\n        position: \"relative\"\n      }),\n      groupContent: css(i({\n        borderRadius: \"0 !important\",\n        marginRight: \"-1px\",\n        \"&:first-child\": {\n          borderBottomLeftRadius: `${o.borderRadiusMedium} !important`,\n          borderTopLeftRadius: `${o.borderRadiusMedium} !important`\n        },\n        \"&:last-child\": {\n          borderBottomRightRadius: `${o.borderRadiusMedium} !important`,\n          borderTopRightRadius: `${o.borderRadiusMedium} !important`,\n          marginRight: 0\n        },\n        \"&:focus\": {\n          zIndex: o.zIndexDefault\n        }\n      }, r))\n    };\n  },\n  lo = t => {\n    if (!t) return {};\n    let r = `1px solid ${hexToRGBA(o.colorWhite, .2)}`;\n    return {\n      borderTop: \"none\",\n      borderBottom: \"none\",\n      \"&:not(:first-child,:focus-visible)\": {\n        borderLeft: r\n      },\n      \"&:not(:last-child,:focus-visible)\": {\n        borderRight: r\n      }\n    };\n  };\nfunction F(t, r) {\n  let {\n      variant: e = \"merged\",\n      withDivider: n,\n      testId: s = \"cf-ui-button-group\",\n      children: a,\n      className: l,\n      spacing: p\n    } = t,\n    u = H({\n      withDivider: n\n    });\n  return e === \"spaced\" ? m.createElement(Stack, {\n    className: l,\n    isInline: !0,\n    flexDirection: \"row\",\n    testId: s,\n    ref: r,\n    spacing: p\n  }, a) : m.createElement(Box, {\n    testId: s,\n    ref: r,\n    className: cx(u.buttonGroup, l)\n  }, m.Children.map(a, (c, y) => c ? m.cloneElement(c, {\n    key: y,\n    className: cx(u.groupContent, c.props.className)\n  }) : null));\n}\nF.displayName = \"ButtonGroup\";\nvar j = m.forwardRef(F);\nvar B = t => {\n    switch (t) {\n      case \"primary\":\n        return {\n          backgroundColor: o.blue700\n        };\n      case \"secondary\":\n        return {\n          backgroundColor: o.gray200\n        };\n      case \"positive\":\n        return {\n          backgroundColor: o.green700\n        };\n      case \"negative\":\n        return {\n          backgroundColor: o.gray200\n        };\n      case \"transparent\":\n        return {\n          backgroundColor: hexToRGBA(o.gray900, .1)\n        };\n      default:\n        return {};\n    }\n  },\n  mo = t => {\n    switch (t) {\n      case \"primary\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.blue500,\n          borderColor: \"transparent\",\n          \"&:hover\": {\n            backgroundColor: o.blue600,\n            color: o.colorWhite\n          },\n          \"&:active\": B(t),\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      case \"secondary\":\n        return {\n          color: o.gray900,\n          backgroundColor: o.colorWhite,\n          borderColor: o.gray300,\n          \"&:hover\": {\n            backgroundColor: o.gray100,\n            color: o.gray900\n          },\n          \"&:active\": B(t),\n          \"&:focus\": {\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      case \"positive\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.green500,\n          borderColor: \"transparent\",\n          \"&:hover\": {\n            backgroundColor: o.green600,\n            color: o.colorWhite\n          },\n          \"&:active\": B(t),\n          \"&:focus-visible\": {\n            boxShadow: o.glowPositive\n          }\n        };\n      case \"negative\":\n        return {\n          color: o.red600,\n          backgroundColor: o.colorWhite,\n          borderColor: o.gray300,\n          \"&:hover\": {\n            backgroundColor: o.gray100,\n            color: o.red600\n          },\n          \"&:active\": B(t),\n          \"&:focus-visible\": {\n            boxShadow: o.glowNegative\n          }\n        };\n      case \"transparent\":\n        return {\n          color: o.gray900,\n          background: \"none\",\n          borderColor: \"transparent\",\n          boxShadow: \"none\",\n          \"&:hover\": {\n            backgroundColor: hexToRGBA(o.gray900, .05)\n          },\n          \"&:active\": B(t),\n          \"&:focus\": {\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      default:\n        return {};\n    }\n  },\n  go = (t, r) => {\n    let e = r === \"high\";\n    switch (t) {\n      case \"small\":\n        return {\n          fontSize: e ? o.fontSizeS : o.fontSizeM,\n          lineHeight: o.lineHeightCondensed,\n          padding: e ? `${o.spacing2Xs} ${o.spacingXs}` : `${o.spacing2Xs} ${o.spacingS}`,\n          minHeight: e ? o.spacingL : o.spacingXl\n        };\n      case \"medium\":\n        return {\n          fontSize: e ? o.fontSizeS : o.fontSizeM,\n          lineHeight: o.lineHeightCondensed,\n          padding: e ? `${o.spacingXs} ${o.spacingS}` : `${o.spacingXs} ${o.spacingM}`,\n          minHeight: e ? o.spacingXl : \"40px\"\n        };\n      case \"large\":\n        return {\n          fontSize: o.fontSizeXl,\n          lineHeight: o.lineHeightXl,\n          padding: `${o.spacingXs} ${o.spacingM}`,\n          minHeight: \"48px\"\n        };\n      default:\n        return {};\n    }\n  },\n  fo = ({\n    hasChildren: t,\n    variant: r\n  }) => {\n    let e = {\n      \"&:first-child\": {\n        marginRight: o.spacing2Xs\n      },\n      \"&:last-child\": {\n        marginLeft: o.spacing2Xs\n      }\n    };\n    return css([t ? e : {}, r !== \"transparent\" && t && {\n      \"& svg\": {\n        fill: \"currentColor\"\n      }\n    }]);\n  },\n  q = () => ({\n    button: ({\n      variant: t,\n      size: r,\n      density: e,\n      isActive: n,\n      isDisabled: s,\n      isFullWidth: a\n    }) => css(i(i(i({\n      boxSizing: \"border-box\",\n      border: \"1px solid\",\n      boxShadow: \"0px 1px 0px rgb(25, 37, 50, 0.08)\",\n      borderRadius: e === \"high\" ? o.borderRadiusSmall : o.borderRadiusMedium,\n      cursor: s ? \"not-allowed\" : \"pointer\",\n      fontFamily: o.fontStackPrimary,\n      opacity: s ? .5 : 1,\n      display: a ? \"flex\" : \"inline-flex\",\n      minWidth: a ? \"100%\" : \"auto\",\n      maxWidth: a ? \"100%\" : \"240px\",\n      overflow: \"hidden\",\n      flexShrink: 0,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontWeight: o.fontWeightMedium,\n      outline: \"none\",\n      textDecoration: \"none\",\n      margin: 0,\n      transition: `background ${o.transitionDurationShort} ${o.transitionEasingDefault},\n        opacity ${o.transitionDurationDefault} ${o.transitionEasingDefault},\n        border-color ${o.transitionDurationDefault} ${o.transitionEasingDefault}`\n    }, mo(t)), go(r, e)), n ? {\n      transition: \"none\",\n      \"&, &:focus\": B(t)\n    } : {})),\n    buttonIcon: fo,\n    buttonContent: css({\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    })\n  });\nvar Bo = \"button\";\nfunction K(t, r) {\n  let e = q(),\n    O = t,\n    {\n      as: n = Bo,\n      children: s,\n      className: a,\n      testId: l = \"cf-ui-button\",\n      variant: p = \"secondary\",\n      size: u = \"medium\",\n      startIcon: c,\n      endIcon: y,\n      isActive: P,\n      isDisabled: h,\n      isLoading: g,\n      isFullWidth: C,\n      style: v\n    } = O,\n    w = b(O, [\"as\", \"children\", \"className\", \"testId\", \"variant\", \"size\", \"startIcon\", \"endIcon\", \"isActive\", \"isDisabled\", \"isLoading\", \"isFullWidth\", \"style\"]),\n    z = useDensity(),\n    D = cx(e.button({\n      variant: p,\n      size: u,\n      density: z,\n      isActive: P,\n      isDisabled: h,\n      isFullWidth: C\n    }), a),\n    A = T => {\n      var $;\n      let no = {\n        primary: \"white\",\n        secondary: \"secondary\",\n        positive: \"white\",\n        negative: \"negative\",\n        transparent: \"secondary\"\n      };\n      return !g && m.createElement(Flex, {\n        as: \"span\",\n        className: e.buttonIcon({\n          hasChildren: !!s,\n          variant: p\n        })\n      }, m.cloneElement(T, {\n        size: ($ = T.props.size) != null ? $ : `${u === \"large\" ? \"medium\" : \"small\"}`,\n        color: p === \"transparent\" && T.props.variant === void 0 && T.props.color || \"currentColor\",\n        variant: p === \"transparent\" && T.props.variant || no[p]\n      }));\n    },\n    G = m.createElement(m.Fragment, null, c && A(c), s && m.createElement(Box, {\n      as: \"span\",\n      display: \"block\",\n      className: e.buttonContent\n    }, s), y && A(y), g && m.createElement(Box, {\n      as: \"span\",\n      marginLeft: s || !g ? \"spacingXs\" : \"none\"\n    }, m.createElement(Spinner, {\n      customSize: 18,\n      variant: p === \"secondary\" || p === \"negative\" || p === \"transparent\" ? \"default\" : \"white\"\n    }))),\n    _ = {\n      \"data-test-id\": l,\n      className: D,\n      ref: r,\n      style: v\n    };\n  return n === \"a\" ? m.createElement(\"a\", R(i(i({}, w), _), {\n    disabled: h\n  }), G) : m.createElement(\"button\", R(i(i({\n    type: \"button\"\n  }, w), _), {\n    disabled: h\n  }), G);\n}\nK.displayName = \"Button\";\nvar S = m.forwardRef(K);\nvar Po = ({\n    isActive: t,\n    isDisabled: r\n  }) => {\n    let e = {\n        background: o.blue100,\n        borderColor: o.blue600,\n        \"&\": {\n          zIndex: o.zIndexDefault + 1\n        },\n        \"&:hover\": {\n          background: o.blue100\n        }\n      },\n      n = {\n        \"&:focus\": {\n          boxShadow: o.glowPrimary\n        },\n        \"&:focus-visible:not([disabled])\": {\n          zIndex: o.zIndexDefault + 2\n        },\n        \"&:active, &:active:hover\": r ? {\n          background: o.colorWhite,\n          borderColor: o.gray300\n        } : {\n          background: o.blue100,\n          borderColor: o.blue600\n        }\n      };\n    return t ? i(i({}, n), e) : n;\n  },\n  Q = ({\n    isActive: t,\n    isDisabled: r\n  }) => ({\n    toggleButton: css(Po({\n      isActive: t,\n      isDisabled: r\n    }))\n  });\nfunction Z(t, r) {\n  let g = t,\n    {\n      testId: e = \"cf-ui-toggle-button\",\n      children: n,\n      className: s,\n      isDisabled: a = !1,\n      isActive: l = !1,\n      icon: p,\n      onToggle: u,\n      size: c = \"medium\"\n    } = g,\n    y = b(g, [\"testId\", \"children\", \"className\", \"isDisabled\", \"isActive\", \"icon\", \"onToggle\", \"size\"]),\n    P = Q({\n      isActive: l,\n      isDisabled: a\n    });\n  return m.createElement(S, i({\n    testId: e,\n    type: \"button\",\n    ref: r,\n    size: c,\n    onClick: () => {\n      !a && u && u();\n    },\n    className: cx(P.toggleButton, s),\n    startIcon: p,\n    isDisabled: a,\n    \"aria-pressed\": l,\n    \"data-state\": l ? \"on\" : \"off\"\n  }, y), n);\n}\nZ.displayName = \"ToggleButton\";\nvar oo = m.forwardRef(Z);\nfunction Co(t, r) {\n  let e = r === \"high\";\n  switch (t) {\n    case \"small\":\n      return {\n        padding: e ? `${o.spacing2Xs}` : o.spacing2Xs,\n        minHeight: e ? o.spacingL : o.spacingXl,\n        minWidth: e ? o.spacingL : o.spacingXl\n      };\n    case \"medium\":\n      return {\n        padding: o.spacingXs,\n        minHeight: e ? o.spacingXl : \"40px\",\n        minWidth: e ? o.spacingXl : \"40px\"\n      };\n    default:\n      return {};\n  }\n}\nfunction to({\n  size: t,\n  density: r\n}) {\n  return {\n    iconButton: css(i({}, Co(t, r)))\n  };\n}\nfunction eo(t, r) {\n  let C = t,\n    {\n      testId: e = \"cf-ui-icon-button\",\n      variant: n = \"transparent\",\n      icon: s,\n      className: a,\n      size: l = \"medium\",\n      withTooltip: p = !1,\n      tooltipProps: u,\n      \"aria-label\": c\n    } = C,\n    y = b(C, [\"testId\", \"variant\", \"icon\", \"className\", \"size\", \"withTooltip\", \"tooltipProps\", \"aria-label\"]),\n    P = useDensity(),\n    h = to({\n      size: l,\n      density: P\n    }),\n    g = m.createElement(S, i({\n      testId: e,\n      ref: r,\n      variant: n,\n      className: cx(h.iconButton, a),\n      size: l,\n      startIcon: s,\n      \"aria-label\": c\n    }, y));\n  if (p) {\n    let v = u || {},\n      {\n        showDelay: w = 600,\n        content: z = c\n      } = v,\n      D = b(v, [\"showDelay\", \"content\"]);\n    return m.createElement(Tooltip, i({\n      content: z,\n      showDelay: w\n    }, D), g);\n  }\n  return g;\n}\neo.displayName = \"IconButton\";\nvar ro = m.forwardRef(eo);\nexport { S as Button, j as ButtonGroup, ro as IconButton, oo as ToggleButton };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["m","Stack","Box","Flex"],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/ButtonGroup/ButtonGroup.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/ButtonGroup/ButtonGroup.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/ToggleButton/ToggleButton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/Button/Button.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/Button/Button.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/ToggleButton/ToggleButton.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/IconButton/IconButton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-button/src/IconButton/IconButton.styles.ts"],"sourcesContent":["import { cx } from 'emotion';\nimport React from 'react';\nimport { Box, Stack, type ExpandProps } from '@contentful/f36-core';\nimport getStyles from './ButtonGroup.styles';\nimport type { ButtonGroupProps } from './types';\n\nfunction _ButtonGroup(\n  props: ExpandProps<ButtonGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    variant = 'merged',\n    withDivider,\n    testId = 'cf-ui-button-group',\n    children,\n    className,\n    spacing,\n  } = props;\n  const styles = getStyles({ withDivider });\n\n  if (variant === 'spaced') {\n    return (\n      <Stack\n        className={className}\n        isInline\n        flexDirection=\"row\"\n        testId={testId}\n        ref={ref}\n        spacing={spacing}\n      >\n        {children}\n      </Stack>\n    );\n  }\n\n  return (\n    <Box\n      testId={testId}\n      ref={ref}\n      className={cx(styles.buttonGroup, className)}\n    >\n      {React.Children.map(children, (child, key) => {\n        if (!child) {\n          return null;\n        }\n        return React.cloneElement(child as React.ReactElement, {\n          key,\n          className: cx(\n            styles.groupContent,\n            (child as React.ReactElement).props.className,\n          ),\n        });\n      })}\n    </Box>\n  );\n}\n\n_ButtonGroup.displayName = 'ButtonGroup';\n\nexport const ButtonGroup = React.forwardRef(_ButtonGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport type { CSSObject } from '@emotion/serialize';\nimport type { GetStyleArguments } from './types';\n\nexport default ({ withDivider }: GetStyleArguments) => {\n  const dividerStyle = getDividerStyle(withDivider);\n\n  return {\n    buttonGroup: css({\n      display: 'inline-flex',\n      position: 'relative',\n    }),\n    groupContent: css({\n      borderRadius: '0 !important',\n      marginRight: '-1px',\n      '&:first-child': {\n        borderBottomLeftRadius: `${tokens.borderRadiusMedium} !important`,\n        borderTopLeftRadius: `${tokens.borderRadiusMedium} !important`,\n      },\n      '&:last-child': {\n        borderBottomRightRadius: `${tokens.borderRadiusMedium} !important`,\n        borderTopRightRadius: `${tokens.borderRadiusMedium} !important`,\n        marginRight: 0,\n      },\n      '&:focus': {\n        zIndex: tokens.zIndexDefault,\n      },\n      ...dividerStyle,\n    }),\n  };\n};\n\nconst getDividerStyle = (withDivider: boolean): CSSObject => {\n  if (!withDivider) return {};\n\n  const divider = `1px solid ${hexToRGBA(tokens.colorWhite, 0.2)}`;\n\n  return {\n    borderTop: 'none',\n    borderBottom: 'none',\n    '&:not(:first-child,:focus-visible)': {\n      borderLeft: divider,\n    },\n    '&:not(:last-child,:focus-visible)': {\n      borderRight: divider,\n    },\n  };\n};\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport getStyles from './ToggleButton.styles';\nimport { ButtonSize } from '../types';\n\nexport interface ToggleButtonProps extends CommonProps {\n  /**\n   * Applies active styles\n   * @default false\n   */\n  isActive?: boolean;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Function triggered when the toggle button is clicked.\n   */\n  onToggle: () => void;\n\n  /**\n   * Determines size variation of Button component\n   * @default medium\n   */\n  size?: ButtonSize;\n\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label'?: string;\n\n  children?: React.ReactNode;\n}\n\nfunction _ToggleButton(props: ExpandProps<ToggleButtonProps>, ref) {\n  const {\n    testId = 'cf-ui-toggle-button',\n    children,\n    className,\n    isDisabled = false,\n    isActive = false,\n    icon,\n    onToggle,\n    size = 'medium',\n    ...otherProps\n  } = props;\n\n  const styles = getStyles({ isActive, isDisabled });\n\n  const handleToggle = () => {\n    if (!isDisabled && onToggle) {\n      onToggle();\n    }\n  };\n\n  return (\n    <Button\n      testId={testId}\n      type=\"button\"\n      ref={ref}\n      size={size}\n      onClick={handleToggle}\n      className={cx(styles.toggleButton, className)}\n      startIcon={icon}\n      isDisabled={isDisabled}\n      aria-pressed={isActive}\n      data-state={isActive ? 'on' : 'off'}\n      {...otherProps}\n    >\n      {children}\n    </Button>\n  );\n}\n\n_ToggleButton.displayName = 'ToggleButton';\n\nexport const ToggleButton = React.forwardRef(_ToggleButton);\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  Box,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { useDensity } from '@contentful/f36-utils';\nimport { Spinner } from '@contentful/f36-spinner';\n\nimport type { ButtonInternalProps } from '../types';\nimport { getStyles } from './Button.styles';\n\nconst BUTTON_DEFAULT_TAG = 'button';\n\nexport type ButtonProps<\n  E extends React.ElementType = typeof BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<ButtonInternalProps, E, 'disabled'>;\n\nfunction _Button<E extends React.ElementType = typeof BUTTON_DEFAULT_TAG>(\n  props: ButtonProps<E>,\n  ref: React.Ref<any>,\n) {\n  const styles = getStyles();\n  const {\n    as = BUTTON_DEFAULT_TAG,\n    children,\n    className,\n    testId = 'cf-ui-button',\n    variant = 'secondary',\n    size = 'medium',\n    startIcon,\n    endIcon,\n    isActive,\n    isDisabled,\n    isLoading,\n    isFullWidth,\n    style,\n    ...otherProps\n  } = props;\n  const density = useDensity();\n\n  const rootClassNames = cx(\n    styles.button({\n      variant,\n      size,\n      density,\n      isActive,\n      isDisabled,\n      isFullWidth,\n    }),\n    className,\n  );\n\n  const iconContent = (icon) => {\n    const defaultIconColor: {\n      [Property in ButtonInternalProps['variant']]: string;\n    } = {\n      primary: 'white',\n      secondary: 'secondary',\n      positive: 'white',\n      negative: 'negative',\n      transparent: 'secondary',\n    };\n\n    return (\n      !isLoading && (\n        <Flex\n          as=\"span\"\n          className={styles.buttonIcon({ hasChildren: !!children, variant })}\n        >\n          {React.cloneElement(icon, {\n            size: icon.props.size ?? `${size === 'large' ? 'medium' : 'small'}`,\n            // We need to pass the color to the icons to enable the usaged of the V5 icons\n            // it may change in the future\n            color:\n              (variant === 'transparent' &&\n                icon.props.variant === undefined &&\n                icon.props.color) ||\n              'currentColor',\n            // we want to allow variants for icons for transparent buttons\n            variant:\n              (variant === 'transparent' && icon.props.variant) ||\n              defaultIconColor[variant],\n          })}\n        </Flex>\n      )\n    );\n  };\n\n  const commonContent = (\n    <>\n      {startIcon && iconContent(startIcon)}\n      {children && (\n        <Box as=\"span\" display=\"block\" className={styles.buttonContent}>\n          {children}\n        </Box>\n      )}\n      {endIcon && iconContent(endIcon)}\n      {isLoading && (\n        <Box\n          as=\"span\"\n          marginLeft={children || !isLoading ? 'spacingXs' : 'none'}\n        >\n          <Spinner\n            customSize={18}\n            variant={\n              variant === 'secondary' ||\n              variant === 'negative' ||\n              variant === 'transparent'\n                ? 'default'\n                : 'white'\n            }\n          />\n        </Box>\n      )}\n    </>\n  );\n\n  const commonProps = {\n    ['data-test-id']: testId,\n    className: rootClassNames,\n    ref: ref,\n    style,\n  };\n\n  if (as === 'a') {\n    return (\n      <a {...otherProps} {...commonProps} disabled={isDisabled}>\n        {commonContent}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      {...otherProps}\n      {...commonProps}\n      disabled={isDisabled}\n    >\n      {commonContent}\n    </button>\n  );\n}\n\n_Button.displayName = 'Button';\n\n/**\n * @description: Buttons communicate the action that will occur when the user clicks it\n */\nexport const Button: PolymorphicComponent<\n  ExpandProps<ButtonInternalProps>,\n  typeof BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_Button);\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\nimport { ButtonSize, ButtonVariant, ButtonStylesProps } from '../types';\nimport { hexToRGBA, type Density } from '@contentful/f36-utils';\n\nconst variantActiveStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return { backgroundColor: tokens.blue700 };\n    case 'secondary':\n      return { backgroundColor: tokens.gray200 };\n    case 'positive':\n      return { backgroundColor: tokens.green700 };\n    case 'negative':\n      return { backgroundColor: tokens.gray200 };\n    case 'transparent':\n      return { backgroundColor: hexToRGBA(tokens.gray900, 0.1) };\n    default:\n      return {};\n  }\n};\n\nconst variantToStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue500,\n        borderColor: 'transparent',\n        '&:hover': {\n          backgroundColor: tokens.blue600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray900,\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.gray900,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.green500,\n        borderColor: 'transparent',\n        '&:hover': {\n          backgroundColor: tokens.green600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus-visible': {\n          boxShadow: tokens.glowPositive,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.red600,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus-visible': {\n          boxShadow: tokens.glowNegative,\n        },\n      };\n    case 'transparent':\n      return {\n        color: tokens.gray900,\n        background: 'none',\n        borderColor: 'transparent',\n        boxShadow: 'none',\n        '&:hover': {\n          backgroundColor: hexToRGBA(tokens.gray900, 0.05),\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = (size: ButtonSize, density: Density): CSSObject => {\n  const isHighDensity = density === 'high';\n\n  switch (size) {\n    case 'small':\n      return {\n        fontSize: isHighDensity ? tokens.fontSizeS : tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: isHighDensity\n          ? `${tokens.spacing2Xs} ${tokens.spacingXs}`\n          : `${tokens.spacing2Xs} ${tokens.spacingS}`,\n        minHeight: isHighDensity ? tokens.spacingL : tokens.spacingXl,\n      };\n    case 'medium':\n      return {\n        fontSize: isHighDensity ? tokens.fontSizeS : tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: isHighDensity\n          ? `${tokens.spacingXs} ${tokens.spacingS}`\n          : `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: isHighDensity ? tokens.spacingXl : '40px',\n      };\n    case 'large':\n      return {\n        fontSize: tokens.fontSizeXl,\n        lineHeight: tokens.lineHeightXl,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '48px',\n      };\n    default:\n      return {};\n  }\n};\n\nconst getButtonIconStyle = ({ hasChildren, variant }) => {\n  const align = {\n    '&:first-child': { marginRight: tokens.spacing2Xs },\n    '&:last-child': { marginLeft: tokens.spacing2Xs },\n  };\n\n  const margin = hasChildren ? align : {};\n\n  return css([\n    margin,\n    // we want to allow variants for icons, but only in the transparent IconButton\n    variant !== 'transparent' &&\n      hasChildren && {\n        '& svg': {\n          fill: 'currentColor',\n        },\n      },\n  ]);\n};\n\nexport const getStyles = () => ({\n  button: ({\n    variant,\n    size,\n    density,\n    isActive,\n    isDisabled,\n    isFullWidth,\n  }: ButtonStylesProps & { density: Density }) =>\n    css({\n      boxSizing: 'border-box',\n      border: `1px solid`,\n      boxShadow: '0px 1px 0px rgb(25, 37, 50, 0.08)',\n      borderRadius:\n        density === 'high'\n          ? tokens.borderRadiusSmall\n          : tokens.borderRadiusMedium,\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      fontFamily: tokens.fontStackPrimary,\n      opacity: isDisabled ? 0.5 : 1,\n      display: isFullWidth ? 'flex' : 'inline-flex',\n      minWidth: isFullWidth ? '100%' : 'auto',\n      maxWidth: isFullWidth ? '100%' : '240px',\n      overflow: 'hidden',\n      flexShrink: 0,\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontWeight: tokens.fontWeightMedium,\n      outline: 'none',\n      textDecoration: 'none',\n      margin: 0, // remove the default margin in Safari.\n      transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n        opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n        border-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      ...variantToStyles(variant),\n      ...sizeToStyles(size, density),\n      ...(isActive\n        ? {\n            transition: 'none',\n            '&, &:focus': variantActiveStyles(variant),\n          }\n        : {}),\n    }),\n  buttonIcon: getButtonIconStyle,\n  buttonContent: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { GetStyleArguments } from './types';\n\nconst getToggleButtonStyle = ({ isActive, isDisabled }: GetStyleArguments) => {\n  const activeStyle = {\n    background: tokens.blue100,\n    borderColor: tokens.blue600,\n    '&': {\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    '&:hover': {\n      background: tokens.blue100,\n    },\n  };\n\n  const baseStyle = {\n    '&:focus': {\n      boxShadow: tokens.glowPrimary,\n    },\n    '&:focus-visible:not([disabled])': {\n      zIndex: tokens.zIndexDefault + 2,\n    },\n    '&:active, &:active:hover': isDisabled\n      ? {\n          background: tokens.colorWhite,\n          borderColor: tokens.gray300,\n        }\n      : {\n          background: tokens.blue100,\n          borderColor: tokens.blue600,\n        },\n  };\n\n  if (isActive) {\n    return {\n      ...baseStyle,\n      ...activeStyle,\n    };\n  }\n\n  return baseStyle;\n};\n\nexport default ({ isActive, isDisabled }: GetStyleArguments) => ({\n  toggleButton: css(getToggleButtonStyle({ isActive, isDisabled })),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n  CommonProps,\n} from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport type { ButtonInternalProps } from '../types';\nimport { getStyles } from './IconButton.styles';\nimport { useDensity } from '@contentful/f36-utils';\nimport {\n  Tooltip,\n  type TooltipInternalProps,\n  type WithEnhancedContent,\n} from '@contentful/f36-tooltip';\n\ntype WithTooltipOrNot =\n  | {\n      /**\n       * Triggers, wheter or not to render the tooltip\n       */\n      withTooltip?: boolean;\n\n      /**\n       * A tooltipProps attribute used to conditionally render the tooltip around root element\n       */\n      tooltipProps?: CommonProps &\n        WithEnhancedContent &\n        Omit<TooltipInternalProps, 'children'>;\n    }\n  | {\n      withTooltip?: false;\n      tooltipProps?: never;\n    };\n\ninterface IconButtonInternalProps\n  extends Omit<\n    ButtonInternalProps,\n    'startIcon' | 'endIcon' | 'children' | 'size'\n  > {\n  /**\n   * Expects any of the icon components\n   */\n  icon: React.ReactElement;\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label': string;\n  /**\n   * @deprecated Use <Button /> component instead\n   */\n  children?: ButtonInternalProps['children'];\n  /**\n   * Determines size variation of IconButton component\n   * Note: 'large' is deprecated\n   * */\n  size?: ButtonInternalProps['size'];\n}\n\nconst ICON_BUTTON_DEFAULT_TAG = 'button';\n\ntype ExtendedIconButtonProps = IconButtonInternalProps & WithTooltipOrNot;\n\nexport type IconButtonProps<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<ExtendedIconButtonProps, E, 'disabled'>;\n\nfunction _IconButton<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n>(props: IconButtonProps<E>, ref: React.Ref<any>) {\n  const {\n    testId = 'cf-ui-icon-button',\n    variant = 'transparent',\n    icon,\n    className,\n    size = 'medium',\n    withTooltip = false,\n    tooltipProps,\n    'aria-label': ariaLabel,\n    ...otherProps\n  } = props;\n\n  const density = useDensity();\n\n  const styles = getStyles({ size, density });\n\n  const iconButtton = (\n    <Button\n      testId={testId}\n      ref={ref}\n      variant={variant}\n      className={cx(styles.iconButton, className)}\n      size={size}\n      startIcon={icon}\n      aria-label={ariaLabel}\n      {...otherProps}\n    />\n  );\n\n  if (withTooltip) {\n    const {\n      showDelay = 600,\n      content = ariaLabel,\n      ...otherTooltipProps\n    } = tooltipProps || {};\n\n    return (\n      <Tooltip content={content} showDelay={showDelay} {...otherTooltipProps}>\n        {iconButtton}\n      </Tooltip>\n    );\n  }\n\n  return iconButtton;\n}\n\n_IconButton.displayName = 'IconButton';\n\nexport const IconButton: PolymorphicComponent<\n  ExpandProps<ExtendedIconButtonProps>,\n  typeof ICON_BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_IconButton);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type Density } from '@contentful/f36-utils';\nimport { ButtonSize } from '../types';\n\nfunction sizeToStyles(size: ButtonSize, density: Density) {\n  const isHighDensity = density === 'high';\n\n  switch (size) {\n    case 'small': {\n      return {\n        padding: isHighDensity ? `${tokens.spacing2Xs}` : tokens.spacing2Xs,\n        minHeight: isHighDensity ? tokens.spacingL : tokens.spacingXl,\n        minWidth: isHighDensity ? tokens.spacingL : tokens.spacingXl,\n      };\n    }\n    case 'medium': {\n      return {\n        padding: tokens.spacingXs,\n        minHeight: isHighDensity ? tokens.spacingXl : '40px',\n        minWidth: isHighDensity ? tokens.spacingXl : '40px',\n      };\n    }\n    default: {\n      return {};\n    }\n  }\n}\n\nexport function getStyles({\n  size,\n  density,\n}: {\n  size: ButtonSize;\n  density: Density;\n}) {\n  return {\n    iconButton: css({\n      ...sizeToStyles(size, density),\n    }),\n  };\n}\n"],"mappings":";AIqMgG,OAAAA,CAAA,aACvE;AAA2D,SAAAC,KAAA,EAAAC,GAAA,EAAAC,IACtD,8BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}