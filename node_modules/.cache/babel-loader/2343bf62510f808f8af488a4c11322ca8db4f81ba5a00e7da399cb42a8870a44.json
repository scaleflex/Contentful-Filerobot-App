{"ast":null,"code":"import l from 'react';\nimport { cx, css } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nimport i from '@contentful/f36-tokens';\nimport 'react-dom';\nimport { ClockIcon } from '@contentful/f36-icons';\nvar ee = Object.defineProperty,\n  te = Object.defineProperties;\nvar re = Object.getOwnPropertyDescriptors;\nvar x = Object.getOwnPropertySymbols;\nvar R = Object.prototype.hasOwnProperty,\n  M = Object.prototype.propertyIsEnumerable;\nvar k = (e, r, t) => r in e ? ee(e, r, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[r] = t,\n  g = (e, r) => {\n    for (var t in r || (r = {})) R.call(r, t) && k(e, t, r[t]);\n    if (x) for (var t of x(r)) M.call(r, t) && k(e, t, r[t]);\n    return e;\n  },\n  b = (e, r) => te(e, re(r));\nvar H = (e, r) => {\n  var t = {};\n  for (var a in e) R.call(e, a) && r.indexOf(a) < 0 && (t[a] = e[a]);\n  if (e != null && x) for (var a of x(e)) r.indexOf(a) < 0 && M.call(e, a) && (t[a] = e[a]);\n  return t;\n};\nvar D = l.createContext(\"low\"),\n  h = () => l.useContext(D);\nD.Provider;\nvar ie = Object.defineProperty,\n  oe = Object.defineProperties,\n  se = Object.getOwnPropertyDescriptors,\n  I = Object.getOwnPropertySymbols,\n  $ = Object.prototype.hasOwnProperty,\n  j = Object.prototype.propertyIsEnumerable,\n  L = (e, r, t) => r in e ? ie(e, r, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[r] = t,\n  f = (e, r) => {\n    for (var t in r || (r = {})) $.call(r, t) && L(e, t, r[t]);\n    if (I) for (var t of I(r)) j.call(r, t) && L(e, t, r[t]);\n    return e;\n  },\n  m = (e, r) => oe(e, se(r)),\n  u = (e, r) => {\n    var t = {};\n    for (var a in e) $.call(e, a) && r.indexOf(a) < 0 && (t[a] = e[a]);\n    if (e != null && I) for (var a of I(e)) r.indexOf(a) < 0 && j.call(e, a) && (t[a] = e[a]);\n    return t;\n  },\n  le = \"span\";\nfunction de() {\n  return css({\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\",\n    maxWidth: \"100%\"\n  });\n}\nfunction ce() {\n  return css({\n    wordBreak: \"break-word\"\n  });\n}\nfunction V(e, r) {\n  var t = e,\n    {\n      fontSize: a = \"fontSizeM\",\n      fontStack: n = \"fontStackPrimary\",\n      fontWeight: s = \"fontWeightNormal\",\n      fontColor: o = \"gray800\",\n      lineHeight: d = \"lineHeightM\",\n      letterSpacing: c = \"letterSpacingDefault\",\n      children: w,\n      isTruncated: T,\n      isWordBreak: N,\n      as: S,\n      className: v,\n      margin: B = \"none\"\n    } = t,\n    _ = u(t, [\"fontSize\", \"fontStack\", \"fontWeight\", \"fontColor\", \"lineHeight\", \"letterSpacing\", \"children\", \"isTruncated\", \"isWordBreak\", \"as\", \"className\", \"margin\"]);\n  let Q = S || le;\n  return l.createElement(Box, m(f({}, _), {\n    as: Q,\n    className: cx(css({\n      padding: 0,\n      fontFamily: i[n],\n      fontWeight: i[s],\n      color: i[o],\n      fontSize: i[a],\n      lineHeight: i[d],\n      letterSpacing: i[c]\n    }), T ? de() : null, N ? ce() : null, v),\n    margin: B,\n    ref: r\n  }), w);\n}\nV.displayName = \"Text\";\nvar y = l.forwardRef(V),\n  ge = \"span\";\nfunction A(e, r) {\n  var t = e,\n    {\n      children: a,\n      fontWeight: n = \"fontWeightNormal\",\n      testId: s = \"cf-ui-caption\"\n    } = t,\n    o = u(t, [\"children\", \"fontWeight\", \"testId\"]);\n  let d = h();\n  return l.createElement(y, m(f({\n    as: ge,\n    testId: s,\n    fontSize: d === \"high\" ? \"fontSizeSHigh\" : \"fontSizeS\",\n    lineHeight: d === \"high\" ? \"lineHeightSHigh\" : \"lineHeightS\",\n    fontColor: \"gray900\",\n    fontWeight: n\n  }, o), {\n    ref: r\n  }), a);\n}\nA.displayName = \"Caption\";\nvar F = l.forwardRef(A),\n  pe = \"h1\";\nfunction G(e, r) {\n  var t = e,\n    {\n      children: a,\n      testId: n = \"cf-ui-heading\"\n    } = t,\n    s = u(t, [\"children\", \"testId\"]);\n  let o = h();\n  return l.createElement(y, m(f({\n    as: pe,\n    testId: n,\n    marginBottom: \"spacingM\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\",\n    fontSize: o === \"high\" ? \"fontSizeXlHigh\" : \"fontSizeXl\",\n    lineHeight: o === \"high\" ? \"lineHeightXlHigh\" : \"lineHeightXl\"\n  }, s), {\n    ref: r\n  }), a);\n}\nG.displayName = \"Heading\";\nl.forwardRef(G);\nvar fe = \"h3\";\nfunction U(e, r) {\n  var t = e,\n    {\n      children: a,\n      testId: n = \"cf-ui-subheading\"\n    } = t,\n    s = u(t, [\"children\", \"testId\"]);\n  let o = h();\n  return l.createElement(y, m(f({\n    as: fe,\n    testId: n,\n    marginBottom: \"spacingM\",\n    fontSize: o === \"high\" ? \"fontSizeLHigh\" : \"fontSizeL\",\n    lineHeight: o === \"high\" ? \"lineHeightLHigh\" : \"lineHeightL\",\n    fontWeight: \"fontWeightDemiBold\",\n    fontColor: \"gray900\"\n  }, s), {\n    ref: r\n  }), a);\n}\nU.displayName = \"Subheading\";\nl.forwardRef(U);\nvar ue = \"h2\";\nfunction K(e, r) {\n  var t = e,\n    {\n      children: a,\n      size: n = \"default\",\n      testId: s = \"cf-ui-display-text\"\n    } = t,\n    o = u(t, [\"children\", \"size\", \"testId\"]);\n  let d = \"fontSize2Xl\",\n    c = \"lineHeight2Xl\";\n  return n === \"large\" && (d = \"fontSize3Xl\", c = \"lineHeight3Xl\"), l.createElement(y, m(f({\n    as: ue,\n    testId: s,\n    marginBottom: n === \"default\" ? \"spacingL\" : \"spacingXl\",\n    fontSize: d,\n    lineHeight: c,\n    fontColor: \"gray900\",\n    fontWeight: \"fontWeightDemiBold\"\n  }, o), {\n    ref: r\n  }), a);\n}\nK.displayName = \"DisplayText\";\nl.forwardRef(K);\nvar he = \"h2\";\nfunction Y(e, r) {\n  var t = e,\n    {\n      children: a,\n      className: n,\n      testId: s = \"cf-ui-section-heading\"\n    } = t,\n    o = u(t, [\"children\", \"className\", \"testId\"]);\n  let d = h();\n  return l.createElement(y, m(f({\n    as: he,\n    testId: s,\n    marginBottom: \"spacingL\",\n    fontWeight: \"fontWeightMedium\",\n    fontColor: \"gray600\",\n    fontSize: d === \"high\" ? \"fontSizeSHigh\" : \"fontSizeS\",\n    lineHeight: d === \"high\" ? \"lineHeightSHigh\" : \"lineHeightS\",\n    className: cx(css({\n      letterSpacing: i.letterSpacingDefault,\n      textTransform: \"lowercase\",\n      \"&:first-letter\": {\n        textTransform: \"uppercase\"\n      }\n    }), n)\n  }, o), {\n    ref: r\n  }), a);\n}\nY.displayName = \"SectionHeading\";\nl.forwardRef(Y);\nvar ye = l.forwardRef((e, r) => {\n  var t = e,\n    {\n      children: a,\n      testId: n = \"cf-ui-paragraph\"\n    } = t,\n    s = u(t, [\"children\", \"testId\"]);\n  let o = h();\n  return l.createElement(y, m(f({\n    as: \"p\",\n    testId: n,\n    fontSize: o === \"high\" ? \"fontSizeMHigh\" : \"fontSizeM\",\n    lineHeight: o === \"high\" ? \"lineHeightMHigh\" : \"lineHeightM\",\n    marginBottom: \"spacingM\"\n  }, s), {\n    ref: r\n  }), a);\n});\nye.displayName = \"Paragraph\";\nvar Se = ({\n    variant: e\n  }) => {\n    switch (e) {\n      case \"positive\":\n        return {\n          color: i.green600,\n          backgroundColor: i.green200\n        };\n      case \"primary\":\n        return {\n          color: i.blue600,\n          backgroundColor: i.blue200\n        };\n      case \"negative\":\n        return {\n          color: i.red600,\n          backgroundColor: i.red200\n        };\n      case \"warning\":\n        return {\n          color: i.orange600,\n          backgroundColor: i.orange200\n        };\n      case \"secondary\":\n        return {\n          color: i.gray700,\n          backgroundColor: i.gray200\n        };\n      case \"primary-filled\":\n        return {\n          color: i.colorWhite,\n          backgroundColor: i.blue600\n        };\n      case \"featured\":\n        return {\n          color: i.purple600,\n          backgroundColor: i.purple200\n        };\n      default:\n        return {};\n    }\n  },\n  ve = ({\n    size: e\n  }) => {\n    switch (e) {\n      case \"small\":\n        return {\n          padding: `0 ${i.spacing2Xs}`,\n          lineHeight: i.lineHeightS,\n          maxHeight: i.lineHeightS\n        };\n      default:\n        return {\n          padding: `0 ${i.spacingXs}`,\n          lineHeight: i.lineHeightM,\n          maxHeight: i.lineHeightM\n        };\n    }\n  },\n  q = () => ({\n    badge: ({\n      variant: e,\n      size: r\n    }) => css(g(g({\n      columnGap: i.spacing2Xs,\n      alignItems: \"center\",\n      borderRadius: i.borderRadiusSmall,\n      overflow: \"hidden\",\n      verticalAlign: \"middle\"\n    }, Se({\n      variant: e\n    })), ve({\n      size: r\n    }))),\n    badgeIcon: css({\n      flexShrink: 0\n    }),\n    badgeIconCustomTiny: css({\n      width: \"0.875rem\",\n      height: \"0.875rem\"\n    }),\n    badgeText: ({\n      textTransform: e\n    }) => css([{\n      color: \"currentcolor\",\n      lineHeight: \"inherit\"\n    }, e !== \"none\" && {\n      textTransform: \"lowercase\",\n      \"&::first-letter\": {\n        textTransform: \"uppercase\"\n      }\n    }])\n  });\nvar C = l.forwardRef((e, r) => {\n  let t = q(),\n    v = e,\n    {\n      children: a,\n      variant: n = \"primary\",\n      size: s = \"default\",\n      testId: o = \"cf-ui-badge\",\n      startIcon: d,\n      endIcon: c,\n      className: w,\n      textTransform: T = void 0\n    } = v,\n    N = H(v, [\"children\", \"variant\", \"size\", \"testId\", \"startIcon\", \"endIcon\", \"className\", \"textTransform\"]),\n    S = B => l.cloneElement(B, {\n      size: \"tiny\",\n      className: cx(t.badgeIcon, B.props.className, {\n        [t.badgeIconCustomTiny]: s === \"small\"\n      }),\n      variant: n === \"primary-filled\" ? \"white\" : n\n    });\n  return l.createElement(Box, b(g({\n    as: \"div\",\n    testId: o,\n    display: \"inline-flex\",\n    className: cx(t.badge({\n      variant: n,\n      size: s\n    }), w)\n  }, N), {\n    ref: r\n  }), d && S(d), l.createElement(F, {\n    fontWeight: \"fontWeightMedium\",\n    isTruncated: !0,\n    className: t.badgeText({\n      textTransform: T\n    })\n  }, a), c && S(c));\n});\nC.displayName = \"Badge\";\nvar be = {\n  published: \"positive\",\n  draft: \"warning\",\n  archived: \"secondary\",\n  changed: \"primary\",\n  deleted: \"negative\",\n  new: \"primary-filled\"\n};\nfunction Z(e, r) {\n  let c = e,\n    {\n      entityStatus: t,\n      isScheduled: a = void 0,\n      size: n = \"default\"\n    } = c,\n    s = H(c, [\"entityStatus\", \"isScheduled\", \"size\"]),\n    o = a && n === \"default\",\n    d = be[t];\n  return l.createElement(C, b(g(g({}, s), o ? {\n    size: n,\n    startIcon: l.createElement(ClockIcon, {\n      testId: \"schedule-icon\"\n    })\n  } : {\n    size: n\n  }), {\n    variant: d,\n    ref: r\n  }), t);\n}\nZ.displayName = \"EntityStatusBadge\";\nvar He = l.forwardRef(Z);\nexport { C as Badge, He as EntityStatusBadge };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-badge/src/Badge/Badge.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/utils/src/Portal/Portal.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-badge/src/Badge/Badge.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-badge/src/EntityStatusBadge/EntityStatusBadge.tsx"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Caption } from '@contentful/f36-typography';\nimport type * as CSS from 'csstype';\n\nimport type { BadgeSize, BadgeVariant } from '../types';\nimport { getBadgeStyles } from './Badge.styles';\n\nexport type BadgeInternalProps = CommonProps & {\n  /**\n   * Determines the variation of the component\n   * @default primary\n   */\n  variant?: BadgeVariant;\n  children: React.ReactNode;\n  /**\n   * Sets the size of the component\n   * @default default\n   */\n  size?: BadgeSize;\n  /**\n   * Expects any of the icon components. Renders the icon aligned to the start\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * Expects any of the icon components. Renders the icon aligned to the end\n   */\n  endIcon?: React.ReactNode;\n  /**\n   * By default the Badge uses CSS to capitalize only the first letter of the\n   * badge text. This CSS is hit by a bug in Firefox that results in the badge\n   * being rendered slightly too wide. To avoid the bug, set this property to\n   * `none` to disable the text transformation. Please be sure the initial\n   * letter of the badge text is already capitalized!\n   */\n  textTransform?: Extract<CSS.Property.TextTransform, 'none'> | undefined;\n};\n\nexport type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;\n\nexport const Badge = React.forwardRef<HTMLDivElement, ExpandProps<BadgeProps>>(\n  (props, ref) => {\n    const styles = getBadgeStyles();\n    const {\n      children,\n      variant = 'primary',\n      size = 'default',\n      testId = 'cf-ui-badge',\n      startIcon,\n      endIcon,\n      className,\n      textTransform = undefined,\n      ...otherProps\n    } = props;\n\n    const iconContent = (icon) =>\n      React.cloneElement(icon, {\n        size: 'tiny',\n        className: cx(styles.badgeIcon, icon.props.className, {\n          [styles.badgeIconCustomTiny]: size === 'small',\n        }),\n        variant: variant === 'primary-filled' ? 'white' : variant,\n      });\n\n    return (\n      <Box\n        as=\"div\"\n        testId={testId}\n        display=\"inline-flex\"\n        className={cx(styles.badge({ variant, size }), className)}\n        {...otherProps}\n        ref={ref}\n      >\n        {startIcon && iconContent(startIcon)}\n        <Caption\n          fontWeight=\"fontWeightMedium\"\n          isTruncated\n          className={styles.badgeText({ textTransform })}\n        >\n          {children}\n        </Caption>\n        {endIcon && iconContent(endIcon)}\n      </Box>\n    );\n  },\n);\n\nBadge.displayName = 'Badge';\n","import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\n\nexport interface PortalProps {\n  children: React.ReactElement;\n  /**\n   * Container element for Portal\n   */\n  container?: Document | HTMLElement;\n}\n\nexport function Portal({\n  children,\n  container: containerElement,\n}: PortalProps): React.ReactPortal | null {\n  const container = useRef<Document | HTMLElement | undefined>(\n    containerElement,\n  );\n  const portal = useRef<HTMLDivElement>(document.createElement('div'));\n\n  useEffect(() => {\n    if (!container.current) {\n      container.current = document.body;\n    }\n\n    const portalContainer = portal.current;\n    portalContainer.setAttribute('data-cf-ui-portal', '');\n    container.current.appendChild(portalContainer);\n\n    return () => {\n      if (container.current) {\n        container.current.removeChild(portalContainer);\n      }\n    };\n  }, []);\n\n  return portal.current ? createPortal(children, portal.current) : null;\n}\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport type { BadgeVariant, BadgeSize, BadgeStylesProps } from '../types';\nimport type { CSSObject } from '@emotion/serialize';\nimport type { BadgeInternalProps } from './Badge';\n\nconst variantToStyles = ({ variant }: { variant: BadgeVariant }): CSSObject => {\n  switch (variant) {\n    case 'positive':\n      return {\n        color: tokens.green600,\n        backgroundColor: tokens.green200,\n      };\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        backgroundColor: tokens.blue200,\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.red200,\n      };\n    case 'warning':\n      return {\n        color: tokens.orange600,\n        backgroundColor: tokens.orange200,\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray700,\n        backgroundColor: tokens.gray200,\n      };\n    case 'primary-filled':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue600,\n      };\n    case 'featured':\n      return {\n        color: tokens.purple600,\n        backgroundColor: tokens.purple200,\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = ({ size }: { size: BadgeSize }): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        padding: `0 ${tokens.spacing2Xs}`,\n        lineHeight: tokens.lineHeightS,\n        maxHeight: tokens.lineHeightS,\n      };\n    default:\n      return {\n        padding: `0 ${tokens.spacingXs}`,\n        lineHeight: tokens.lineHeightM,\n        maxHeight: tokens.lineHeightM,\n      };\n  }\n};\n\nexport const getBadgeStyles = () => ({\n  badge: ({ variant, size }: BadgeStylesProps) =>\n    css({\n      columnGap: tokens.spacing2Xs,\n      alignItems: 'center',\n      borderRadius: tokens.borderRadiusSmall,\n      overflow: 'hidden',\n      verticalAlign: 'middle',\n      ...variantToStyles({ variant }),\n      ...sizeToStyles({ size }),\n    }),\n  badgeIcon: css({\n    flexShrink: 0,\n  }),\n  badgeIconCustomTiny: css({\n    width: '0.875rem',\n    height: '0.875rem',\n  }),\n  badgeText: ({\n    textTransform,\n  }: {\n    textTransform: BadgeInternalProps['textTransform'];\n  }) =>\n    css([\n      {\n        color: 'currentcolor',\n        lineHeight: 'inherit',\n      },\n      textTransform !== 'none' && {\n        textTransform: 'lowercase',\n        '&::first-letter': {\n          textTransform: 'uppercase',\n        },\n      },\n    ]),\n});\n","import React from 'react';\nimport type {\n  EntityStatus,\n  ExpandProps,\n  PickUnion,\n} from '@contentful/f36-core';\nimport { ClockIcon } from '@contentful/f36-icons';\n\nimport { Badge, type BadgeProps } from '../Badge/Badge';\nimport type { BadgeSize, BadgeVariant } from '../types';\n\nconst statusMap: { [key in EntityStatus]: BadgeVariant } = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'secondary',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled',\n};\n\ntype BadgeSizeWithIsScheduledProp =\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size?: Exclude<BadgeSize, 'small'>;\n      /**\n       * Indicates that the entity that the badge is related to has a scheduled action\n       */\n      isScheduled?: boolean;\n    }\n  | {\n      /**\n       * Sets the size of the component\n       * @default default\n       */\n      size: PickUnion<BadgeSize, 'small'>;\n      // We use discriminative union typing, so in case the size is set as small we don't allow isScheduled\n      isScheduled?: never;\n    };\n\nexport type EntityStatusBadgeProps = Omit<\n  BadgeProps,\n  'children' | 'endIcon' | 'size' | 'startIcon' | 'variant'\n> &\n  BadgeSizeWithIsScheduledProp & {\n    entityStatus: EntityStatus;\n  };\n\nfunction EntityStatusBadge(\n  props: EntityStatusBadgeProps,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    entityStatus,\n    isScheduled = undefined,\n    size = 'default',\n    ...otherProps\n  } = props;\n  const withClockIcon = isScheduled && size === 'default';\n  const variant = statusMap[entityStatus];\n\n  return (\n    <Badge\n      {...otherProps}\n      {...(withClockIcon\n        ? { size, startIcon: <ClockIcon testId=\"schedule-icon\" /> }\n        : { size })}\n      variant={variant}\n      ref={ref}\n    >\n      {entityStatus}\n    </Badge>\n  );\n}\n\nEntityStatusBadge.displayName = 'EntityStatusBadge';\n\nconst _EntityStatusBadge = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<EntityStatusBadgeProps>\n>(EntityStatusBadge);\nexport { _EntityStatusBadge as EntityStatusBadge };\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}