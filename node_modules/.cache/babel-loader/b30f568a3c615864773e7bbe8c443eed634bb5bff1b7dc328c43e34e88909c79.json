{"ast":null,"code":"import n, { useState, useCallback } from 'react';\nimport { cx, css } from 'emotion';\nimport { useCombobox } from 'downshift';\nimport { mergeRefs } from '@contentful/f36-core';\nimport { IconButton } from '@contentful/f36-button';\nimport { TextInput } from '@contentful/f36-forms';\nimport { ChevronDownIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Skeleton } from '@contentful/f36-skeleton';\nimport { Popover } from '@contentful/f36-popover';\nimport { Subheading, SectionHeading, Text } from '@contentful/f36-typography';\nimport { getStringMatch } from '@contentful/f36-utils';\nimport a from '@contentful/f36-tokens';\nvar Ne = Object.defineProperty,\n  Oe = Object.defineProperties;\nvar Ve = Object.getOwnPropertyDescriptors;\nvar E = Object.getOwnPropertySymbols;\nvar Q = Object.prototype.hasOwnProperty,\n  Y = Object.prototype.propertyIsEnumerable;\nvar J = (t, o, i) => o in t ? Ne(t, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: i\n  }) : t[o] = i,\n  u = (t, o) => {\n    for (var i in o || (o = {})) Q.call(o, i) && J(t, i, o[i]);\n    if (E) for (var i of E(o)) Y.call(o, i) && J(t, i, o[i]);\n    return t;\n  },\n  c = (t, o) => Oe(t, Ve(o));\nvar Z = (t, o) => {\n  var i = {};\n  for (var s in t) Q.call(t, s) && o.indexOf(s) < 0 && (i[s] = t[s]);\n  if (t != null && E) for (var s of E(t)) o.indexOf(s) < 0 && Y.call(t, s) && (i[s] = t[s]);\n  return i;\n};\nvar H = t => ({\n  autocomplete: css({\n    position: \"relative\",\n    width: \"100%\"\n  }),\n  combobox: css({\n    position: \"relative\"\n  }),\n  inputField: css({\n    paddingRight: a.spacingXl,\n    textOverflow: \"ellipsis\",\n    whiteSpace: \"nowrap\"\n  }),\n  toggleButton: css({\n    position: \"absolute\",\n    top: \"1px\",\n    right: \"1px\",\n    zIndex: 1,\n    padding: a.spacing2Xs,\n    minHeight: \"calc(100% - 2px)\"\n  }),\n  content: css({\n    overflow: \"auto\",\n    maxHeight: `${t}px`\n  }),\n  list: css({\n    listStyle: \"none\",\n    padding: `${a.spacingXs} 0`,\n    margin: 0\n  }),\n  groupTitle: css({\n    padding: `${a.spacingXs} ${a.spacingM}`,\n    lineHeight: a.lineHeightM\n  }),\n  noMatchesTitle: css({\n    color: a.gray500,\n    margin: `${a.spacingM} 0 ${a.spacingM} 0`\n  }),\n  item: css({\n    display: \"block\",\n    padding: `${a.spacingXs} ${a.spacingM}`,\n    wordBreak: \"break-word\",\n    whiteSpace: \"break-spaces\",\n    cursor: \"pointer\",\n    hyphens: \"auto\",\n    \"&:focus, &:hover\": {\n      backgroundColor: a.gray100\n    },\n    \"&:active\": {\n      backgroundColor: a.gray200\n    }\n  }),\n  disabled: css({\n    opacity: .5,\n    pointerEvents: \"none\"\n  }),\n  highlighted: css({\n    backgroundColor: a.gray100\n  }),\n  hidden: css({\n    display: \"none\"\n  })\n});\nvar k = t => {\n  let {\n      items: o,\n      elementStartIndex: i,\n      highlightedIndex: s,\n      getItemProps: g,\n      renderItem: x,\n      inputValue: C,\n      listMaxHeight: N = 180\n    } = t,\n    I = H(N);\n  return n.createElement(\"ul\", {\n    className: I.list,\n    \"data-test-id\": \"cf-autocomplete-list\"\n  }, o.map((h, O) => {\n    let f = i + O,\n      p = g({\n        item: h,\n        index: f\n      });\n    return n.createElement(Text, c(u({}, p), {\n      as: \"li\",\n      key: f,\n      className: cx([I.item, s === f && I.highlighted]),\n      \"data-test-id\": `cf-autocomplete-list-item-${f}`\n    }), x ? x(h, C) : typeof h == \"string\" ? n.createElement(ee, {\n      item: h,\n      inputValue: C\n    }) : h);\n  }));\n};\nk.displayName = \"AutocompleteItems\";\nfunction ee({\n  item: t,\n  inputValue: o\n}) {\n  let {\n    before: i,\n    match: s,\n    after: g\n  } = getStringMatch(t, o);\n  return n.createElement(n.Fragment, null, i, n.createElement(\"b\", null, s), g);\n}\nee.displayName = \"HighlightedItem\";\nfunction qe(t, o) {\n  let {\n      isOpen: i,\n      onClose: s,\n      onOpen: g,\n      id: x,\n      className: C,\n      clearAfterSelect: N = !1,\n      textOnAfterSelect: I = N ? \"clear\" : \"replace\",\n      closeAfterSelect: h = !0,\n      defaultValue: O = \"\",\n      selectedItem: f,\n      items: p,\n      inputValue: X,\n      onInputValueChange: P,\n      onSelectItem: ne,\n      onFocus: V,\n      onBlur: G,\n      renderItem: U,\n      icon: ie = n.createElement(ChevronDownIcon, {\n        variant: \"muted\"\n      }),\n      itemToString: se = e => e,\n      isInvalid: re,\n      isDisabled: W,\n      isRequired: pe,\n      isReadOnly: ae,\n      showEmptyList: le,\n      noMatchesMessage: me = \"No matches found\",\n      placeholder: ue = \"Search\",\n      inputRef: ce,\n      toggleRef: de,\n      listRef: ge,\n      listWidth: he = \"auto\",\n      listMaxHeight: Ie = 180,\n      isGrouped: M = !1,\n      isLoading: S = !1,\n      usePortal: fe = !1,\n      testId: ye = \"cf-autocomplete\",\n      popoverTestId: Te = \"cf-autocomplete-container\",\n      showClearButton: R\n    } = t,\n    m = H(Ie),\n    [be, ve] = useState(O),\n    b = typeof X == \"undefined\" ? be : X,\n    v = useCallback(e => {\n      ve(e), P == null || P(e);\n    }, [P]),\n    xe = useCallback(e => {\n      let r = e.target.value;\n      v(r);\n    }, [v]),\n    Ce = L(M) ? p.reduce((e, r) => [...e, ...r.options], []) : p,\n    Pe = L(M) ? p.every(e => e.options.length === 0) : p.length === 0,\n    {\n      getComboboxProps: Me,\n      getInputProps: Se,\n      getItemProps: q,\n      getMenuProps: we,\n      getToggleButtonProps: Ae,\n      highlightedIndex: K,\n      isOpen: Ee,\n      openMenu: He,\n      toggleMenu: ke\n    } = useCombobox({\n      isOpen: i,\n      onIsOpenChange: ({\n        isOpen: e\n      }) => {\n        e ? g == null || g() : s == null || s();\n      },\n      stateReducer: (e, {\n        type: r,\n        changes: y\n      }) => {\n        switch (r) {\n          case useCombobox.stateChangeTypes.InputBlur:\n            return c(u({}, y), {\n              inputValue: e.inputValue\n            });\n          case useCombobox.stateChangeTypes.InputKeyDownEnter:\n          case useCombobox.stateChangeTypes.ItemClick:\n            return h ? y : c(u({}, y), {\n              isOpen: e.isOpen\n            });\n          default:\n            return y;\n        }\n      },\n      items: Ce,\n      selectedItem: f,\n      inputValue: b,\n      itemToString: se,\n      onInputValueChange: ({\n        type: e,\n        inputValue: r\n      }) => {\n        switch (e) {\n          case useCombobox.stateChangeTypes.InputChange:\n            return;\n          case useCombobox.stateChangeTypes.ItemClick:\n          case useCombobox.stateChangeTypes.InputKeyDownEnter:\n            {\n              if (I === \"clear\") {\n                v(\"\");\n                return;\n              }\n              if (I === \"preserve\") return;\n            }\n        }\n        v(r);\n      },\n      onStateChange: ({\n        type: e,\n        selectedItem: r\n      }) => {\n        switch (e) {\n          case useCombobox.stateChangeTypes.InputKeyDownEnter:\n          case useCombobox.stateChangeTypes.ItemClick:\n            r && ne(r);\n            break;\n        }\n      }\n    }),\n    j = Se(),\n    w = Z(j, [\"aria-labelledby\", \"id\"]),\n    Le = Me(),\n    z = Ae(),\n    A = we(),\n    B = 0,\n    D = R != null ? R : b;\n  return n.createElement(\"div\", {\n    \"data-test-id\": ye,\n    className: cx(m.autocomplete, C),\n    ref: o\n  }, n.createElement(Popover, {\n    usePortal: fe,\n    isOpen: Ee,\n    isFullWidth: he === \"full\",\n    renderOnlyWhenOpen: !1,\n    autoFocus: !1,\n    id: A.id\n  }, n.createElement(Popover.Trigger, null, n.createElement(\"div\", c(u({}, Le), {\n    className: m.combobox\n  }), n.createElement(TextInput, c(u({\n    className: m.inputField\n  }, w), {\n    onFocus: e => {\n      V == null || V(e), He();\n    },\n    onBlur: e => {\n      G == null || G(e), w.onBlur(e);\n    },\n    id: x,\n    isInvalid: re,\n    isDisabled: W,\n    isRequired: pe,\n    isReadOnly: ae,\n    ref: mergeRefs(w.ref, ce),\n    testId: \"cf-autocomplete-input\",\n    placeholder: ue,\n    onChange: e => {\n      w.onChange(e), xe(e);\n    }\n  })), n.createElement(IconButton, c(u({}, z), {\n    ref: mergeRefs(z.ref, de),\n    \"aria-label\": D ? \"Clear\" : \"Show list\",\n    className: m.toggleButton,\n    variant: \"transparent\",\n    icon: D ? n.createElement(CloseIcon, {\n      variant: \"muted\"\n    }) : ie,\n    onClick: () => {\n      D ? v(\"\") : ke();\n    },\n    isDisabled: W,\n    size: \"small\"\n  })))), p.length > 0 || b.length > 0 || le ? n.createElement(Popover.Content, c(u({}, A), {\n    ref: mergeRefs(A.ref, ge),\n    className: m.content,\n    testId: Te\n  }), S && [...Array(3)].map((e, r) => n.createElement(\"div\", {\n    key: r,\n    className: cx(m.item, m.disabled)\n  }, n.createElement(Ke, null))), !S && Pe && n.createElement(\"div\", {\n    className: m.item\n  }, n.createElement(Subheading, {\n    className: m.noMatchesTitle\n  }, me)), !S && L(M) && p.map((e, r) => {\n    if (e.options.length < 1) return;\n    let y = n.createElement(\"div\", {\n      key: r\n    }, n.createElement(SectionHeading, {\n      key: r,\n      \"data-test-id\": \"cf-autocomplete-grouptitle\",\n      marginBottom: \"none\",\n      className: m.groupTitle\n    }, e.groupTitle), n.createElement(k, {\n      items: e.options,\n      highlightedIndex: K,\n      getItemProps: q,\n      renderItem: U,\n      inputValue: b,\n      elementStartIndex: B\n    }));\n    return B += e.options.length, y;\n  }), !S && !L(M) && p.length > 0 && n.createElement(k, {\n    items: p,\n    elementStartIndex: B,\n    highlightedIndex: K,\n    getItemProps: q,\n    renderItem: U,\n    inputValue: b\n  })) : n.createElement(\"div\", c(u({}, A), {\n    className: cx(m.hidden)\n  }))));\n}\nvar Ke = () => n.createElement(Skeleton.Container, {\n  svgHeight: 16\n}, n.createElement(Skeleton.BodyText, {\n  numberOfLines: 1\n}));\nfunction L(t, o) {\n  return t;\n}\nvar ze = n.forwardRef(qe);\nexport { ze as Autocomplete };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-autocomplete/src/Autocomplete.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-autocomplete/src/AutocompleteItems.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-autocomplete/src/Autocomplete.styles.ts"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { cx } from 'emotion';\nimport { useCombobox } from 'downshift';\n\nimport {\n  mergeRefs,\n  type CommonProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { IconButton } from '@contentful/f36-button';\nimport { TextInput, type TextInputProps } from '@contentful/f36-forms';\nimport { CloseIcon, ChevronDownIcon } from '@contentful/f36-icons';\nimport { Skeleton } from '@contentful/f36-skeleton';\nimport { Popover } from '@contentful/f36-popover';\nimport { Subheading, SectionHeading } from '@contentful/f36-typography';\n\nimport { AutocompleteItems } from './AutocompleteItems';\nimport { getAutocompleteStyles } from './Autocomplete.styles';\n\nexport interface GenericGroupType<ItemType> {\n  groupTitle: string;\n  options: ItemType[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface AutocompleteProps<ItemType>\n  extends CommonProps,\n    Pick<\n      TextInputProps,\n      | 'isDisabled'\n      | 'isInvalid'\n      | 'isReadOnly'\n      | 'isRequired'\n      | 'id'\n      | 'defaultValue'\n    > {\n  /**\n   * It’s an array of data to be used as \"options\" by the autocomplete component.\n   * This can either be a plain list of items or a list of groups of items.\n   */\n  items: ItemType[] | GenericGroupType<ItemType>[];\n\n  /**\n   * Boolean to control whether the Autocomplete menu is open\n   */\n  isOpen?: boolean;\n\n  /**\n   * Callback fired when the Autocomplete menu opens\n   */\n  onOpen?: () => void;\n\n  /**\n   * Callback fired when the Autocomplete menu closes\n   */\n  onClose?: () => void;\n\n  /**\n   * Set a custom icon for the text input\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Tells if the item is a object with groups\n   */\n  isGrouped?: boolean;\n\n  /**\n   * Set the value of the text input\n   */\n  inputValue?: string;\n  /**\n   * Function called whenever the input value changes\n   */\n  onInputValueChange?: (value: string) => void;\n  /**\n   * This is the function that will be called when the user selects one of the \"options\" in the list.\n   * The component will pass the selected \"item\" as an argument to the function..\n   */\n  onSelectItem: (item: ItemType) => void;\n\n  /**\n   * Applying the selectedItem property turns autocomplete into a controlled component.\n   * Can be used to display e.g. previously selected element. If it is an object the itemToString function will apply to it.\n   */\n  selectedItem?: ItemType;\n\n  /**\n   * This is the function that will be called for each \"item\" passed in the `items` prop.\n   * It receives the \"item\" and \"inputValue\" as arguments and returns a ReactNode.\n   * The inputValue is passed in case you want to highlight the match on the render.\n   */\n  renderItem?: (item: ItemType, inputValue: string) => React.ReactNode;\n  /**\n   * When using objects as `items`, we recommend passing a function that tells Downshift how to extract a string\n   * from those objetcs to be used as inputValue\n   */\n  itemToString?: (item: ItemType) => string;\n  /**\n   * Text input behaviour after an item is selected\n   * @default \"replace\"\n   */\n  textOnAfterSelect?: 'clear' | 'preserve' | 'replace';\n  /**\n   * If this is set to `true` the text input will be cleared after an item is selected\n   * @default false\n   * @deprecated Use textOnAfterSelect=\"clear\" instead\n   */\n  clearAfterSelect?: boolean;\n  /**\n   * If this is set to `false` the dropdown menu will stay open after selecting an item\n   * @default true\n   */\n  closeAfterSelect?: boolean;\n  /**\n   * This is the value will be passed to the `placeholder` prop of the input.\n   * @default \"Search\"\n   */\n  placeholder?: string;\n  /**\n   * Defines if the list should be shown even if empty, when input is focused\n   * @default false\n   */\n  showEmptyList?: boolean;\n  /**\n   * A message that will be shown when it is not possible to find any option that matches the input value\n   * @default \"No matches\"\n   */\n  noMatchesMessage?: string;\n  /**\n   * Use this prop to get a ref to the input element of the component\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Use this prop to get a ref to the toggle button of the component\n   */\n  toggleRef?: React.Ref<HTMLButtonElement>;\n  /**\n   * Use this prop to get a ref to the list of items of the component\n   */\n  listRef?: React.Ref<HTMLUListElement>;\n  /**\n   * It sets the width of the list\n   * @default \"auto\"\n   */\n  listWidth?: 'auto' | 'full';\n  /**\n   * It sets the max-height, in pixels, of the list\n   * The default value is the height of 5 single line items\n   * @default 180\n   */\n  listMaxHeight?: number;\n  /**\n   * Sets the list to show its loading state\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * Boolean to control whether or not to render the suggestions box in a React Portal.\n   * Rendering content inside a Portal allows the suggestions box to escape the bounds\n   * of its parent while still being positioned correctly.\n   * Defaults to `false`\n   */\n  usePortal?: boolean;\n\n  /**\n   * A [data-test-id] attribute for the suggestions box used for testing purposes\n   */\n  popoverTestId?: string;\n\n  /**\n   * Function called when the input is focused\n   *\n   * @param event\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  /**\n   * Function called when the input is blurred\n   * @param event\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  /**\n   * Manually control when the button to clear the input value is shown\n   */\n  showClearButton?: boolean;\n}\n\nfunction _Autocomplete<ItemType>(\n  props: AutocompleteProps<ItemType>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    isOpen: isOpenProp,\n    onClose,\n    onOpen,\n    id,\n    className,\n    clearAfterSelect = false,\n    textOnAfterSelect = clearAfterSelect ? 'clear' : 'replace',\n    closeAfterSelect = true,\n    defaultValue = '',\n    selectedItem,\n    items,\n    inputValue: inputValueProp,\n    onInputValueChange,\n    onSelectItem,\n    onFocus,\n    onBlur,\n    renderItem,\n    icon = <ChevronDownIcon variant=\"muted\" />,\n    itemToString = (item: ItemType) => item as unknown as string,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n    showEmptyList,\n    noMatchesMessage = 'No matches found',\n    placeholder = 'Search',\n    inputRef,\n    toggleRef,\n    listRef,\n    listWidth = 'auto',\n    listMaxHeight = 180,\n    isGrouped = false,\n    isLoading = false,\n    usePortal = false,\n    testId = 'cf-autocomplete',\n    popoverTestId = 'cf-autocomplete-container',\n    showClearButton: showClearButtonProp,\n  } = props;\n\n  type GroupType = GenericGroupType<ItemType>;\n\n  const styles = getAutocompleteStyles(listMaxHeight);\n\n  const [_inputValue, setInputValue] = useState(defaultValue);\n  const inputValue =\n    typeof inputValueProp === 'undefined' ? _inputValue : inputValueProp;\n\n  const handleInputValueChange = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      onInputValueChange?.(value);\n    },\n    [onInputValueChange],\n  );\n\n  // Handle manually to avoid a jumping cursor, see https://github.com/downshift-js/downshift/issues/1108#issuecomment-842407759\n  const handleNativeChangeEvent = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const value = event.target.value;\n      handleInputValueChange(value);\n    },\n    [handleInputValueChange],\n  );\n\n  const flattenItems = isUsingGroups(isGrouped, items)\n    ? items.reduce(\n        (acc: ItemType[], group: GroupType) => [...acc, ...group.options],\n        [],\n      )\n    : items;\n\n  const isShowingNoMatches = isUsingGroups(isGrouped, items)\n    ? items.every((group: GroupType) => group.options.length === 0)\n    : items.length === 0;\n\n  const {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    highlightedIndex,\n    isOpen,\n    openMenu,\n    toggleMenu,\n  } = useCombobox({\n    isOpen: isOpenProp,\n    onIsOpenChange: ({ isOpen }) => {\n      if (isOpen) {\n        onOpen?.();\n      } else {\n        onClose?.();\n      }\n    },\n    stateReducer: (state, { type, changes }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputBlur: {\n          // don't change input value on blur\n          return { ...changes, inputValue: state.inputValue };\n        }\n\n        // item is selected by click or keydown\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick: {\n          // prevent the menu from being closed when the user selects an item with a keyboard or mouse\n          if (!closeAfterSelect) {\n            return {\n              ...changes,\n              isOpen: state.isOpen,\n            };\n          }\n\n          return changes;\n        }\n        default:\n          return changes;\n      }\n    },\n    items: flattenItems,\n    selectedItem,\n    inputValue,\n    itemToString,\n    onInputValueChange: ({ type, inputValue }) => {\n      switch (type) {\n        // value is set directly from the TextInput onChange handler\n        case useCombobox.stateChangeTypes.InputChange: {\n          return;\n        }\n\n        // item is selected by click or keydown\n        case useCombobox.stateChangeTypes.ItemClick:\n        case useCombobox.stateChangeTypes.InputKeyDownEnter: {\n          // clear the TextInput value\n          if (textOnAfterSelect === 'clear') {\n            handleInputValueChange('');\n            return;\n          }\n\n          // keep the current TextInput value\n          if (textOnAfterSelect === 'preserve') {\n            return;\n          }\n        }\n      }\n\n      handleInputValueChange(inputValue);\n    },\n    onStateChange: ({ type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            onSelectItem(selectedItem);\n          }\n          break;\n        default:\n          break;\n      }\n    },\n  });\n\n  const {\n    'aria-labelledby': _labelledby,\n    id: _inputId,\n    ...inputProps\n  } = getInputProps();\n  const comboboxProps = getComboboxProps();\n  const toggleProps = getToggleButtonProps();\n  const menuProps = getMenuProps();\n  let elementStartIndex = 0;\n\n  const showClearButton = showClearButtonProp ?? inputValue;\n\n  return (\n    <div\n      data-test-id={testId}\n      className={cx(styles.autocomplete, className)}\n      ref={ref}\n    >\n      <Popover\n        usePortal={usePortal}\n        isOpen={isOpen}\n        isFullWidth={listWidth === 'full'}\n        renderOnlyWhenOpen={false}\n        // This is necessary, otherwise the focus will change from the input to the Popover\n        // and the user won't be able to type in the input\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus={false}\n        id={menuProps.id}\n      >\n        <Popover.Trigger>\n          <div {...comboboxProps} className={styles.combobox}>\n            <TextInput\n              className={styles.inputField}\n              {...inputProps}\n              onFocus={(e) => {\n                onFocus?.(e as React.FocusEvent<HTMLInputElement>);\n                openMenu();\n              }}\n              onBlur={(e) => {\n                onBlur?.(e as React.FocusEvent<HTMLInputElement>);\n                inputProps.onBlur(e);\n              }}\n              id={id}\n              isInvalid={isInvalid}\n              isDisabled={isDisabled}\n              isRequired={isRequired}\n              isReadOnly={isReadOnly}\n              ref={mergeRefs(inputProps.ref, inputRef)}\n              testId=\"cf-autocomplete-input\"\n              placeholder={placeholder}\n              onChange={(event) => {\n                inputProps.onChange(event);\n                handleNativeChangeEvent(event);\n              }}\n            />\n            <IconButton\n              {...toggleProps}\n              ref={mergeRefs(toggleProps.ref, toggleRef)}\n              aria-label={showClearButton ? 'Clear' : 'Show list'}\n              className={styles.toggleButton}\n              variant=\"transparent\"\n              icon={showClearButton ? <CloseIcon variant=\"muted\" /> : icon}\n              onClick={() => {\n                if (showClearButton) {\n                  handleInputValueChange('');\n                } else {\n                  toggleMenu();\n                }\n              }}\n              isDisabled={isDisabled}\n              size=\"small\"\n            />\n          </div>\n        </Popover.Trigger>\n\n        {items.length > 0 || inputValue.length > 0 || showEmptyList ? (\n          <Popover.Content\n            {...menuProps}\n            ref={mergeRefs(menuProps.ref, listRef)}\n            className={styles.content}\n            testId={popoverTestId}\n          >\n            {isLoading &&\n              [...Array(3)].map((_, index) => (\n                <div key={index} className={cx(styles.item, styles.disabled)}>\n                  <ListItemLoadingState />\n                </div>\n              ))}\n\n            {!isLoading && isShowingNoMatches && (\n              <div className={styles.item}>\n                <Subheading className={styles.noMatchesTitle}>\n                  {noMatchesMessage}\n                </Subheading>\n              </div>\n            )}\n\n            {!isLoading &&\n              isUsingGroups(isGrouped, items) &&\n              items.map((group: GroupType, index: number) => {\n                if (group.options.length < 1) {\n                  return;\n                }\n                const render = (\n                  <div key={index}>\n                    <SectionHeading\n                      key={index}\n                      data-test-id=\"cf-autocomplete-grouptitle\"\n                      marginBottom=\"none\"\n                      className={styles.groupTitle}\n                    >\n                      {group.groupTitle}\n                    </SectionHeading>\n                    <AutocompleteItems<ItemType>\n                      items={group.options}\n                      highlightedIndex={highlightedIndex}\n                      getItemProps={getItemProps}\n                      renderItem={renderItem}\n                      inputValue={inputValue}\n                      elementStartIndex={elementStartIndex}\n                    />\n                  </div>\n                );\n                elementStartIndex += group.options.length;\n                return render;\n              })}\n\n            {!isLoading &&\n              !isUsingGroups(isGrouped, items) &&\n              items.length > 0 && (\n                <AutocompleteItems<ItemType>\n                  items={items}\n                  elementStartIndex={elementStartIndex}\n                  highlightedIndex={highlightedIndex}\n                  getItemProps={getItemProps}\n                  renderItem={renderItem}\n                  inputValue={inputValue}\n                />\n              )}\n          </Popover.Content>\n        ) : (\n          // We need to render an empty hidden div, so we can pass the menuProps or downshift will show a warning about it\n          // https://github.com/downshift-js/downshift/issues/1167#issuecomment-1088022842\n          <div {...menuProps} className={cx(styles.hidden)} />\n        )}\n      </Popover>\n    </div>\n  );\n}\n\nconst ListItemLoadingState = () => {\n  return (\n    <Skeleton.Container svgHeight={16}>\n      <Skeleton.BodyText numberOfLines={1} />\n    </Skeleton.Container>\n  );\n};\n\n// This is required to infer correct typings when differentiating groups and items\nfunction isUsingGroups<ItemType>(\n  isGrouped: boolean,\n  items: ItemType[] | GenericGroupType<ItemType>[],\n): items is GenericGroupType<ItemType>[] {\n  return isGrouped;\n}\n\n/**\n * The Autocomplete is a component that will show a `TextInput` where a user can type any word which will be used\n * to filter a list of items. That list of filtered items will be shown to the user as possible options for the input.\n * Once one of the options is selected, that option becomes the value of the `TextInput`.\n */\nexport const Autocomplete = React.forwardRef(_Autocomplete) as <T>(\n  props: ExpandProps<AutocompleteProps<T>> & {\n    ref?: React.Ref<HTMLDivElement>;\n  },\n) => ReturnType<typeof _Autocomplete>;\n","import React, { HTMLAttributes } from 'react';\nimport { cx } from 'emotion';\nimport { getStringMatch } from '@contentful/f36-utils';\nimport type { UseComboboxGetItemPropsOptions } from 'downshift';\nimport { Text } from '@contentful/f36-typography';\n\nimport { getAutocompleteStyles } from './Autocomplete.styles';\n\ninterface AutocompleteItemsProps<ItemType> {\n  items: ItemType[];\n  elementStartIndex: number;\n  highlightedIndex: number;\n  getItemProps: (\n    options: UseComboboxGetItemPropsOptions<ItemType>,\n  ) => HTMLAttributes<HTMLLIElement>;\n  renderItem: (item: ItemType, inputValue: string) => React.ReactNode;\n  inputValue: string;\n  listMaxHeight?: number;\n}\n\nexport const AutocompleteItems = <ItemType,>(\n  props: AutocompleteItemsProps<ItemType>,\n) => {\n  const {\n    items,\n    elementStartIndex,\n    highlightedIndex,\n    getItemProps,\n    renderItem,\n    inputValue,\n    listMaxHeight = 180,\n  } = props;\n\n  const styles = getAutocompleteStyles(listMaxHeight);\n\n  return (\n    <ul className={styles.list} data-test-id=\"cf-autocomplete-list\">\n      {items.map((item: ItemType, index: number) => {\n        const itemIndex = elementStartIndex + index;\n        const itemProps = getItemProps({ item, index: itemIndex });\n        return (\n          <Text\n            {...itemProps}\n            as=\"li\"\n            key={itemIndex}\n            className={cx([\n              styles.item,\n              highlightedIndex === itemIndex && styles.highlighted,\n            ])}\n            data-test-id={`cf-autocomplete-list-item-${itemIndex}`}\n          >\n            {renderItem ? (\n              renderItem(item, inputValue)\n            ) : typeof item === 'string' ? (\n              <HighlightedItem item={item} inputValue={inputValue} />\n            ) : (\n              item\n            )}\n          </Text>\n        );\n      })}\n    </ul>\n  );\n};\n\nAutocompleteItems.displayName = 'AutocompleteItems';\n\nfunction HighlightedItem({\n  item,\n  inputValue,\n}: {\n  item: string;\n  inputValue: string;\n}) {\n  const { before, match, after } = getStringMatch(item, inputValue);\n\n  return (\n    <>\n      {before}\n      <b>{match}</b>\n      {after}\n    </>\n  );\n}\n\nHighlightedItem.displayName = 'HighlightedItem';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAutocompleteStyles = (listMaxHeight: number) => ({\n  autocomplete: css({\n    position: 'relative',\n    width: '100%',\n  }),\n  combobox: css({\n    position: 'relative',\n  }),\n  inputField: css({\n    paddingRight: tokens.spacingXl,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n  toggleButton: css({\n    position: 'absolute',\n    top: '1px',\n    right: '1px',\n    zIndex: 1,\n    padding: tokens.spacing2Xs,\n    minHeight: 'calc(100% - 2px)',\n  }),\n  content: css({\n    overflow: 'auto',\n    maxHeight: `${listMaxHeight}px`,\n  }),\n  list: css({\n    listStyle: 'none',\n    padding: `${tokens.spacingXs} 0`,\n    margin: 0,\n  }),\n  groupTitle: css({\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    lineHeight: tokens.lineHeightM,\n  }),\n  noMatchesTitle: css({\n    color: tokens.gray500,\n    margin: `${tokens.spacingM} 0 ${tokens.spacingM} 0`,\n  }),\n  item: css({\n    display: 'block',\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    wordBreak: 'break-word',\n    whiteSpace: 'break-spaces',\n    cursor: 'pointer',\n    hyphens: 'auto',\n\n    '&:focus, &:hover': {\n      backgroundColor: tokens.gray100,\n    },\n    '&:active': {\n      backgroundColor: tokens.gray200,\n    },\n  }),\n  disabled: css({\n    opacity: 0.5,\n    pointerEvents: 'none',\n  }),\n  highlighted: css({\n    backgroundColor: tokens.gray100,\n  }),\n  hidden: css({\n    display: 'none',\n  }),\n});\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}