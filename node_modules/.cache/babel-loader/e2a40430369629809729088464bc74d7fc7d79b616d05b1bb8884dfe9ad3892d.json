{"ast":null,"code":"import n, { forwardRef, isValidElement, Fragment } from 'react';\nimport { cx, css } from 'emotion';\nimport { Box, Flex } from '@contentful/f36-core';\nimport { Subheading } from '@contentful/f36-typography';\nimport { IconButton, Button } from '@contentful/f36-button';\nimport { ArrowBackwardIcon } from '@contentful/f36-icons';\nimport a from '@contentful/f36-tokens';\nvar C = Object.defineProperty,\n  X = Object.defineProperties;\nvar M = Object.getOwnPropertyDescriptors;\nvar B = Object.getOwnPropertySymbols;\nvar H = Object.prototype.hasOwnProperty,\n  b = Object.prototype.propertyIsEnumerable;\nvar S = (e, t, o) => t in e ? C(e, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: o\n  }) : e[t] = o,\n  i = (e, t) => {\n    for (var o in t || (t = {})) H.call(t, o) && S(e, o, t[o]);\n    if (B) for (var o of B(t)) b.call(t, o) && S(e, o, t[o]);\n    return e;\n  },\n  N = (e, t) => X(e, M(t));\nvar c = (e, t) => {\n  var o = {};\n  for (var r in e) H.call(e, r) && t.indexOf(r) < 0 && (o[r] = e[r]);\n  if (e != null && B) for (var r of B(e)) t.indexOf(r) < 0 && b.call(e, r) && (o[r] = e[r]);\n  return o;\n};\nfunction $(r, o) {\n  var m = r,\n    {\n      onClick: e\n    } = m,\n    t = c(m, [\"onClick\"]);\n  return n.createElement(IconButton, N(i({}, t), {\n    \"aria-label\": \"Go back\",\n    icon: n.createElement(ArrowBackwardIcon, {\n      variant: \"muted\"\n    }),\n    onClick: e,\n    size: \"small\",\n    ref: o,\n    variant: \"transparent\"\n  }));\n}\nvar _ = forwardRef($);\nvar G = () => ({\n  root: css({\n    alignItems: \"center\",\n    display: \"flex\"\n  }),\n  separator: css({\n    height: a.spacingXl,\n    position: \"relative\",\n    width: a.spacingXs,\n    \"&::after\": {\n      backgroundColor: a.gray200,\n      content: '\"\"',\n      display: \"block\",\n      height: \"16px\",\n      position: \"absolute\",\n      left: \"50%\",\n      top: \"50%\",\n      width: \"1px\",\n      transform: \"translate3d(-50%, -50%, 0) rotate3d(0, 0, 1, 18deg)\"\n    }\n  })\n});\nvar J = \"div\";\nfunction K(l, s) {\n  var y = l,\n    {\n      children: e,\n      className: t,\n      segments: o,\n      separator: r,\n      testId: m = \"cf-ui-segmentation\"\n    } = y,\n    f = c(y, [\"children\", \"className\", \"segments\", \"separator\", \"testId\"]);\n  let E = G(),\n    P = r != null ? r : n.createElement(\"div\", {\n      className: E.separator\n    }),\n    T = (u, p) => n.createElement(Fragment, {\n      key: p\n    }, p > 0 && P, u);\n  return n.createElement(Box, i({\n    as: J,\n    className: cx(E.root, t),\n    ref: s,\n    testId: m\n  }, f), e ? n.Children.toArray(e).map(T) : o.map(T));\n}\nvar h = forwardRef(K);\nvar R = () => ({\n  button: css({\n    color: a.gray500,\n    fontSize: a.fontSizeL,\n    fontWeight: a.fontWeightNormal,\n    maxWidth: \"none\",\n    paddingLeft: a.spacingXs,\n    paddingRight: a.spacingXs\n  })\n});\nvar L = o => {\n  var r = o,\n    {\n      breadcrumbs: e\n    } = r,\n    t = c(r, [\"breadcrumbs\"]);\n  let m = R(),\n    f = e.map(s => {\n      let l = s.onClick;\n      return n.createElement(Button, {\n        as: \"a\",\n        className: m.button,\n        href: s.url,\n        key: s.url,\n        size: \"small\",\n        variant: \"transparent\",\n        onClick: l\n      }, s.content);\n    });\n  return n.createElement(h, i({\n    segments: f\n  }, t));\n};\nvar w = 56;\nvar F = () => ({\n  actions: css({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: \"25%\",\n    textAlign: \"right\"\n  }),\n  context: css({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: \"25%\"\n  }),\n  filters: css({\n    display: \"flex\",\n    flexGrow: 1,\n    flexShrink: 1,\n    flexBasis: \"50%\"\n  }),\n  root: e => css({\n    background: a.gray100,\n    height: `${56}px`,\n    padding: e ? `${a.spacingXs} ${a.spacingS}` : a.spacingS\n  }),\n  separator: css({\n    backgroundColor: a.gray200,\n    height: \"16px\",\n    margin: `0 ${a.spacingS} 0 ${a.spacingXs}`,\n    transform: \"rotate3d(0, 0, 1, 18deg)\",\n    width: \"1px\"\n  }),\n  title: css({\n    margin: `${a.spacing2Xs} 0`,\n    \"&:not(:first-child)\": {\n      marginLeft: a.spacingXs\n    }\n  }),\n  noWrap: css({\n    textWrap: \"nowrap\",\n    \"&:not(:first-child)\": {\n      marginLeft: a.spacingXs\n    }\n  })\n});\nvar re = \"header\";\nfunction ne(T, P) {\n  var u = T,\n    {\n      actions: e,\n      as: t,\n      backButtonProps: o,\n      breadcrumbs: r,\n      className: m,\n      filters: f,\n      metadata: s,\n      title: l,\n      withBackButton: y\n    } = u,\n    E = c(u, [\"actions\", \"as\", \"backButtonProps\", \"breadcrumbs\", \"className\", \"filters\", \"metadata\", \"title\", \"withBackButton\"]);\n  let p = F();\n  return n.createElement(Flex, i({\n    alignItems: \"center\",\n    as: re,\n    gap: \"spacingM\",\n    className: cx(p.root(!!f), m),\n    ref: P\n  }, E), n.createElement(\"div\", {\n    className: p.context\n  }, n.createElement(Flex, {\n    alignItems: \"center\",\n    gap: \"spacingXs\"\n  }, n.createElement(h, null, y && n.createElement(_, i({}, o)), r && n.createElement(L, {\n    breadcrumbs: r\n  }), l && n.createElement(\"div\", {\n    className: p.noWrap\n  }, isValidElement(l) ? l : n.createElement(Subheading, {\n    className: p.title\n  }, l))), s && n.createElement(Flex, {\n    alignItems: \"center\",\n    gap: \"spacing2Xs\"\n  }, s))), n.createElement(\"div\", {\n    className: p.filters\n  }, f), n.createElement(\"div\", {\n    className: p.actions\n  }, e));\n}\nvar ae = forwardRef(ne);\nexport { w as HEADER_HEIGHT, ae as Header };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/Header.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/BackButton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/Breadcrumb.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/Segmentation.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/Segmentation.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/Breadcrumb.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/Header.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-header/src/constants.ts"],"sourcesContent":["import React, {\n  type ElementType,\n  forwardRef,\n  type Ref,\n  type ReactElement,\n  type ReactNode,\n  isValidElement,\n} from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  type ExpandProps,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n} from '@contentful/f36-core';\nimport { Subheading } from '@contentful/f36-typography';\nimport { BackButton, type BackButtonProps } from './BackButton';\nimport { Breadcrumb, type BreadcrumbProps } from './Breadcrumb';\nimport { Segmentation } from './Segmentation';\nimport { getHeaderStyles } from './Header.styles';\n\nconst HEADER_DEFAULT_TAG = 'header';\n\ntype WithBackButtonOrNot =\n  | {\n      backButtonProps?: BackButtonProps;\n      /**\n       * If `true`, renders a leading back button within the header.\n       */\n      withBackButton: true;\n    }\n  | {\n      backButtonProps?: never;\n      withBackButton?: false | never;\n    };\n\ntype HeaderInternalProps = WithBackButtonOrNot & {\n  /**\n   * Optional JSX children to display as complementary actions (e.g. buttons) related to the current page/route.\n   */\n  actions?: ReactElement | ReactElement[];\n  /**\n   * An (optional) list of navigable links to prepend to the current title.\n   */\n  breadcrumbs?: BreadcrumbProps['breadcrumbs'];\n  /**\n   * An (optional) element displayed in the center of the header, typically used to render refinement/search UI.\n   */\n  filters?: ReactElement;\n  /**\n   * The title of the element this header pertains to.\n   */\n  title?: ReactElement | string;\n  metadata?: ReactNode;\n};\n\nexport type HeaderProps<E extends ElementType = typeof HEADER_DEFAULT_TAG> =\n  PolymorphicProps<HeaderInternalProps, E>;\n\nfunction _Header<E extends ElementType = typeof HEADER_DEFAULT_TAG>(\n  {\n    actions,\n    as,\n    backButtonProps,\n    breadcrumbs,\n    className,\n    filters,\n    metadata,\n    title,\n    withBackButton,\n    ...otherProps\n  }: HeaderProps<E>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- polymorphic element\n  forwardedRef: Ref<any>,\n) {\n  const styles = getHeaderStyles();\n  return (\n    <Flex\n      alignItems=\"center\"\n      as={HEADER_DEFAULT_TAG}\n      gap=\"spacingM\"\n      className={cx(styles.root(Boolean(filters)), className)}\n      ref={forwardedRef}\n      {...otherProps}\n    >\n      <div className={styles.context}>\n        <Flex alignItems=\"center\" gap=\"spacingXs\">\n          <Segmentation>\n            {withBackButton && <BackButton {...backButtonProps} />}\n            {breadcrumbs && <Breadcrumb breadcrumbs={breadcrumbs} />}\n            {title && (\n              <div className={styles.noWrap}>\n                {isValidElement(title) ? (\n                  title\n                ) : (\n                  <Subheading className={styles.title}>{title}</Subheading>\n                )}\n              </div>\n            )}\n          </Segmentation>\n          {metadata && (\n            <Flex alignItems=\"center\" gap=\"spacing2Xs\">\n              {metadata}\n            </Flex>\n          )}\n        </Flex>\n      </div>\n      <div className={styles.filters}>{filters}</div>\n      <div className={styles.actions}>{actions}</div>\n    </Flex>\n  );\n}\n\nexport const Header: PolymorphicComponent<\n  ExpandProps<HeaderInternalProps>,\n  typeof HEADER_DEFAULT_TAG\n> = forwardRef(_Header);\n","import React, { forwardRef, type Ref } from 'react';\nimport { IconButton, type IconButtonProps } from '@contentful/f36-button';\nimport { ArrowBackwardIcon } from '@contentful/f36-icons';\n\nexport type BackButtonProps = Omit<\n  Partial<IconButtonProps>,\n  'aria-label' | 'children' | 'icon' | 'variant' | 'size'\n>;\n\nfunction _BackButton(\n  { onClick, ...otherProps }: BackButtonProps,\n  ref: Ref<HTMLButtonElement>,\n) {\n  return (\n    <IconButton\n      {...otherProps}\n      aria-label=\"Go back\"\n      icon={<ArrowBackwardIcon variant=\"muted\" />}\n      onClick={onClick}\n      size=\"small\"\n      ref={ref}\n      variant=\"transparent\"\n    />\n  );\n}\n\nexport const BackButton = forwardRef<HTMLButtonElement, BackButtonProps>(\n  _BackButton,\n);\n","import React, { MouseEventHandler } from 'react';\nimport { Button } from '@contentful/f36-button';\nimport { Segmentation } from './Segmentation';\nimport { getBreadcrumbStyles } from './Breadcrumb.styles';\n\ntype Breadcrumb = {\n  content: string;\n  url: string;\n  onClick?: MouseEventHandler<HTMLAnchorElement>;\n};\n\nexport type BreadcrumbProps = {\n  breadcrumbs: Breadcrumb[];\n};\n\nexport const Breadcrumb = ({ breadcrumbs, ...otherProps }: BreadcrumbProps) => {\n  const styles = getBreadcrumbStyles();\n  const segments = breadcrumbs.map((breadcrumb) => {\n    const handleBreadcrumbClick = breadcrumb.onClick;\n    return (\n      <Button\n        as=\"a\"\n        className={styles.button}\n        href={breadcrumb.url}\n        key={breadcrumb.url}\n        size=\"small\"\n        variant=\"transparent\"\n        onClick={handleBreadcrumbClick}\n      >\n        {breadcrumb.content}\n      </Button>\n    );\n  });\n  return <Segmentation segments={segments} {...otherProps} />;\n};\n","import {\n  Box,\n  type CommonProps,\n  type ExpandProps,\n  type PolymorphicComponent,\n  type PolymorphicProps,\n} from '@contentful/f36-core';\nimport { cx } from 'emotion';\nimport React, {\n  forwardRef,\n  type ElementType,\n  type Ref,\n  type ReactNode,\n  Fragment,\n  type ReactElement,\n} from 'react';\nimport { getSegmentationStyles } from './Segmentation.styles';\n\nconst SEGMENTATION_DEFAULT_TAG = 'div';\n\ntype ChildrenOrSegments =\n  | {\n      children: ReactNode[];\n      segments?: never;\n    }\n  | {\n      children?: never;\n      segments: ReactNode[];\n    };\n\ntype SegmentationInternalProps = CommonProps &\n  ChildrenOrSegments & {\n    separator?: ReactElement;\n  };\n\nexport type SegmentationProps<\n  E extends ElementType = typeof SEGMENTATION_DEFAULT_TAG,\n> = PolymorphicProps<SegmentationInternalProps, E>;\n\nfunction _Segmentation<E extends ElementType = typeof SEGMENTATION_DEFAULT_TAG>(\n  {\n    children,\n    className,\n    segments,\n    separator: SeparatorComponent,\n    testId = 'cf-ui-segmentation',\n    ...otherProps\n  }: SegmentationProps<E>,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- polymorphic element\n  forwardedRef: Ref<any>,\n) {\n  const styles = getSegmentationStyles();\n  const separator = SeparatorComponent ?? <div className={styles.separator} />;\n\n  const mapSegments = (segment: ReactNode, index: number) => (\n    <Fragment key={index}>\n      {index > 0 && separator}\n      {segment}\n    </Fragment>\n  );\n\n  return (\n    <Box\n      as={SEGMENTATION_DEFAULT_TAG}\n      className={cx(styles.root, className)}\n      ref={forwardedRef}\n      testId={testId}\n      {...otherProps}\n    >\n      {children\n        ? React.Children.toArray(children).map(mapSegments)\n        : segments.map(mapSegments)}\n    </Box>\n  );\n}\n\nexport const Segmentation: PolymorphicComponent<\n  ExpandProps<SegmentationInternalProps>,\n  typeof SEGMENTATION_DEFAULT_TAG\n> = forwardRef(_Segmentation);\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport const getSegmentationStyles = () => {\n  return {\n    root: css({\n      alignItems: 'center',\n      display: 'flex',\n    }),\n    separator: css({\n      height: tokens.spacingXl,\n      position: 'relative',\n      width: tokens.spacingXs,\n\n      '&::after': {\n        backgroundColor: tokens.gray200,\n        content: '\"\"',\n        display: 'block',\n        height: '16px',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        width: '1px',\n        transform: 'translate3d(-50%, -50%, 0) rotate3d(0, 0, 1, 18deg)',\n      },\n    }),\n  };\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getBreadcrumbStyles = () => ({\n  button: css({\n    color: tokens.gray500,\n    fontSize: tokens.fontSizeL,\n    fontWeight: tokens.fontWeightNormal,\n    maxWidth: 'none',\n    paddingLeft: tokens.spacingXs,\n    paddingRight: tokens.spacingXs,\n  }),\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { HEADER_HEIGHT } from './constants';\n\nexport const getHeaderStyles = () => ({\n  actions: css({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: '25%',\n    textAlign: 'right',\n  }),\n  context: css({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: '25%',\n  }),\n  filters: css({\n    display: 'flex',\n    flexGrow: 1,\n    flexShrink: 1,\n    flexBasis: '50%',\n  }),\n  root: (hasFilters?: boolean) =>\n    css({\n      background: tokens.gray100,\n      height: `${HEADER_HEIGHT}px`,\n      // Reduce vertical padding when there's a filter in the header\n      padding: hasFilters\n        ? `${tokens.spacingXs} ${tokens.spacingS}`\n        : tokens.spacingS,\n    }),\n  separator: css({\n    backgroundColor: tokens.gray200,\n    height: '16px',\n    margin: `0 ${tokens.spacingS} 0 ${tokens.spacingXs}`,\n    transform: 'rotate3d(0, 0, 1, 18deg)',\n    width: '1px',\n  }),\n  title: css({\n    margin: `${tokens.spacing2Xs} 0`,\n    '&:not(:first-child)': {\n      marginLeft: tokens.spacingXs,\n    },\n  }),\n  noWrap: css({\n    textWrap: 'nowrap',\n    '&:not(:first-child)': {\n      marginLeft: tokens.spacingXs,\n    },\n  }),\n});\n","export const HEADER_HEIGHT = 56;\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}