{"ast":null,"code":"import a, { forwardRef } from 'react';\nimport { cx, css } from 'emotion';\nimport { useImageLoaded, mergeRefs } from '@contentful/f36-core';\nimport { Skeleton } from '@contentful/f36-skeleton';\nvar R = Object.defineProperty,\n  S = Object.defineProperties;\nvar w = Object.getOwnPropertyDescriptors;\nvar r = Object.getOwnPropertySymbols;\nvar f = Object.prototype.hasOwnProperty,\n  d = Object.prototype.propertyIsEnumerable;\nvar p = (o, t, e) => t in o ? R(o, t, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: e\n  }) : o[t] = e,\n  I = (o, t) => {\n    for (var e in t || (t = {})) f.call(t, e) && p(o, e, t[e]);\n    if (r) for (var e of r(t)) d.call(t, e) && p(o, e, t[e]);\n    return o;\n  },\n  l = (o, t) => S(o, w(t));\nvar c = (o, t) => {\n  var e = {};\n  for (var m in o) f.call(o, m) && t.indexOf(m) < 0 && (e[m] = o[m]);\n  if (o != null && r) for (var m of r(o)) t.indexOf(m) < 0 && d.call(o, m) && (e[m] = o[m]);\n  return e;\n};\nvar y = ({\n  height: o,\n  width: t\n}) => ({\n  image: ({\n    isLoaded: e\n  }) => css({\n    display: e ? \"block\" : \"none\",\n    height: e ? o : 0,\n    opacity: e ? 1 : 0,\n    width: e ? t : 0\n  }),\n  root: css({\n    height: o,\n    width: t\n  })\n});\nfunction B(H, x) {\n  var n = H,\n    {\n      className: o,\n      height: t,\n      src: e,\n      testId: m = \"cf-ui-image\",\n      width: i\n    } = n,\n    u = c(n, [\"className\", \"height\", \"src\", \"testId\", \"width\"]);\n  let s = y({\n      height: t,\n      width: i\n    }),\n    {\n      ref: C,\n      loaded: L,\n      onLoad: k\n    } = useImageLoaded(),\n    g = !!(e && L);\n  return a.createElement(\"div\", {\n    className: s.root\n  }, a.createElement(\"img\", l(I({}, u), {\n    className: cx(s.image({\n      isLoaded: g\n    }), o),\n    \"data-test-id\": m,\n    onLoad: k,\n    ref: mergeRefs(C, x),\n    src: e\n  })), !g && a.createElement(Skeleton.Container, null, a.createElement(Skeleton.Image, {\n    height: t,\n    width: i\n  })));\n}\nvar E = forwardRef(B);\nexport { E as Image };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-image/src/Image.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-image/src/Image.styles.ts"],"sourcesContent":["import React, { ComponentPropsWithoutRef, forwardRef, type Ref } from 'react';\nimport { cx } from 'emotion';\nimport {\n  type CommonProps,\n  mergeRefs,\n  useImageLoaded,\n} from '@contentful/f36-core';\nimport { Skeleton } from '@contentful/f36-skeleton';\nimport { getImageStyles } from './Image.styles';\n\nexport interface ImageProps\n  extends CommonProps,\n    Omit<ComponentPropsWithoutRef<'img'>, 'onLoad'> {\n  /**\n   * Alt attribute to pass to the image element\n   */\n  alt: string;\n  /**\n   * Height of the final image once loaded\n   */\n  height: string;\n  /**\n   * Width of the final image once loaded\n   */\n  width: string;\n}\n\nfunction _Image(\n  {\n    className,\n    height,\n    src,\n    testId = 'cf-ui-image',\n    width,\n    ...otherProps\n  }: ImageProps,\n  forwardedRef: Ref<HTMLImageElement>,\n) {\n  const styles = getImageStyles({ height, width });\n  const { ref: imageRef, loaded: isImageLoaded, onLoad } = useImageLoaded();\n  const isLoaded = Boolean(src && isImageLoaded);\n\n  return (\n    <div className={styles.root}>\n      {/* eslint-disable-next-line jsx-a11y/alt-text -- `alt` should be provided by the user */}\n      <img\n        {...otherProps}\n        className={cx(styles.image({ isLoaded }), className)}\n        data-test-id={testId}\n        onLoad={onLoad}\n        ref={mergeRefs(imageRef, forwardedRef)}\n        src={src}\n      />\n      {!isLoaded && (\n        <Skeleton.Container>\n          <Skeleton.Image height={height} width={width} />\n        </Skeleton.Container>\n      )}\n    </div>\n  );\n}\n\nexport const Image = forwardRef(_Image);\n","import { css } from 'emotion';\nimport type { ImageProps } from './Image';\n\nexport const getImageStyles = ({\n  height,\n  width,\n}: Pick<ImageProps, 'height' | 'width'>) => {\n  return {\n    image: ({ isLoaded }: { isLoaded: boolean }) =>\n      css({\n        display: isLoaded ? 'block' : 'none',\n        height: isLoaded ? height : 0,\n        opacity: isLoaded ? 1 : 0,\n        width: isLoaded ? width : 0,\n      }),\n    root: css({\n      height,\n      width,\n    }),\n  };\n};\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}