{"ast":null,"code":"import p, { forwardRef } from 'react';\nimport { cx, css } from 'emotion';\nimport { Image } from '@contentful/f36-image';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport s from '@contentful/f36-tokens';\nimport { Stack } from '@contentful/f36-core';\nimport { Menu } from '@contentful/f36-menu';\nvar D = Object.defineProperty,\n  H = Object.defineProperties;\nvar X = Object.getOwnPropertyDescriptors;\nvar S = Object.getOwnPropertySymbols;\nvar $ = Object.prototype.hasOwnProperty,\n  G = Object.prototype.propertyIsEnumerable;\nvar T = (t, o, r) => o in t ? D(t, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : t[o] = r,\n  h = (t, o) => {\n    for (var r in o || (o = {})) $.call(o, r) && T(t, r, o[r]);\n    if (S) for (var r of S(o)) G.call(o, r) && T(t, r, o[r]);\n    return t;\n  },\n  N = (t, o) => H(t, X(o));\nvar V = (t, o) => {\n  var r = {};\n  for (var e in t) $.call(t, e) && o.indexOf(e) < 0 && (r[e] = t[e]);\n  if (t != null && S) for (var e of S(t)) o.indexOf(e) < 0 && G.call(t, e) && (r[e] = t[e]);\n  return r;\n};\nvar I = {\n  primary: s.blue500,\n  muted: z(s.gray500),\n  green: s.green400,\n  orange: s.orange400,\n  yellow: s.yellow500,\n  purple: s.purple400,\n  gray: s.gray400,\n  pink: \"#FF77AE\",\n  emerald: \"#00B8A2\",\n  lavender: \"#9095FF\"\n};\nfunction z(t) {\n  let o = parseInt(t.slice(1, 3), 16),\n    r = parseInt(t.slice(3, 5), 16),\n    e = parseInt(t.slice(5, 7), 16);\n  return `rgb(${[Math.round((255 + o) / 2), Math.round((255 + r) / 2), Math.round((255 + e) / 2)].join(\" \")})`;\n}\nvar _ = t => {\n    let o = I[t],\n      r = [\"muted\", \"gray\"].includes(t) ? 1 : 2;\n    return {\n      boxShadow: [`0px 0px 0px ${r}px ${o} inset`, `0px 0px 0px ${r + 1}px ${s.colorWhite} inset`].join(\", \")\n    };\n  },\n  g = t => ({\n    tiny: \"20px\",\n    small: \"24px\",\n    medium: \"32px\",\n    large: \"48px\"\n  })[t],\n  O = t => Math.round(Number(t.replace(\"px\", \"\")) / 2),\n  W = ({\n    size: t,\n    variant: o,\n    colorVariant: r\n  }) => {\n    let e = o === \"app\" ? s.borderRadiusSmall : \"100%\",\n      i = g(t),\n      a = r === \"muted\";\n    return {\n      fallback: css({\n        backgroundColor: a ? z(s.gray300) : s.gray300,\n        color: a ? z(s.gray700) : s.gray700,\n        height: \"100%\",\n        width: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        fontStretch: \"semi-condensed\",\n        fontSize: `${O(i)}px`\n      }),\n      image: css({\n        borderRadius: e,\n        display: \"block\"\n      }),\n      root: css({\n        borderRadius: e,\n        height: i,\n        overflow: \"hidden\",\n        position: \"relative\",\n        width: i,\n        \"&::after\": h({\n          borderRadius: e,\n          bottom: 0,\n          content: '\"\"',\n          display: \"block\",\n          left: 0,\n          position: \"absolute\",\n          top: 0,\n          right: 0\n        }, _(r))\n      }),\n      imageContainer: css({\n        backgroundColor: s.colorWhite,\n        overflow: \"visible\",\n        zIndex: 1\n      }, r === \"muted\" && {\n        img: {\n          opacity: .5\n        }\n      }),\n      overlayIcon: css({\n        svg: {\n          backgroundColor: s.colorWhite,\n          borderRadius: \"100%\",\n          position: \"absolute\",\n          bottom: 0,\n          right: \"-10%\",\n          width: \"40%\",\n          height: \"40%\",\n          zIndex: 1\n        }\n      })\n    };\n  };\nfunction Q(u, l) {\n  var C = u,\n    {\n      alt: t = \"\",\n      className: o,\n      colorVariant: r = \"gray\",\n      icon: e,\n      isLoading: i = !1,\n      size: a = \"medium\",\n      initials: f,\n      src: n,\n      testId: d = \"cf-ui-avatar\",\n      tooltipProps: v,\n      variant: k = \"user\"\n    } = C,\n    x = V(C, [\"alt\", \"className\", \"colorVariant\", \"icon\", \"isLoading\", \"size\", \"initials\", \"src\", \"testId\", \"tooltipProps\", \"variant\"]);\n  let j = !i && !n,\n    y = W({\n      size: a,\n      variant: k,\n      colorVariant: r\n    }),\n    w = g(a),\n    E = p.createElement(\"div\", h({\n      className: cx(y.root, o, {\n        [y.imageContainer]: !!n\n      }),\n      \"data-test-id\": d,\n      ref: l\n    }, x), j ? p.createElement(\"div\", {\n      className: y.fallback,\n      \"data-test-id\": `${d}-fallback`\n    }, f == null ? void 0 : f.substring(0, 2).toUpperCase()) : p.createElement(Image, {\n      alt: t,\n      className: y.image,\n      height: w,\n      src: n,\n      width: w\n    }), !!e && p.createElement(\"span\", {\n      className: y.overlayIcon\n    }, e));\n  return v ? p.createElement(Tooltip, N(h({}, v), {\n    usePortal: !0\n  }), E) : E;\n}\nvar F = forwardRef(Q);\nvar L = t => ({\n  groupSpaced: css({\n    gap: s.spacing2Xs\n  }),\n  groupStacked: css({\n    gap: 0,\n    \"> :not(:first-child)\": {\n      marginLeft: `-${s.spacing2Xs}`\n    }\n  }),\n  avatarStacked: css({\n    position: \"relative\",\n    boxShadow: `0px 0px 0px 1px ${s.colorWhite}`\n  }),\n  moreAvatarsBtn: css({\n    cursor: \"pointer\",\n    backgroundColor: s.colorWhite,\n    color: s.gray600,\n    fontSize: s.fontSizeS,\n    border: \"none\",\n    boxShadow: `0px 0px 0px 1px ${s.gray200} inset`,\n    borderRadius: \"99999999em\",\n    height: g(t),\n    width: g(t),\n    overflow: \"hidden\",\n    zIndex: 0\n  }),\n  moreAvatarsItem: css({\n    cursor: \"default\"\n  })\n});\nfunction tt({\n  children: t,\n  className: o,\n  maxVisibleChildren: r = 3,\n  size: e = \"medium\",\n  testId: i = \"cf-ui-avatar-group\",\n  variant: a = \"spaced\"\n}, f) {\n  let n = L(e),\n    d = p.Children.toArray(t),\n    v = d.length > r ? r - 1 : r,\n    k = d.slice(0, v),\n    x = d.slice(v);\n  return p.createElement(Stack, {\n    flexDirection: \"row\",\n    testId: i,\n    ref: f,\n    className: cx(o, {\n      [n.groupStacked]: a === \"stacked\",\n      [n.groupSpaced]: a === \"spaced\"\n    })\n  }, k.map((l, u) => {\n    let C = k.length - u;\n    return p.cloneElement(l, {\n      key: `avatar-rendered-${u}`,\n      size: e,\n      className: cx(l.props.className, {\n        [n.avatarStacked]: a === \"stacked\"\n      }),\n      style: {\n        zIndex: C\n      }\n    });\n  }), x.length > 0 && p.createElement(Menu, {\n    placement: \"bottom-end\"\n  }, p.createElement(Menu.Trigger, null, p.createElement(\"button\", {\n    type: \"button\",\n    className: cx({\n      [n.avatarStacked]: a === \"stacked\"\n    }, n.moreAvatarsBtn)\n  }, \"+\", x.length)), p.createElement(Menu.List, null, x.map((l, u) => p.createElement(Menu.Item, {\n    className: n.moreAvatarsItem,\n    key: `avatar-${u}`\n  }, p.cloneElement(l, {\n    key: `avatar-menuitem-${u}`,\n    size: \"tiny\",\n    tooltipProps: void 0\n  }), l.props.alt)))));\n}\nvar B = forwardRef(tt);\nexport { F as Avatar, B as AvatarGroup, I as avatarColorMap };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-avatar/src/Avatar/Avatar.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-avatar/src/Avatar/Avatar.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-avatar/src/Avatar/utils.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-avatar/src/AvatarGroup/AvatarGroup.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-avatar/src/AvatarGroup/AvatarGroup.styles.ts"],"sourcesContent":["import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\n\nimport { type CommonProps } from '@contentful/f36-core';\nimport { Image, type ImageProps } from '@contentful/f36-image';\nimport {\n  Tooltip,\n  type TooltipInternalProps,\n  type WithEnhancedContent,\n} from '@contentful/f36-tooltip';\n\nimport { convertSizeToPixels, getAvatarStyles } from './Avatar.styles';\nimport type { ColorVariant } from './utils';\n\nexport type Size = 'tiny' | 'small' | 'medium' | 'large';\n\nexport type Variant = 'app' | 'user';\n\nexport interface AvatarProps extends CommonProps {\n  alt?: ImageProps['alt'];\n  /**\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * @default 'medium'\n   */\n  size?: Size;\n  initials?: string;\n  src?: ImageProps['src'];\n  /**\n   * A tooltipProps attribute used to conditionally render the tooltip around root element\n   */\n  tooltipProps?: CommonProps &\n    WithEnhancedContent &\n    Omit<TooltipInternalProps, 'children'>;\n  /**\n   * @default 'user'\n   */\n  variant?: Variant;\n  /**\n   * @default 'gray'\n   */\n  colorVariant?: ColorVariant;\n  icon?: React.ReactElement;\n}\n\nfunction _Avatar(\n  {\n    alt = '',\n    className,\n    colorVariant = 'gray',\n    icon,\n    isLoading = false,\n    size = 'medium',\n    initials,\n    src,\n    testId = 'cf-ui-avatar',\n    tooltipProps,\n    variant = 'user',\n    ...otherProps\n  }: AvatarProps,\n  forwardedRef: React.Ref<HTMLDivElement>,\n) {\n  // Only render the fallback when `src` is undefined or an empty string\n  const isFallback = Boolean(!isLoading && !src);\n  const styles = getAvatarStyles({ size, variant, colorVariant });\n  const sizePixels = convertSizeToPixels(size);\n\n  const content = (\n    <div\n      className={cx(styles.root, className, {\n        [styles.imageContainer]: !!src,\n      })}\n      data-test-id={testId}\n      ref={forwardedRef}\n      {...otherProps}\n    >\n      {isFallback ? (\n        <div className={styles.fallback} data-test-id={`${testId}-fallback`}>\n          {initials?.substring(0, 2).toUpperCase()}\n        </div>\n      ) : (\n        <Image\n          alt={alt}\n          className={styles.image}\n          height={sizePixels}\n          src={src}\n          width={sizePixels}\n        />\n      )}\n      {!!icon && <span className={styles.overlayIcon}>{icon}</span>}\n    </div>\n  );\n\n  if (tooltipProps)\n    return (\n      <Tooltip {...tooltipProps} usePortal>\n        {content}\n      </Tooltip>\n    );\n\n  return content;\n}\n\nexport const Avatar = forwardRef(_Avatar);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type AvatarProps } from './Avatar';\nimport { applyMuted, avatarColorMap, type ColorVariant } from './utils';\n\nexport const getColorVariantStyles = (colorVariant: ColorVariant) => {\n  const colorToken: string = avatarColorMap[colorVariant];\n\n  const colorWidth = ['muted', 'gray'].includes(colorVariant) ? 1 : 2;\n\n  return {\n    boxShadow: [\n      `0px 0px 0px ${colorWidth}px ${colorToken} inset`,\n      `0px 0px 0px ${colorWidth + 1}px ${tokens.colorWhite} inset`,\n    ].join(', '),\n  };\n};\n\nexport const convertSizeToPixels = (size: AvatarProps['size']) =>\n  ({\n    tiny: '20px',\n    small: '24px',\n    medium: '32px',\n    large: '48px',\n  }[size]);\n\nconst getInitialsFontSize = (sizePixels: string) =>\n  Math.round(Number(sizePixels.replace('px', '')) / 2);\n\nexport const getAvatarStyles = ({\n  size,\n  variant,\n  colorVariant,\n}: {\n  size: AvatarProps['size'];\n  variant: AvatarProps['variant'];\n  colorVariant: ColorVariant;\n}) => {\n  const borderRadius = variant === 'app' ? tokens.borderRadiusSmall : '100%';\n  const sizePixels = convertSizeToPixels(size);\n  const isMuted = colorVariant === 'muted';\n\n  return {\n    fallback: css({\n      backgroundColor: isMuted ? applyMuted(tokens.gray300) : tokens.gray300,\n      color: isMuted ? applyMuted(tokens.gray700) : tokens.gray700,\n      height: '100%',\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontStretch: 'semi-condensed',\n      fontSize: `${getInitialsFontSize(sizePixels)}px`,\n    }),\n    image: css({\n      borderRadius,\n      display: 'block',\n    }),\n    root: css({\n      borderRadius,\n      height: sizePixels,\n      overflow: 'hidden',\n      position: 'relative',\n      width: sizePixels,\n      '&::after': {\n        borderRadius,\n        bottom: 0,\n        content: '\"\"',\n        display: 'block',\n        left: 0,\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        ...getColorVariantStyles(colorVariant),\n      },\n    }),\n    imageContainer: css(\n      {\n        backgroundColor: tokens.colorWhite,\n        overflow: 'visible',\n        zIndex: 1,\n      },\n      colorVariant === 'muted' && {\n        img: {\n          opacity: 0.5,\n        },\n      },\n    ),\n    overlayIcon: css({\n      svg: {\n        backgroundColor: tokens.colorWhite,\n        borderRadius: '100%',\n        position: 'absolute',\n        bottom: 0,\n        right: '-10%',\n        width: '40%',\n        height: '40%',\n        zIndex: 1,\n      },\n    }),\n  };\n};\n","import tokens from '@contentful/f36-tokens';\n\nexport type ColorVariant = keyof typeof avatarColorMap;\n\nexport const avatarColorMap = {\n  primary: tokens.blue500,\n  muted: applyMuted(tokens.gray500),\n  green: tokens.green400,\n  orange: tokens.orange400,\n  yellow: tokens.yellow500,\n  purple: tokens.purple400,\n  gray: tokens.gray400,\n  pink: '#FF77AE',\n  emerald: '#00B8A2',\n  lavender: '#9095FF',\n};\n\n/**\n * @param color Color string in hex format with a leading `#`\n */\nexport function applyMuted(color: string): string {\n  // This is a temporary solution because `color-mix` is not supported in Safari\n  const r = parseInt(color.slice(1, 3), 16);\n  const g = parseInt(color.slice(3, 5), 16);\n  const b = parseInt(color.slice(5, 7), 16);\n\n  return `rgb(${[\n    Math.round((255 + r) / 2),\n    Math.round((255 + g) / 2),\n    Math.round((255 + b) / 2),\n  ].join(' ')})`;\n\n  // Eventually we should use `color-mix`\n  // return `color-mix(in srgb, ${color}, ${tokens.colorWhite} 50%)`;\n}\n","import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\n\nimport { Stack, type CommonProps } from '@contentful/f36-core';\nimport { Menu } from '@contentful/f36-menu';\n\nimport { type AvatarProps } from '../Avatar';\nimport { getAvatarGroupStyles } from './AvatarGroup.styles';\n\nexport interface AvatarGroupProps extends CommonProps {\n  children?:\n    | React.ReactElement<AvatarProps>[]\n    | React.ReactElement<AvatarProps>;\n  maxVisibleChildren?: number;\n  size?: 'small' | 'medium';\n  variant?: 'stacked' | 'spaced';\n}\n\nfunction _AvatarGroup(\n  {\n    children,\n    className,\n    maxVisibleChildren = 3,\n    size = 'medium',\n    testId = 'cf-ui-avatar-group',\n    variant = 'spaced',\n  }: AvatarGroupProps,\n  forwardedRef: React.Ref<HTMLDivElement>,\n) {\n  const styles = getAvatarGroupStyles(size);\n\n  const childrenArray = React.Children.toArray(children);\n  const childrenToRenderCount =\n    childrenArray.length > maxVisibleChildren\n      ? maxVisibleChildren - 1\n      : maxVisibleChildren;\n  const childrenToRender = childrenArray.slice(0, childrenToRenderCount);\n  const childrenInMenu = childrenArray.slice(childrenToRenderCount);\n\n  return (\n    <Stack\n      flexDirection=\"row\"\n      testId={testId}\n      ref={forwardedRef}\n      className={cx(className, {\n        [styles.groupStacked]: variant === 'stacked',\n        [styles.groupSpaced]: variant === 'spaced',\n      })}\n    >\n      {childrenToRender.map((child, index) => {\n        const zIndex = childrenToRender.length - index;\n\n        return React.cloneElement(child as React.ReactElement, {\n          key: `avatar-rendered-${index}`,\n          size: size,\n          className: cx((child as React.ReactElement).props.className, {\n            [styles.avatarStacked]: variant === 'stacked',\n          }),\n          style: {\n            zIndex,\n          },\n        });\n      })}\n      {childrenInMenu.length > 0 && (\n        <Menu placement=\"bottom-end\">\n          <Menu.Trigger>\n            <button\n              type=\"button\"\n              className={cx(\n                {\n                  [styles.avatarStacked]: variant === 'stacked',\n                },\n                styles.moreAvatarsBtn,\n              )}\n            >\n              +{childrenInMenu.length}\n            </button>\n          </Menu.Trigger>\n          <Menu.List>\n            {childrenInMenu.map((child, index) => {\n              return (\n                <Menu.Item\n                  className={styles.moreAvatarsItem}\n                  key={`avatar-${index}`}\n                >\n                  {React.cloneElement(child as React.ReactElement, {\n                    key: `avatar-menuitem-${index}`,\n                    size: 'tiny',\n                    tooltipProps: undefined,\n                  })}\n                  {(child as React.ReactElement).props.alt}\n                </Menu.Item>\n              );\n            })}\n          </Menu.List>\n        </Menu>\n      )}\n    </Stack>\n  );\n}\nexport const AvatarGroup = forwardRef(_AvatarGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type AvatarProps } from '../Avatar/';\nimport { convertSizeToPixels } from '../Avatar/Avatar.styles';\n\nexport const getAvatarGroupStyles = (size: AvatarProps['size']) => {\n  return {\n    groupSpaced: css({\n      gap: tokens.spacing2Xs,\n    }),\n    groupStacked: css({\n      gap: 0,\n      '> :not(:first-child)': {\n        marginLeft: `-${tokens.spacing2Xs}`,\n      },\n    }),\n    avatarStacked: css({\n      position: 'relative',\n      boxShadow: `0px 0px 0px 1px ${tokens.colorWhite}`,\n    }),\n    moreAvatarsBtn: css({\n      cursor: 'pointer',\n      backgroundColor: tokens.colorWhite,\n      color: tokens.gray600,\n      fontSize: tokens.fontSizeS,\n      border: 'none',\n      boxShadow: `0px 0px 0px 1px ${tokens.gray200} inset`,\n      borderRadius: '99999999em',\n      height: convertSizeToPixels(size),\n      width: convertSizeToPixels(size),\n      overflow: 'hidden',\n      zIndex: 0,\n    }),\n    moreAvatarsItem: css({\n      cursor: 'default',\n    }),\n  };\n};\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}