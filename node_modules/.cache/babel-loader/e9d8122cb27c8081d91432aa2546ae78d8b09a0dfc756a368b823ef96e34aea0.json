{"ast":null,"code":"import N, { useRef, useLayoutEffect, useEffect } from 'react';\nimport { Box } from '@contentful/f36-core';\nimport i from '@contentful/f36-tokens';\nimport { cx, css } from 'emotion';\nvar E = Object.defineProperty,\n  L = Object.defineProperties;\nvar b = Object.getOwnPropertyDescriptors;\nvar r = Object.getOwnPropertySymbols;\nvar P = Object.prototype.hasOwnProperty,\n  g = Object.prototype.propertyIsEnumerable;\nvar y = (o, s, t) => s in o ? E(o, s, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : o[s] = t,\n  h = (o, s) => {\n    for (var t in s || (s = {})) P.call(s, t) && y(o, t, s[t]);\n    if (r) for (var t of r(s)) g.call(s, t) && y(o, t, s[t]);\n    return o;\n  },\n  c = (o, s) => L(o, b(s));\nvar C = (o, s) => {\n  var t = {};\n  for (var l in o) P.call(o, l) && s.indexOf(l) < 0 && (t[l] = o[l]);\n  if (o != null && r) for (var l of r(o)) s.indexOf(l) < 0 && g.call(o, l) && (t[l] = o[l]);\n  return t;\n};\nvar d = ({\n  className: o\n}) => ({\n  collapseWrapper: cx(css({\n    boxSizing: \"border-box\",\n    overflow: \"hidden\"\n  }), o)\n});\nvar R = S => {\n  var p = S,\n    {\n      children: o,\n      className: s,\n      isExpanded: t = !1,\n      testId: l = \"cf-collapse\"\n    } = p,\n    x = C(p, [\"children\", \"className\", \"isExpanded\", \"testId\"]);\n  let n = useRef(null),\n    u = d({\n      className: s\n    }),\n    m = useRef(!1),\n    f = () => {\n      let {\n        current: e\n      } = n;\n      return e ? `${e.scrollHeight}px` : \"0px\";\n    },\n    a = () => {\n      let {\n        current: e\n      } = n;\n      t ? e == null || e.style.setProperty(\"height\", \"auto\") : (e == null || e.style.removeProperty(\"pointer-events\"), e == null || e.style.setProperty(\"display\", \"none\"));\n    };\n  return useLayoutEffect(() => {\n    let {\n      current: e\n    } = n;\n    m.current ? (e == null || e.style.setProperty(\"transition\", `height ${i.transitionDurationDefault} ${i.transitionEasingDefault}, padding ${i.transitionDurationDefault} ${i.transitionEasingDefault}`), requestAnimationFrame(function () {\n      t ? (e == null || e.style.setProperty(\"display\", \"block\"), e == null || e.style.removeProperty(\"pointer-events\")) : e == null || e.style.setProperty(\"pointer-events\", \"none\");\n      let D = t ? \"0px\" : f(),\n        H = t ? f() : \"0px\";\n      e == null || e.style.setProperty(\"height\", D), requestAnimationFrame(function () {\n        e == null || e.style.setProperty(\"height\", H);\n      });\n    })) : (a(), m.current = !0);\n  }, [t]), useEffect(() => {\n    let {\n      current: e\n    } = n;\n    return e == null || e.addEventListener(\"transitionend\", a), () => {\n      e == null || e.removeEventListener(\"transitionend\", a);\n    };\n  }, [t]), N.createElement(Box, c(h({}, x), {\n    testId: l,\n    role: \"region\",\n    \"aria-hidden\": !t,\n    className: u.collapseWrapper,\n    ref: n\n  }), o);\n};\nexport { R as Collapse };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-collapse/src/Collapse.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-collapse/src/Collapse.styles.ts"],"sourcesContent":["import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport {\n  Box,\n  type CommonProps,\n  type PropsWithHTMLElement,\n} from '@contentful/f36-core';\nimport tokens from '@contentful/f36-tokens';\nimport { getCollapseStyles } from './Collapse.styles';\n\ninterface CollapseInternalProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * string for additional classNames\n   */\n  className?: string;\n}\n\nexport type CollapseProps = PropsWithHTMLElement<CollapseInternalProps, 'div'>;\n\nexport const Collapse = ({\n  children,\n  className,\n  isExpanded = false,\n  testId = 'cf-collapse',\n  ...otherProps\n}: CollapseProps) => {\n  const panelEl = useRef<HTMLDivElement>(null);\n  const styles = getCollapseStyles({ className });\n  const isMounted = useRef(false);\n\n  const getPanelContentHeight = () => {\n    const { current } = panelEl;\n\n    if (!current) {\n      // to keep the function return type as string only and\n      // not overcomplicate things with non-nullable checks\n      return '0px';\n    }\n\n    return `${current.scrollHeight}px`;\n  };\n\n  const handleTransitionEnd = () => {\n    const { current } = panelEl;\n    if (isExpanded) {\n      current?.style.setProperty('height', 'auto');\n    } else {\n      current?.style.removeProperty('pointer-events');\n      current?.style.setProperty('display', 'none');\n    }\n  };\n\n  useLayoutEffect(() => {\n    const { current } = panelEl;\n    // We only want to call requestAnimationFrame after the initial render when the component is mounted\n    if (isMounted.current) {\n      // We set the transition property after the first render\n      // to avoid animating the initial render\n      current?.style.setProperty(\n        'transition',\n        `height ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}, padding ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      );\n\n      requestAnimationFrame(function () {\n        if (isExpanded) {\n          // Overwrite none display to see expanding transition\n          current?.style.setProperty('display', 'block');\n          current?.style.removeProperty('pointer-events');\n        } else {\n          // Don't allow interaction while collapsing\n          current?.style.setProperty('pointer-events', 'none');\n        }\n        // Calculate panel height after removing none display\n        const fromHeight = isExpanded ? '0px' : getPanelContentHeight();\n        const toHeight = isExpanded ? getPanelContentHeight() : '0px';\n        current?.style.setProperty('height', fromHeight);\n\n        requestAnimationFrame(function () {\n          current?.style.setProperty('height', toHeight);\n        });\n      });\n    } else {\n      // We call the handleTransitionEnd on mount to set the correct initial styles\n      handleTransitionEnd();\n      isMounted.current = true;\n    }\n  }, [isExpanded]);\n\n  useEffect(() => {\n    const { current } = panelEl;\n\n    current?.addEventListener('transitionend', handleTransitionEnd);\n    return () => {\n      current?.removeEventListener('transitionend', handleTransitionEnd);\n    };\n  }, [isExpanded]);\n\n  return (\n    <Box\n      {...otherProps}\n      testId={testId}\n      role=\"region\"\n      aria-hidden={!isExpanded}\n      className={styles.collapseWrapper}\n      ref={panelEl}\n    >\n      {children}\n    </Box>\n  );\n};\n","import { css, cx } from 'emotion';\n\nexport const getCollapseStyles = ({ className }: { className?: string }) => {\n  return {\n    collapseWrapper: cx(\n      css({\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n      }),\n      className,\n    ),\n  };\n};\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}