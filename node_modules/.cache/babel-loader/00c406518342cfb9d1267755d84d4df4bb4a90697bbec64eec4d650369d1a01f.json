{"ast":null,"code":"import _, { createContext, forwardRef, useRef, useEffect, useCallback, useState, useContext } from 'react';\nimport { Text } from '@contentful/f36-typography';\nimport { useDensity } from '@contentful/f36-utils';\nimport { Flex, useId, Stack, Box } from '@contentful/f36-core';\nimport { ErrorCircleOutlineIcon, ChevronDownIcon, DoneIcon, CloseIcon, MinusIcon } from '@contentful/f36-icons';\nimport { cx, css } from 'emotion';\nimport a from '@contentful/f36-tokens';\nvar Io = Object.defineProperty,\n  ko = Object.defineProperties;\nvar So = Object.getOwnPropertyDescriptors;\nvar J = Object.getOwnPropertySymbols;\nvar Se = Object.prototype.hasOwnProperty,\n  Te = Object.prototype.propertyIsEnumerable;\nvar ke = (e, o, t) => o in e ? Io(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  s = (e, o) => {\n    for (var t in o || (o = {})) Se.call(o, t) && ke(e, t, o[t]);\n    if (J) for (var t of J(o)) Te.call(o, t) && ke(e, t, o[t]);\n    return e;\n  },\n  m = (e, o) => ko(e, So(o));\nvar l = (e, o) => {\n  var t = {};\n  for (var r in e) Se.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && J) for (var r of J(e)) o.indexOf(r) < 0 && Te.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar Ee = () => {},\n  le = createContext(void 0),\n  Ro = () => useContext(le),\n  P = e => {\n    var t, r, i, n, p;\n    let o = Ro();\n    return o ? {\n      isDisabled: (t = e.isDisabled) != null ? t : o.isDisabled,\n      isInvalid: (r = e.isInvalid) != null ? r : o.isInvalid,\n      isReadOnly: (i = e.isReadOnly) != null ? i : o.isReadOnly,\n      isRequired: (n = e.isRequired) != null ? n : o.isRequired,\n      id: (p = e.id) != null ? p : o.id,\n      maxLength: o.maxLength,\n      inputValue: o.inputValue,\n      setMaxLength: o.setMaxLength || Ee,\n      setInputValue: o.setInputValue || Ee\n    } : e;\n  };\nvar D = _.forwardRef((r, t) => {\n  var i = r,\n    {\n      testId: e = \"cf-ui-help-text\"\n    } = i,\n    o = l(i, [\"testId\"]);\n  let {\n      id: n\n    } = P({}),\n    p = useDensity();\n  return _.createElement(Text, m(s({\n    as: \"p\",\n    fontColor: \"gray500\",\n    fontSize: p === \"high\" ? \"fontSizeMHigh\" : \"fontSizeM\",\n    lineHeight: p === \"high\" ? \"lineHeightMHigh\" : \"lineHeightM\",\n    testId: e,\n    id: `${n}-helptext`,\n    marginTop: \"spacingXs\"\n  }, o), {\n    ref: t\n  }));\n});\nD.displayName = \"HelpText\";\nvar $ = forwardRef((i, r) => {\n  var n = i,\n    {\n      children: e,\n      testId: o = \"cf-ui-validation-message\"\n    } = n,\n    t = l(n, [\"children\", \"testId\"]);\n  let {\n      id: p\n    } = P({}),\n    c = useDensity();\n  return _.createElement(Flex, m(s({\n    marginTop: \"spacing2Xs\"\n  }, t), {\n    ref: r,\n    testId: o,\n    alignItems: \"center\",\n    id: p ? `${p}-validation` : void 0,\n    \"aria-live\": \"assertive\"\n  }), _.createElement(Flex, {\n    marginRight: c === \"high\" ? \"spacing2Xs\" : \"spacingXs\"\n  }, _.createElement(ErrorCircleOutlineIcon, {\n    size: c === \"high\" ? \"tiny\" : \"small\",\n    variant: \"negative\",\n    \"aria-hidden\": \"true\"\n  })), _.createElement(Text, {\n    as: \"p\",\n    fontColor: \"red600\",\n    fontSize: c === \"high\" ? \"fontSizeMHigh\" : \"fontSizeM\",\n    lineHeight: c === \"high\" ? \"lineHeightMHigh\" : \"lineHeightM\"\n  }, e));\n});\n$.displayName = \"ValidationMessage\";\nvar me = ({\n    isDisabled: e\n  }) => ({\n    alignItems: \"center\",\n    background: e ? a.gray300 : a.colorWhite,\n    border: `2px solid ${a.gray300}`,\n    boxSizing: \"border-box\",\n    display: \"inline-flex\",\n    height: a.spacingM,\n    justifyContent: \"center\",\n    width: a.spacingM\n  }),\n  wo = ({\n    isDisabled: e\n  }) => {\n    let o = m(s({}, me({\n      isDisabled: e\n    })), {\n      backgroundColor: e ? a.gray300 : a.colorWhite,\n      borderRadius: a.borderRadiusSmall,\n      \"& svg\": {\n        fill: e ? a.gray300 : a.colorWhite\n      },\n      \"input:indeterminate + &, input:checked + &\": {\n        backgroundColor: e ? a.gray300 : a.blue600,\n        borderColor: e ? a.gray300 : a.blue600,\n        \"& svg\": {\n          fill: e ? a.gray600 : a.colorWhite\n        }\n      }\n    });\n    return css(o);\n  },\n  Go = ({\n    isDisabled: e\n  }) => {\n    let o = {\n        content: '\"\"',\n        borderRadius: \"50%\",\n        backgroundColor: e ? a.gray300 : a.colorWhite,\n        width: a.borderRadiusMedium,\n        height: a.borderRadiusMedium\n      },\n      t = m(s({}, me({\n        isDisabled: e\n      })), {\n        backgroundColor: e ? a.gray300 : a.colorWhite,\n        borderRadius: \"50%\",\n        \"&:before\": s({}, o),\n        \"input:checked + &\": {\n          backgroundColor: e ? a.gray300 : a.blue600,\n          borderColor: e ? a.gray300 : a.blue600,\n          \"&:before\": {\n            backgroundColor: e ? a.gray600 : a.colorWhite\n          }\n        }\n      });\n    return css(t);\n  },\n  Oo = ({\n    isDisabled: e,\n    size: o\n  }) => {\n    let t = o === \"small\" ? {\n        height: a.spacingM,\n        width: a.spacingXl,\n        \"&:before\": {\n          height: a.spacingS,\n          width: a.spacingS\n        },\n        \"input:checked + &:before\": {\n          transform: `translateX(${a.spacingM})`\n        }\n      } : {\n        height: \"20px\",\n        width: \"40px\",\n        \"&:before\": {\n          height: a.spacingM,\n          width: a.spacingM\n        },\n        \"input:checked + &:before\": {\n          transform: \"translateX(20px)\"\n        }\n      },\n      r = m(s({}, me({\n        isDisabled: e\n      })), {\n        background: a.gray600,\n        borderColor: a.gray600,\n        borderRadius: a.borderRadiusSmall,\n        justifyContent: \"space-around\",\n        position: \"relative\",\n        flexShrink: 0,\n        \"&:before\": {\n          background: a.colorWhite,\n          borderRadius: `calc(${a.borderRadiusSmall}/2)`,\n          content: '\"\"',\n          left: 0,\n          position: \"absolute\",\n          transition: `transform ${a.transitionEasingDefault} ${a.transitionDurationDefault}`\n        },\n        \"input:checked + &\": {\n          background: a.blue600,\n          borderColor: a.blue600\n        }\n      }),\n      i = {\n        \"&, input:checked + &\": {\n          background: a.gray200,\n          borderColor: a.gray200\n        },\n        \"&:before\": {\n          background: a.gray400\n        },\n        \"& svg\": {\n          fill: a.gray400\n        }\n      };\n    return css([r, t, e && i]);\n  },\n  zo = e => {\n    let {\n      isDisabled: o,\n      size: t\n    } = e;\n    return {\n      radio: Go({\n        isDisabled: o\n      }),\n      checkbox: wo({\n        isDisabled: o\n      }),\n      switch: Oo({\n        isDisabled: o,\n        size: t\n      })\n    };\n  },\n  Fe = zo;\nvar He = e => {\n  let {\n      type: o,\n      isIndeterminate: t,\n      isDisabled: r,\n      size: i = \"medium\"\n    } = e,\n    n = Fe({\n      isDisabled: r,\n      size: i\n    });\n  return o === \"switch\" ? _.createElement(\"span\", {\n    className: n.switch\n  }, _.createElement(DoneIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  }), _.createElement(CloseIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  })) : _.createElement(\"span\", {\n    className: n[o]\n  }, o === \"checkbox\" && (t ? _.createElement(MinusIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  }) : _.createElement(DoneIcon, {\n    size: \"tiny\",\n    variant: \"white\"\n  })));\n};\nvar Be = e => e === \"small\" ? {\n    height: a.spacingM,\n    width: a.spacingXl\n  } : {\n    height: \"20px\",\n    width: \"40px\"\n  },\n  _o = ({\n    size: e,\n    type: o,\n    density: t\n  }) => {\n    let r = a.spacingM;\n    return o === \"switch\" && (r = Be(e).width), {\n      marginLeft: `calc(${r} + ${a.spacingXs})`,\n      marginTop: 0,\n      fontSize: t === \"high\" ? a.fontSizeMHigh : a.fontSizeM,\n      lineHeight: t === \"high\" ? a.lineHeightMHigh : a.lineHeightM\n    };\n  },\n  Vo = ({\n    isDisabled: e,\n    type: o,\n    size: t,\n    density: r\n  }) => ({\n    wrapper: css({\n      alignItems: \"center\",\n      display: \"inline-flex\",\n      position: \"relative\",\n      margin: \"0\",\n      columnGap: a.spacingXs\n    }),\n    input: css([{\n      cursor: e ? \"not-allowed\" : \"pointer\",\n      height: a.spacingM,\n      margin: 0,\n      opacity: 0,\n      position: \"absolute\",\n      width: a.spacingM,\n      zIndex: a.zIndexDefault,\n      \"+ span\": {\n        minWidth: a.spacingM\n      },\n      \"&:focus\": {\n        outline: \"none\",\n        \"& + span\": {\n          boxShadow: a.glowPrimary\n        }\n      },\n      \"&:focus:not(:focus-visible) + span\": {\n        boxShadow: \"unset\"\n      },\n      \"&:focus-visible + span\": {\n        boxShadow: a.glowPrimary\n      }\n    }, o === \"switch\" && Be(t)]),\n    helpText: css(_o({\n      size: t,\n      type: o,\n      density: r\n    }))\n  }),\n  ve = Vo;\nfunction we(e, o) {\n  let Pe = e,\n    {\n      isChecked: t = void 0,\n      onChange: r,\n      onFocus: i,\n      onBlur: n,\n      onKeyDown: p,\n      type: c = \"checkbox\",\n      value: d,\n      isDisabled: x,\n      isIndeterminate: y,\n      isInvalid: b,\n      isRequired: g = !1,\n      id: C,\n      willBlurOnEsc: S = !0,\n      testId: I = \"cf-ui-base-checkbox\",\n      className: h = \"\",\n      defaultChecked: T = void 0,\n      name: H,\n      inputProps: k = {},\n      children: M,\n      \"aria-label\": G,\n      size: B = \"medium\",\n      helpText: R\n    } = Pe,\n    E = l(Pe, [\"isChecked\", \"onChange\", \"onFocus\", \"onBlur\", \"onKeyDown\", \"type\", \"value\", \"isDisabled\", \"isIndeterminate\", \"isInvalid\", \"isRequired\", \"id\", \"willBlurOnEsc\", \"testId\", \"className\", \"defaultChecked\", \"name\", \"inputProps\", \"children\", \"aria-label\", \"size\", \"helpText\"]),\n    z = useDensity(),\n    v = useRef(null),\n    w = o || v,\n    {\n      id: se\n    } = P({});\n  useEffect(() => {\n    w.current && (w.current.indeterminate = y);\n  }, [y, w]);\n  let W = ve({\n      isDisabled: x,\n      type: c,\n      size: B,\n      density: z\n    }),\n    pe = useCallback(O => {\n      O.persist(), i && i(O);\n    }, [i]),\n    ae = useCallback(O => {\n      O.persist(), n && n(O);\n    }, [n]),\n    K = useCallback(O => {\n      var Ie;\n      O.persist(), S && O.key === \"Escape\" && ((Ie = w == null ? void 0 : w.current) == null || Ie.blur()), p && p(O);\n    }, [S, p, w]),\n    Z = typeof t !== void 0 ? t : T,\n    F = C ? `${C}-helptext` : void 0,\n    Po = b ? `${se}-validation` : R ? F : void 0;\n  return _.createElement(Flex, {\n    alignItems: \"flex-start\",\n    flexDirection: \"column\",\n    className: h\n  }, _.createElement(Text, s({\n    as: \"label\",\n    fontColor: \"gray900\",\n    fontWeight: \"fontWeightMedium\",\n    fontSize: z === \"high\" ? \"fontSizeMHigh\" : \"fontSizeM\",\n    lineHeight: z === \"high\" ? \"lineHeightMHigh\" : \"lineHeightM\",\n    className: W.wrapper,\n    htmlFor: C,\n    testId: I\n  }, E), _.createElement(\"input\", m(s({}, k), {\n    \"aria-label\": G,\n    checked: t,\n    defaultChecked: T,\n    className: W.input,\n    type: c === \"switch\" ? \"checkbox\" : c,\n    onChange: r,\n    onFocus: pe,\n    onBlur: ae,\n    onKeyDown: K,\n    value: d,\n    disabled: x,\n    role: c,\n    \"aria-checked\": y ? \"mixed\" : Z,\n    ref: w,\n    required: g,\n    \"aria-required\": g ? \"true\" : void 0,\n    \"aria-invalid\": b ? \"true\" : void 0,\n    \"aria-describedby\": Po,\n    id: C,\n    name: H\n  })), _.createElement(He, {\n    type: c,\n    isDisabled: x,\n    isIndeterminate: y,\n    size: B\n  }), M), R && _.createElement(D, {\n    id: F,\n    className: W.helpText\n  }, R));\n}\nwe.displayName = \"BaseCheckbox\";\nvar N = _.forwardRef(we);\nvar fe = createContext(void 0),\n  Ko = () => useContext(fe),\n  Y = e => {\n    var p, c, d;\n    let o = Ko();\n    if (!o) return e;\n    let t, r;\n    return o.type === \"checkbox\" && (t = o.value === void 0 || (p = o.value) == null ? void 0 : p.includes(e.value), r = t !== void 0 || (c = o.defaultValue) == null ? void 0 : c.includes(e.value)), o.type === \"radio\" && (t = o.value === void 0 ? void 0 : o.value === e.value, r = t !== void 0 ? void 0 : o.defaultValue === e.value), {\n      defaultChecked: r,\n      isChecked: t,\n      onBlur: x => {\n        e.onBlur && e.onBlur(x), o.onBlur && o.onBlur(x);\n      },\n      onChange: x => {\n        e.onChange && e.onChange(x), o.onChange && o.onChange(x);\n      },\n      name: (d = o.name) != null ? d : e.name,\n      value: e.value\n    };\n  };\nvar Jo = (e, o) => {\n    let R = e,\n      {\n        testId: t = \"cf-ui-checkbox\",\n        id: r,\n        isDisabled: i,\n        isRequired: n,\n        isInvalid: p,\n        children: c,\n        onBlur: d,\n        onChange: x,\n        defaultChecked: y,\n        isChecked: b,\n        value: g,\n        name: C\n      } = R,\n      S = l(R, [\"testId\", \"id\", \"isDisabled\", \"isRequired\", \"isInvalid\", \"children\", \"onBlur\", \"onChange\", \"defaultChecked\", \"isChecked\", \"value\", \"name\"]),\n      I = useId(r, \"checkbox\"),\n      h = Y({\n        onBlur: d,\n        onChange: x,\n        value: g,\n        defaultChecked: y,\n        isChecked: b,\n        name: C\n      }),\n      E = P({\n        id: I,\n        isDisabled: i,\n        isInvalid: p,\n        isRequired: n\n      }),\n      B = l(E, [\"inputValue\", \"setInputValue\", \"maxLength\", \"setMaxLength\", \"isReadOnly\"]);\n    return _.createElement(N, m(s(s(s({}, B), h), S), {\n      type: \"checkbox\",\n      testId: t,\n      ref: o\n    }), c);\n  },\n  Oe = _.forwardRef(Jo);\nvar Yo = (e, o) => {\n    let p = e,\n      {\n        children: t,\n        className: r,\n        testId: i = \"cf-ui-base-checkbox-group\"\n      } = p,\n      n = l(p, [\"children\", \"className\", \"testId\"]);\n    return _.createElement(fe.Provider, {\n      value: n\n    }, _.createElement(Stack, {\n      ref: o,\n      testId: i,\n      className: r,\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      spacing: \"spacingXs\"\n    }, t));\n  },\n  ee = _.forwardRef(Yo);\nvar et = (e, o) => {\n    let n = e,\n      {\n        children: t,\n        testId: r = \"cf-ui-checkbox-group\"\n      } = n,\n      i = l(n, [\"children\", \"testId\"]);\n    return _.createElement(ee, s({\n      ref: o,\n      testId: r,\n      type: \"checkbox\"\n    }, i), t);\n  },\n  De = _.forwardRef(et);\nvar Ne = Oe;\nNe.Group = De;\nvar rt = \"div\";\nfunction Ve(b, y) {\n  var g = b,\n    {\n      as: e,\n      isInvalid: o,\n      isRequired: t,\n      isDisabled: r,\n      isReadOnly: i,\n      children: n,\n      marginBottom: p = \"spacingL\",\n      id: c,\n      testId: d = \"cf-ui-form-control\"\n    } = g,\n    x = l(g, [\"as\", \"isInvalid\", \"isRequired\", \"isDisabled\", \"isReadOnly\", \"children\", \"marginBottom\", \"id\", \"testId\"]);\n  let C = useId(c, \"field-\"),\n    [S, I] = useState(\"\"),\n    [h, T] = useState(0),\n    H = e === \"fieldset\" ? void 0 : \"group\",\n    k = e || rt,\n    M = {\n      id: C,\n      isRequired: t,\n      isDisabled: r,\n      isInvalid: o,\n      isReadOnly: i,\n      inputValue: S,\n      setInputValue: I,\n      maxLength: h,\n      setMaxLength: T\n    };\n  return _.createElement(le.Provider, {\n    value: M\n  }, _.createElement(Box, s({\n    as: k,\n    ref: y,\n    role: H,\n    testId: d,\n    marginBottom: p\n  }, x), n));\n}\nVe.displayName = \"FormControl\";\nvar Ae = _.forwardRef(Ve);\nfunction $e() {\n  return {\n    root: css({\n      display: \"inline-block\",\n      fontWeight: a.fontWeightMedium\n    }),\n    indicator: css({\n      color: a.gray500,\n      fontWeight: a.fontWeightNormal,\n      marginLeft: a.spacing2Xs\n    })\n  };\n}\nvar at = \"label\";\nfunction qe(d, c) {\n  var x = d,\n    {\n      as: e,\n      children: o,\n      className: t,\n      isRequired: r,\n      requiredText: i = \"required\",\n      testId: n = \"cf-ui-form-label\"\n    } = x,\n    p = l(x, [\"as\", \"children\", \"className\", \"isRequired\", \"requiredText\", \"testId\"]);\n  let y = useDensity(),\n    b = $e(),\n    g = P({\n      isRequired: r\n    }),\n    C = g.id ? g.id + \"-label\" : void 0,\n    S = e !== \"legend\" ? {\n      htmlFor: p.htmlFor || g.id\n    } : {};\n  return _.createElement(Text, m(s(m(s({\n    as: e || at,\n    marginBottom: \"spacingXs\"\n  }, p), {\n    fontColor: \"gray900\",\n    id: C\n  }), S), {\n    className: cx(b.root, t),\n    ref: c,\n    testId: n,\n    fontSize: y === \"high\" ? \"fontSizeMHigh\" : \"fontSizeM\",\n    lineHeight: y === \"high\" ? \"lineHeightMHigh\" : \"lineHeightM\"\n  }), o, g.isRequired && _.createElement(\"span\", {\n    className: b.indicator\n  }, \"(\", i, \")\"));\n}\nqe.displayName = \"FormLabel\";\nvar te = forwardRef(qe);\nfunction Ue() {\n  return {\n    root: css({\n      flexShrink: 0,\n      paddingLeft: a.spacingM,\n      textAlign: \"right\"\n    })\n  };\n}\nvar X = forwardRef((i, r) => {\n  var n = i,\n    {\n      testId: e = \"cf-ui-counter\",\n      className: o\n    } = n,\n    t = l(n, [\"testId\", \"className\"]);\n  let {\n      maxLength: p,\n      inputValue: c\n    } = P({}),\n    d = Ue();\n  return !!p && _.createElement(Text, m(s({\n    as: \"p\",\n    fontColor: \"gray700\",\n    fontSize: \"fontSizeM\",\n    testId: e,\n    marginTop: \"spacingXs\"\n  }, t), {\n    className: cx(d.root, o),\n    ref: r\n  }), c.length, \" / \", p);\n});\nX.displayName = \"Counter\";\nvar q = Ae;\nq.Label = te;\nq.ValidationMessage = $;\nq.HelpText = D;\nq.Counter = X;\nvar ht = (e, o) => {\n    let R = e,\n      {\n        testId: t = \"cf-ui-radio-button\",\n        id: r,\n        isDisabled: i,\n        isInvalid: n,\n        isRequired: p,\n        children: c,\n        onBlur: d,\n        onChange: x,\n        defaultChecked: y,\n        isChecked: b,\n        value: g,\n        name: C\n      } = R,\n      S = l(R, [\"testId\", \"id\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"children\", \"onBlur\", \"onChange\", \"defaultChecked\", \"isChecked\", \"value\", \"name\"]),\n      I = useId(r, \"radio\"),\n      h = Y({\n        onBlur: d,\n        onChange: x,\n        value: g,\n        defaultChecked: y,\n        isChecked: b,\n        name: C\n      }),\n      E = P({\n        id: I,\n        isDisabled: i,\n        isInvalid: n,\n        isRequired: p\n      }),\n      B = l(E, [\"inputValue\", \"setInputValue\", \"maxLength\", \"setMaxLength\", \"isReadOnly\"]);\n    return _.createElement(N, m(s(s(s({}, B), S), h), {\n      type: \"radio\",\n      testId: t,\n      ref: o\n    }), c);\n  },\n  Ke = _.forwardRef(ht);\nvar gt = (e, o) => {\n    let n = e,\n      {\n        children: t,\n        testId: r = \"cf-ui-radio-group\"\n      } = n,\n      i = l(n, [\"children\", \"testId\"]);\n    return _.createElement(ee, s({\n      ref: o,\n      testId: r,\n      type: \"radio\"\n    }, i), t);\n  },\n  Je = _.forwardRef(gt);\nvar Qe = Ke;\nQe.Group = Je;\nvar yt = ({\n    size: e,\n    density: o\n  }) => {\n    let t = o === \"high\";\n    return e === \"small\" ? {\n      padding: a.spacingXs,\n      minHeight: t ? a.spacingL : a.spacingXl,\n      maxHeight: t ? a.spacingL : a.spacingXl\n    } : {\n      padding: t ? a.spacingXs : `10px ${a.spacingS}`,\n      minHeight: t ? a.spacingXl : \"40px\",\n      maxHeight: t ? a.spacingXl : \"40px\"\n    };\n  },\n  Ye = ({\n    isDisabled: e,\n    isInvalid: o,\n    zIndexBase: t = a.zIndexDefault\n  }) => e || o ? t + 1 : t,\n  bt = ({\n    isDisabled: e,\n    isInvalid: o\n  }) => e ? {\n    borderColor: a.gray300,\n    boxShadow: \"none\"\n  } : o ? {\n    borderColor: a.red600,\n    boxShadow: a.glowNegative\n  } : {},\n  Ct = ({\n    as: e,\n    isDisabled: o,\n    isInvalid: t,\n    size: r,\n    resize: i,\n    density: n = \"low\"\n  }) => {\n    let p = {\n      low: {\n        borderRadius: a.borderRadiusMedium,\n        lineHeight: a.lineHeightM,\n        fontSize: a.fontSizeM\n      },\n      high: {\n        borderRadius: a.borderRadiusSmall,\n        lineHeight: a.lineHeightMHigh,\n        fontSize: a.fontSizeMHigh\n      }\n    };\n    return {\n      rootComponentWithIcon: css({\n        position: \"relative\",\n        display: \"flex\",\n        width: \"100%\",\n        zIndex: Ye({\n          isDisabled: o,\n          isInvalid: t\n        })\n      }),\n      input: css(m(s(s({\n        outline: \"none\",\n        boxShadow: a.insetBoxShadowDefault,\n        boxSizing: \"border-box\",\n        backgroundColor: o ? a.gray100 : a.colorWhite,\n        border: `1px solid ${t ? a.red600 : a.gray300}`,\n        color: a.gray700,\n        fontFamily: a.fontStackPrimary,\n        margin: 0,\n        cursor: o ? \"not-allowed\" : \"auto\",\n        width: \"100%\",\n        zIndex: Ye({\n          isDisabled: o,\n          isInvalid: t\n        })\n      }, p[n]), e === \"textarea\" ? {\n        resize: i\n      } : yt({\n        size: r,\n        density: n\n      })), {\n        \"&::placeholder\": {\n          color: a.gray500\n        },\n        \"&:active, &:active:hover, &:focus\": s({\n          borderColor: a.blue600,\n          boxShadow: a.glowPrimary\n        }, bt({\n          isDisabled: o,\n          isInvalid: t\n        }))\n      })),\n      inputWithIcon: css({\n        paddingLeft: a.spacingXl\n      }),\n      iconPlaceholder: css({\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        top: 0,\n        bottom: 0,\n        left: r === \"small\" ? a.spacingXs : a.spacingS,\n        display: \"flex\",\n        alignItems: \"center\",\n        zIndex: a.zIndexDefault\n      })\n    };\n  },\n  eo = Ct;\nvar kt = \"input\";\nfunction to(e, o) {\n  let Z = e,\n    {\n      as: t = kt,\n      className: r,\n      isDisabled: i,\n      isReadOnly: n,\n      isRequired: p,\n      isInvalid: c,\n      id: d,\n      name: x,\n      onBlur: y,\n      onChange: b,\n      onFocus: g,\n      onKeyDown: C,\n      testId: S = \"cf-ui-base-input\",\n      type: I = \"text\",\n      value: h = void 0,\n      placeholder: T,\n      willBlurOnEsc: H = !0,\n      style: k,\n      icon: M,\n      defaultValue: G,\n      size: B = \"medium\",\n      resize: R = \"vertical\"\n    } = Z,\n    E = l(Z, [\"as\", \"className\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"name\", \"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"testId\", \"type\", \"value\", \"placeholder\", \"willBlurOnEsc\", \"style\", \"icon\", \"defaultValue\", \"size\", \"resize\"]),\n    z = useDensity(),\n    v = eo({\n      as: t,\n      isDisabled: i,\n      isInvalid: c,\n      size: B,\n      resize: R,\n      density: z\n    }),\n    w = useCallback(F => {\n      F.persist(), g && g(F);\n    }, [g]),\n    se = useCallback(F => {\n      F.persist(), !(i || n) && b && b(F);\n    }, [b, i, n]),\n    W = useCallback(F => {\n      F.persist(), C && C(F), F.nativeEvent.code === \"Escape\" && H && F.currentTarget.blur();\n    }, [H, C]),\n    pe = M && _.createElement(Box, {\n      as: \"span\",\n      className: v.iconPlaceholder\n    }, _.cloneElement(M, {\n      size: \"tiny\",\n      variant: \"muted\",\n      \"aria-hidden\": !0\n    })),\n    ae = t,\n    K = F => _.createElement(ae, m(s({}, E), {\n      value: h,\n      defaultValue: G,\n      \"data-test-id\": S,\n      style: k,\n      placeholder: T,\n      className: cx(v.input, F, r),\n      name: x,\n      type: I,\n      ref: o,\n      id: d,\n      readOnly: n,\n      \"aria-readonly\": n ? \"true\" : void 0,\n      \"aria-required\": p ? \"true\" : void 0,\n      \"aria-invalid\": c ? \"true\" : void 0,\n      \"aria-describedby\": d ? `${d}-${c ? \"validation\" : \"helptext\"}` : void 0,\n      disabled: i,\n      required: p,\n      onChange: se,\n      onBlur: y,\n      onKeyDown: W,\n      onFocus: w,\n      size: B\n    }));\n  return M ? _.createElement(Box, {\n    as: \"div\",\n    className: v.rootComponentWithIcon\n  }, K(v.inputWithIcon), pe) : K();\n}\nto.displayName = \"BaseInput\";\nvar j = _.forwardRef(to);\nvar Et = (I, S) => {\n    var h = I,\n      {\n        className: e,\n        testId: o = \"cf-ui-text-input\",\n        id: t,\n        value: r,\n        defaultValue: i,\n        onChange: n,\n        onFocus: p,\n        isInvalid: c,\n        isDisabled: d,\n        isRequired: x,\n        isReadOnly: y,\n        size: b = \"medium\",\n        maxLength: g\n      } = h,\n      C = l(h, [\"className\", \"testId\", \"id\", \"value\", \"defaultValue\", \"onChange\", \"onFocus\", \"isInvalid\", \"isDisabled\", \"isRequired\", \"isReadOnly\", \"size\", \"maxLength\"]);\n    let z = P({\n        id: t,\n        isInvalid: c,\n        isDisabled: d,\n        isRequired: x,\n        isReadOnly: y\n      }),\n      {\n        setMaxLength: T,\n        maxLength: H,\n        setInputValue: k,\n        inputValue: M\n      } = z,\n      G = l(z, [\"setMaxLength\", \"maxLength\", \"setInputValue\", \"inputValue\"]);\n    useEffect(() => {\n      var v;\n      g !== void 0 && typeof T == \"function\" && (T(g), k((v = r != null ? r : i) != null ? v : \"\"));\n    }, [g, T, k, i, r]);\n    let B = v => {\n        typeof k == \"function\" && k(v.target.value), n == null || n(v);\n      },\n      R = useRef(null),\n      E = S || R;\n    return _.createElement(j, m(s(s({\n      type: \"text\"\n    }, C), G), {\n      testId: o,\n      ref: E,\n      onChange: g ? B : n,\n      onFocus: p,\n      as: \"input\",\n      className: e,\n      value: r,\n      defaultValue: i,\n      size: b,\n      maxLength: g\n    }));\n  },\n  no = _.forwardRef(Et);\nvar Rt = ({\n    spacing: e,\n    density: o\n  }) => {\n    let t = o === \"high\" ? a.borderRadiusSmall : a.borderRadiusMedium,\n      r = o === \"high\" ? {\n        \"& svg\": {\n          width: \"14px\",\n          height: \"14px\"\n        }\n      } : {};\n    return e !== \"none\" ? css(s({\n      \"& button, & input\": {\n        borderRadius: t,\n        height: \"auto\"\n      }\n    }, r)) : css(m(s({\n      position: \"relative\",\n      \"& button, & input\": {\n        borderRadius: \"0 !important\",\n        height: \"auto\"\n      }\n    }, r), {\n      \"& > *\": {\n        marginRight: \"-1px !important\",\n        \"&:not(:focus), & button:not(:focus)\": {\n          boxShadow: \"none !important\"\n        },\n        \"&:first-child, &:first-child > input, &:first-child button\": {\n          borderBottomLeftRadius: `${t} !important`,\n          borderTopLeftRadius: `${t} !important`\n        },\n        \"&:last-child, &:last-child > input, &:last-child button\": {\n          borderBottomRightRadius: `${t} !important`,\n          borderTopRightRadius: `${t} !important`,\n          marginRight: \"0 !important\"\n        },\n        \"&:focus, &:focus-within\": {\n          zIndex: a.zIndexDefault + 1\n        }\n      }\n    }));\n  },\n  so = ({\n    spacing: e,\n    density: o\n  }) => ({\n    inputGroup: Rt({\n      spacing: e,\n      density: o\n    })\n  });\nvar Ht = (e, o) => {\n    let d = e,\n      {\n        children: t,\n        className: r,\n        spacing: i = \"none\"\n      } = d,\n      n = l(d, [\"children\", \"className\", \"spacing\"]),\n      p = useDensity(),\n      c = so({\n        spacing: i,\n        density: p\n      });\n    return _.createElement(Stack, m(s({}, n), {\n      spacing: i,\n      ref: o,\n      fullWidth: !0,\n      className: cx(c.inputGroup, r)\n    }), t);\n  },\n  ao = _.forwardRef(Ht);\nvar lo = no;\nlo.Group = ao;\nvar Bt = (e, o) => {\n    let I = e,\n      {\n        testId: t = \"cf-ui-switch\",\n        id: r,\n        isDisabled: i,\n        isInvalid: n,\n        isRequired: p,\n        children: c\n      } = I,\n      d = l(I, [\"testId\", \"id\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"children\"]),\n      h = P({\n        id: r,\n        isDisabled: i,\n        isInvalid: n,\n        isRequired: p\n      }),\n      S = l(h, [\"inputValue\", \"setInputValue\", \"maxLength\", \"setMaxLength\", \"isReadOnly\"]);\n    return _.createElement(N, m(s(s({}, S), d), {\n      testId: t,\n      type: \"switch\",\n      ref: o\n    }), c);\n  },\n  mo = _.forwardRef(Bt);\nvar uo = () => ({\n  root: css({\n    padding: `10px ${a.spacingS}`\n  }),\n  error: css({\n    \"&:focus\": {\n      borderColor: a.red600,\n      boxShadow: a.glowNegative\n    }\n  }),\n  disabled: css({\n    \"&:focus\": {\n      borderColor: a.gray300,\n      boxShadow: \"none\"\n    }\n  })\n});\nvar Gt = (S, C) => {\n    var I = S,\n      {\n        className: e,\n        isDisabled: o,\n        isInvalid: t,\n        isRequired: r,\n        isReadOnly: i,\n        onChange: n,\n        testId: p = \"cf-ui-textarea\",\n        id: c,\n        resize: d = \"vertical\",\n        maxLength: x,\n        value: y,\n        defaultValue: b\n      } = I,\n      g = l(I, [\"className\", \"isDisabled\", \"isInvalid\", \"isRequired\", \"isReadOnly\", \"onChange\", \"testId\", \"id\", \"resize\", \"maxLength\", \"value\", \"defaultValue\"]);\n    let h = uo(),\n      R = P({\n        id: c,\n        isInvalid: t,\n        isDisabled: o,\n        isRequired: r,\n        isReadOnly: i\n      }),\n      {\n        setMaxLength: T,\n        maxLength: H,\n        setInputValue: k,\n        inputValue: M\n      } = R,\n      G = l(R, [\"setMaxLength\", \"maxLength\", \"setInputValue\", \"inputValue\"]);\n    useEffect(() => {\n      var E;\n      x !== void 0 && typeof T == \"function\" && (T(x), k((E = y != null ? y : b) != null ? E : \"\"));\n    }, [b, x, k, T, y]);\n    let B = E => {\n      typeof k == \"function\" && k(E.target.value), n == null || n(E);\n    };\n    return _.createElement(j, m(s(s({}, g), G), {\n      defaultValue: b,\n      value: y,\n      testId: p,\n      as: \"textarea\",\n      ref: C,\n      className: cx(h.root, e, {\n        [h.disabled]: o,\n        [h.error]: t\n      }),\n      maxLength: x,\n      resize: d,\n      onChange: x ? B : n\n    }));\n  },\n  xo = _.forwardRef(Gt);\nvar Ce = r => {\n  var i = r,\n    {\n      testId: e = \"cf-ui-select-option\",\n      isDisabled: o\n    } = i,\n    t = l(i, [\"testId\", \"isDisabled\"]);\n  return _.createElement(\"option\", m(s({\n    \"data-test-id\": e\n  }, t), {\n    disabled: o\n  }));\n};\nfunction ho({\n  isInvalid: e,\n  isDisabled: o,\n  size: t,\n  density: r\n}) {\n  let i = () => {\n      switch (!0) {\n        case t === \"small\":\n          return {\n            padding: `${a.spacing2Xs} ${a.spacingL} ${a.spacing2Xs} ${a.spacingXs}`,\n            height: \"32px\"\n          };\n        case t === \"medium\" && r === \"high\":\n          return {\n            padding: `${a.spacing2Xs} ${a.spacingL} ${a.spacing2Xs} ${a.spacingXs}`,\n            height: \"32px\",\n            fontSize: a.fontSizeMHigh,\n            lineHeight: a.lineHeightMHigh,\n            borderRadius: a.borderRadiusSmall\n          };\n        case t === \"medium\" || r === \"low\":\n        default:\n          return {\n            padding: `10px ${a.spacingL} 10px ${a.spacingS}`,\n            height: \"40px\"\n          };\n      }\n    },\n    n = css({\n      width: \"100%\",\n      display: \"block\",\n      appearance: \"none\",\n      backgroundColor: a.colorWhite,\n      color: a.gray700,\n      fontSize: a.fontSizeM,\n      lineHeight: a.lineHeightM,\n      fontFamily: a.fontStackPrimary,\n      borderRadius: a.borderRadiusMedium,\n      boxShadow: a.insetBoxShadowDefault,\n      outline: \"none\",\n      border: `1px solid ${a.gray300}`,\n      cursor: \"pointer\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      \"&::placeholder\": {\n        color: a.gray500\n      },\n      \"&:focus\": {\n        outline: \"none\",\n        boxShadow: a.glowPrimary,\n        borderColor: a.blue500\n      },\n      \"&:-moz-focusring\": {\n        color: \"transparent\",\n        textShadow: \"0 0 0 #000\"\n      },\n      \"&::-ms-expand\": {\n        display: \"none\"\n      }\n    }),\n    p = css({\n      backgroundColor: a.gray100,\n      cursor: \"not-allowed\",\n      color: a.gray600,\n      \"&:focus, &:active\": {\n        borderColor: a.gray300\n      }\n    }),\n    c = css({\n      borderColor: o ? a.red300 : a.red600,\n      \"&:focus\": {\n        borderColor: a.red600,\n        boxShadow: a.glowNegative\n      }\n    });\n  return {\n    wrapper: css({\n      position: \"relative\",\n      display: \"block\",\n      width: \"auto\"\n    }),\n    select: css([n, i(), o && p, e && c]),\n    icon: css({\n      position: \"absolute\",\n      right: a.spacingXs,\n      top: \"50%\",\n      marginTop: \"-8px\",\n      pointerEvents: \"none\"\n    })\n  };\n}\nvar Vt = (S, C) => {\n    var I = S,\n      {\n        id: e,\n        children: o,\n        className: t,\n        isInvalid: r,\n        isDisabled: i,\n        isRequired: n,\n        testId: p = \"cf-ui-select\",\n        willBlurOnEsc: c = !0,\n        onKeyDown: d,\n        size: x = \"medium\",\n        value: y = void 0,\n        defaultValue: b = void 0\n      } = I,\n      g = l(I, [\"id\", \"children\", \"className\", \"isInvalid\", \"isDisabled\", \"isRequired\", \"testId\", \"willBlurOnEsc\", \"onKeyDown\", \"size\", \"value\", \"defaultValue\"]);\n    let h = P({\n        isDisabled: i,\n        isInvalid: r,\n        isRequired: n,\n        id: e\n      }),\n      T = useDensity(),\n      H = ho({\n        isDisabled: h.isDisabled,\n        isInvalid: h.isInvalid,\n        size: x,\n        density: T\n      }),\n      k = useCallback(M => {\n        M.nativeEvent.code === \"Escape\" && c && M.currentTarget.blur(), d && d(M);\n      }, [d, c]);\n    return _.createElement(\"div\", {\n      className: cx(H.wrapper, t)\n    }, _.createElement(\"select\", m(s({}, g), {\n      id: h.id,\n      \"data-test-id\": p,\n      className: H.select,\n      onKeyDown: k,\n      required: h.isRequired,\n      \"aria-required\": h.isRequired ? \"true\" : void 0,\n      \"aria-invalid\": h.isInvalid ? !0 : void 0,\n      \"aria-describedby\": h.id ? `${h.id}-${h.isInvalid ? \"validation\" : \"helptext\"}` : void 0,\n      disabled: h.isDisabled,\n      defaultValue: b,\n      value: y,\n      ref: C\n    }), o), _.createElement(ChevronDownIcon, {\n      className: H.icon,\n      variant: \"muted\"\n    }));\n  },\n  go = _.forwardRef(Vt);\nvar yo = go;\nyo.Option = Ce;\nfunction bo(n, i) {\n  var p = n,\n    {\n      children: e,\n      onSubmit: o,\n      testId: t = \"cf-ui-form-label\"\n    } = p,\n    r = l(p, [\"children\", \"onSubmit\", \"testId\"]);\n  let c = useCallback(d => {\n    d.preventDefault(), o && o(d);\n  }, [o]);\n  return _.createElement(\"form\", s({\n    ref: i,\n    \"data-test-id\": t,\n    onSubmit: c\n  }, r), e);\n}\nbo.displayName = \"Form\";\nvar Co = forwardRef(bo);\nexport { Ne as Checkbox, X as Counter, Co as Form, q as FormControl, te as FormLabel, D as HelpText, Ce as Option, Qe as Radio, yo as Select, mo as Switch, lo as TextInput, xo as Textarea, $ as ValidationMessage };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/HelpText/HelpText.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/FormControl/FormControlContext.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/ValidationMessage/ValidationMessage.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Checkbox/Checkbox.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckbox.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseCheckbox/GhostCheckbox.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseCheckbox/GhostCheckbox.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckbox.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckboxGroupContext.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Checkbox/CheckboxGroup.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseCheckbox/BaseCheckboxGroup.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Checkbox/CompoundCheckbox.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/FormControl/FormControl.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/FormLabel/FormLabel.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/FormLabel/FormLabel.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Counter/Counter.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Counter/Counter.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/FormControl/CompoundFormControl.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Radio/Radio.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Radio/RadioGroup.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Radio/CompoundRadio.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/TextInput/TextInput.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseInput/BaseInput.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/BaseInput/BaseInput.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/TextInput/input-group/InputGroup.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/TextInput/input-group/InputGroup.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/TextInput/CompoundTextInput.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Switch/Switch.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Textarea/Textarea.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Textarea/Textarea.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Select/SelectOption.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Select/Select.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Select/Select.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Select/CompoundSelect.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-forms/src/Form/Form.tsx"],"sourcesContent":["import React from 'react';\nimport type {\n  CommonProps,\n  MarginProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { useDensity } from '@contentful/f36-utils';\n\nexport interface HelpTextInternalProps extends CommonProps, MarginProps {\n  children: React.ReactNode;\n}\n\nexport type HelpTextProps = PropsWithHTMLElement<HelpTextInternalProps, 'p'>;\n\n/**\n * `HelpText` is a styled copy block with guidance, placed in the context of form components.\n */\n\nexport const HelpText = React.forwardRef<\n  HTMLParagraphElement,\n  ExpandProps<HelpTextProps>\n>(({ testId = 'cf-ui-help-text', ...otherProps }, ref) => {\n  const { id } = useFormControl({});\n  const density = useDensity();\n  return (\n    <Text\n      as=\"p\"\n      fontColor=\"gray500\"\n      fontSize={density === 'high' ? 'fontSizeMHigh' : 'fontSizeM'}\n      lineHeight={density === 'high' ? 'lineHeightMHigh' : 'lineHeightM'}\n      testId={testId}\n      id={`${id}-helptext`}\n      marginTop=\"spacingXs\"\n      {...otherProps}\n      ref={ref}\n    />\n  );\n});\n\nHelpText.displayName = 'HelpText';\n","import { createContext, useContext } from 'react';\nimport type { FormControlContextProps } from './types';\n\nconst noop = () => {\n  // do nothing\n};\n\nexport const FormControlContext = createContext<\n  FormControlContextProps | undefined\n>(undefined);\n\nexport const useFormControlContext = () => {\n  const context = useContext(FormControlContext);\n  return context;\n};\n\nexport const useFormControl = (\n  props: Partial<FormControlContextProps>,\n): FormControlContextProps => {\n  const context = useFormControlContext();\n  if (!context) {\n    return props;\n  }\n  return {\n    isDisabled: props.isDisabled ?? context.isDisabled,\n    isInvalid: props.isInvalid ?? context.isInvalid,\n    isReadOnly: props.isReadOnly ?? context.isReadOnly,\n    isRequired: props.isRequired ?? context.isRequired,\n    id: props.id ?? context.id,\n    maxLength: context.maxLength,\n    inputValue: context.inputValue,\n    setMaxLength: context.setMaxLength || noop,\n    setInputValue: context.setInputValue || noop,\n  };\n};\n","import React, { forwardRef } from 'react';\nimport {\n  Flex,\n  type CommonProps,\n  type MarginProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { ErrorCircleOutlineIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { useDensity } from '@contentful/f36-utils';\n\nexport interface ValidationMessageInternalProps\n  extends CommonProps,\n    MarginProps {\n  children: React.ReactNode;\n}\n\nexport type ValidationMessageProps = PropsWithHTMLElement<\n  ValidationMessageInternalProps,\n  'div'\n>;\n\nexport const ValidationMessage = forwardRef<\n  HTMLDivElement,\n  ExpandProps<ValidationMessageProps>\n>(({ children, testId = 'cf-ui-validation-message', ...otherProps }, ref) => {\n  const { id } = useFormControl({});\n  const density = useDensity();\n\n  return (\n    <Flex\n      marginTop=\"spacing2Xs\"\n      {...otherProps}\n      ref={ref}\n      testId={testId}\n      alignItems=\"center\"\n      id={id ? `${id}-validation` : undefined}\n      aria-live=\"assertive\"\n    >\n      <Flex marginRight={density === 'high' ? 'spacing2Xs' : 'spacingXs'}>\n        <ErrorCircleOutlineIcon\n          size={density === 'high' ? 'tiny' : 'small'}\n          variant=\"negative\"\n          aria-hidden=\"true\"\n        />\n      </Flex>\n      <Text\n        as=\"p\"\n        fontColor=\"red600\"\n        fontSize={density === 'high' ? 'fontSizeMHigh' : 'fontSizeM'}\n        lineHeight={density === 'high' ? 'lineHeightMHigh' : 'lineHeightM'}\n      >\n        {children}\n      </Text>\n    </Flex>\n  );\n});\n\nValidationMessage.displayName = 'ValidationMessage';\n","import React from 'react';\nimport { useId, type ExpandProps } from '@contentful/f36-core';\nimport { BaseCheckbox, BaseCheckboxProps } from '../BaseCheckbox';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { useBaseCheckboxGroup } from '../BaseCheckbox/BaseCheckboxGroupContext';\n\nexport type CheckboxProps = Omit<BaseCheckboxProps, 'type' | 'size'>;\n\nconst _Checkbox = (\n  props: ExpandProps<CheckboxProps>,\n  ref: React.Ref<HTMLInputElement>,\n) => {\n  const {\n    testId = 'cf-ui-checkbox',\n    id,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    children,\n    onBlur,\n    onChange,\n    defaultChecked,\n    isChecked,\n    value,\n    name,\n    ...otherProps\n  } = props;\n\n  const inputId = useId(id, 'checkbox');\n\n  const groupProps = useBaseCheckboxGroup({\n    onBlur,\n    onChange,\n    value,\n    defaultChecked,\n    isChecked,\n    name,\n  });\n\n  // Removes the not needed properties that comes from FormControl context.\n  const {\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n    isReadOnly,\n    ...formProps\n  } = useFormControl({\n    id: inputId,\n    isDisabled,\n    isInvalid,\n    isRequired,\n  });\n\n  return (\n    <BaseCheckbox\n      {...formProps}\n      {...groupProps}\n      {...otherProps}\n      type=\"checkbox\"\n      testId={testId}\n      ref={ref}\n    >\n      {children}\n    </BaseCheckbox>\n  );\n};\n\nexport const Checkbox = React.forwardRef(_Checkbox);\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport type { PropsWithHTMLElement, ExpandProps } from '@contentful/f36-core';\nimport type { BaseCheckboxInternalProps } from './types';\nimport { GhostCheckbox } from './GhostCheckbox';\nimport getStyles from './BaseCheckbox.styles';\nimport { Text } from '@contentful/f36-typography';\nimport { Flex } from '@contentful/f36-core';\nimport { useDensity } from '@contentful/f36-utils';\nimport { HelpText } from '../HelpText/HelpText';\nimport { useFormControl } from '../FormControl/FormControlContext';\n\nexport type BaseCheckboxProps = PropsWithHTMLElement<\n  BaseCheckboxInternalProps,\n  'label',\n  'htmlFor'\n>;\n\nfunction _BaseCheckbox(\n  props: ExpandProps<BaseCheckboxProps>,\n  ref: React.RefObject<HTMLInputElement>,\n) {\n  const {\n    isChecked = undefined,\n    onChange,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    type = 'checkbox',\n    value,\n    isDisabled,\n    isIndeterminate,\n    isInvalid,\n    isRequired = false,\n    id,\n    willBlurOnEsc = true,\n    testId = 'cf-ui-base-checkbox',\n    className = '',\n    defaultChecked = undefined,\n    name,\n    inputProps = {},\n    children,\n    'aria-label': ariaLabel,\n    size = 'medium',\n    helpText,\n    ...otherProps\n  } = props;\n  const density = useDensity();\n  const inputRef = useRef<HTMLInputElement>(null);\n  const finalRef = ref || inputRef;\n  const { id: formFieldId } = useFormControl({});\n\n  useEffect(() => {\n    if (finalRef.current) {\n      finalRef.current.indeterminate = isIndeterminate;\n    }\n  }, [isIndeterminate, finalRef]);\n\n  const styles = getStyles({ isDisabled, type, size, density });\n\n  const handleFocus = useCallback(\n    (e) => {\n      e.persist();\n      if (onFocus) {\n        onFocus(e);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleBlur = useCallback(\n    (e) => {\n      e.persist();\n      if (onBlur) {\n        onBlur(e);\n      }\n    },\n    [onBlur],\n  );\n\n  const handleKeyDown = useCallback(\n    (e) => {\n      e.persist();\n      if (willBlurOnEsc && e.key === 'Escape') {\n        finalRef?.current?.blur();\n      }\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    },\n    [willBlurOnEsc, onKeyDown, finalRef],\n  );\n\n  const ariaChecked =\n    typeof isChecked !== undefined ? isChecked : defaultChecked;\n\n  const helpTextId = id ? `${id}-helptext` : undefined;\n  const ariaDescribedBy = isInvalid\n    ? `${formFieldId}-validation`\n    : helpText\n    ? helpTextId\n    : undefined;\n\n  return (\n    <Flex alignItems=\"flex-start\" flexDirection=\"column\" className={className}>\n      <Text\n        as=\"label\"\n        fontColor=\"gray900\"\n        fontWeight=\"fontWeightMedium\"\n        fontSize={density === 'high' ? 'fontSizeMHigh' : 'fontSizeM'}\n        lineHeight={density === 'high' ? 'lineHeightMHigh' : 'lineHeightM'}\n        className={styles.wrapper}\n        htmlFor={id}\n        testId={testId}\n        {...otherProps}\n      >\n        <input\n          {...inputProps}\n          aria-label={ariaLabel}\n          checked={isChecked}\n          defaultChecked={defaultChecked}\n          className={styles.input}\n          type={type === 'switch' ? 'checkbox' : type}\n          onChange={onChange}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          onKeyDown={handleKeyDown}\n          value={value}\n          disabled={isDisabled}\n          role={type}\n          aria-checked={isIndeterminate ? 'mixed' : ariaChecked}\n          ref={finalRef}\n          required={isRequired}\n          aria-required={isRequired ? 'true' : undefined}\n          aria-invalid={isInvalid ? 'true' : undefined}\n          aria-describedby={ariaDescribedBy}\n          id={id}\n          name={name}\n        />\n        <GhostCheckbox\n          type={type}\n          isDisabled={isDisabled}\n          isIndeterminate={isIndeterminate}\n          size={size}\n        />\n        {children}\n      </Text>\n      {helpText && (\n        <HelpText id={helpTextId} className={styles.helpText}>\n          {helpText}\n        </HelpText>\n      )}\n    </Flex>\n  );\n}\n\n_BaseCheckbox.displayName = 'BaseCheckbox';\n\nexport const BaseCheckbox = React.forwardRef(_BaseCheckbox);\n","import React from 'react';\nimport { DoneIcon, MinusIcon, CloseIcon } from '@contentful/f36-icons';\nimport { BaseCheckboxInternalProps } from './types';\nimport getStyles from './GhostCheckbox.styles';\n\nexport type GhostCheckboxProps = Pick<\n  BaseCheckboxInternalProps,\n  'type' | 'isIndeterminate' | 'isDisabled' | 'size'\n>;\n\nexport const GhostCheckbox = (props: GhostCheckboxProps) => {\n  const { type, isIndeterminate, isDisabled, size = 'medium' } = props;\n  const styles = getStyles({ isDisabled, size });\n\n  if (type === 'switch') {\n    return (\n      <span className={styles.switch}>\n        <DoneIcon size=\"tiny\" variant=\"white\" />\n        <CloseIcon size=\"tiny\" variant=\"white\" />\n      </span>\n    );\n  }\n\n  return (\n    <span className={styles[type]}>\n      {type === 'checkbox' &&\n        (isIndeterminate ? (\n          <MinusIcon size=\"tiny\" variant=\"white\" />\n        ) : (\n          <DoneIcon size=\"tiny\" variant=\"white\" />\n        ))}\n    </span>\n  );\n};\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport type { GhostCheckboxProps } from './GhostCheckbox';\nimport tokens from '@contentful/f36-tokens';\n\ntype stylesArgs = Pick<GhostCheckboxProps, 'isDisabled' | 'size'>;\n\nconst getBaseGhostStyles = ({ isDisabled }): CSSObject => ({\n  alignItems: 'center',\n  background: !isDisabled ? tokens.colorWhite : tokens.gray300,\n  border: `2px solid ${tokens.gray300}`,\n  boxSizing: 'border-box',\n  display: 'inline-flex',\n  height: tokens.spacingM,\n  justifyContent: 'center',\n  width: tokens.spacingM,\n});\n\nconst getCheckboxStyles = ({ isDisabled }) => {\n  const baseStyle = {\n    ...getBaseGhostStyles({ isDisabled }),\n    backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    borderRadius: tokens.borderRadiusSmall,\n    '& svg': {\n      fill: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    },\n    'input:indeterminate + &, input:checked + &': {\n      backgroundColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      borderColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      '& svg': {\n        fill: !isDisabled ? tokens.colorWhite : tokens.gray600,\n      },\n    },\n  };\n\n  return css(baseStyle);\n};\n\nconst getRadioStyles = ({ isDisabled }) => {\n  const baseBefore = {\n    content: '\"\"',\n    borderRadius: '50%',\n    backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    width: tokens.borderRadiusMedium,\n    height: tokens.borderRadiusMedium,\n  };\n\n  const baseStyle = {\n    ...getBaseGhostStyles({ isDisabled }),\n    backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray300,\n    borderRadius: '50%',\n    '&:before': {\n      ...baseBefore,\n    },\n    'input:checked + &': {\n      backgroundColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      borderColor: !isDisabled ? tokens.blue600 : tokens.gray300,\n      '&:before': {\n        backgroundColor: !isDisabled ? tokens.colorWhite : tokens.gray600,\n      },\n    },\n  };\n\n  return css(baseStyle);\n};\n\nconst getSwitchStyles = ({ isDisabled, size }) => {\n  const sizeStyle =\n    size === 'small'\n      ? {\n          height: tokens.spacingM,\n          width: tokens.spacingXl,\n          '&:before': {\n            height: tokens.spacingS,\n            width: tokens.spacingS,\n          },\n          'input:checked + &:before': {\n            transform: `translateX(${tokens.spacingM})`,\n          },\n        }\n      : {\n          height: '20px',\n          width: '40px',\n          '&:before': {\n            height: tokens.spacingM,\n            width: tokens.spacingM,\n          },\n          'input:checked + &:before': {\n            transform: `translateX(20px)`,\n          },\n        };\n\n  const baseStyle: CSSObject = {\n    ...getBaseGhostStyles({ isDisabled }),\n    background: tokens.gray600,\n    borderColor: tokens.gray600,\n    borderRadius: tokens.borderRadiusSmall,\n    justifyContent: 'space-around',\n    position: 'relative',\n    flexShrink: 0,\n    '&:before': {\n      background: tokens.colorWhite,\n      borderRadius: `calc(${tokens.borderRadiusSmall}/2)`,\n      content: '\"\"',\n      left: 0,\n      position: 'absolute',\n      transition: `transform ${tokens.transitionEasingDefault} ${tokens.transitionDurationDefault}`,\n    },\n    'input:checked + &': {\n      background: tokens.blue600,\n      borderColor: tokens.blue600,\n    },\n  };\n\n  const disabledStyle: CSSObject = {\n    '&, input:checked + &': {\n      background: tokens.gray200,\n      borderColor: tokens.gray200,\n    },\n    '&:before': {\n      background: tokens.gray400,\n    },\n    '& svg': {\n      fill: tokens.gray400,\n    },\n  };\n\n  return css([baseStyle, sizeStyle, isDisabled && disabledStyle]);\n};\n\nconst getStyles = (args: stylesArgs) => {\n  const { isDisabled, size } = args;\n  return {\n    radio: getRadioStyles({ isDisabled }),\n    checkbox: getCheckboxStyles({ isDisabled }),\n    switch: getSwitchStyles({ isDisabled, size }),\n  };\n};\n\nexport default getStyles;\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { BaseCheckboxInternalProps } from './types';\n\nconst sizeToStyle = (size) => {\n  if (size === 'small') {\n    return {\n      height: tokens.spacingM,\n      width: tokens.spacingXl,\n    };\n  }\n\n  return {\n    height: '20px',\n    width: '40px',\n  };\n};\n\nconst getHelpTextStyle = ({ size, type, density }) => {\n  let inputWidth = tokens.spacingM;\n  if (type === 'switch') {\n    inputWidth = sizeToStyle(size).width;\n  }\n\n  return {\n    marginLeft: `calc(${inputWidth} + ${tokens.spacingXs})`,\n    marginTop: 0,\n    fontSize: density === 'high' ? tokens.fontSizeMHigh : tokens.fontSizeM,\n    lineHeight:\n      density === 'high' ? tokens.lineHeightMHigh : tokens.lineHeightM,\n  };\n};\n\nconst getStyles = ({\n  isDisabled,\n  type,\n  size,\n  density,\n}: Pick<\n  BaseCheckboxInternalProps,\n  'isDisabled' | 'type' | 'size' | 'density'\n>) => ({\n  wrapper: css({\n    alignItems: 'center',\n    display: 'inline-flex',\n    position: 'relative',\n    margin: '0',\n    columnGap: tokens.spacingXs,\n  }),\n  input: css([\n    {\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      height: tokens.spacingM,\n      margin: 0,\n      opacity: 0,\n      position: 'absolute',\n      width: tokens.spacingM,\n      zIndex: tokens.zIndexDefault,\n      '+ span': {\n        minWidth: tokens.spacingM,\n      },\n      '&:focus': {\n        outline: 'none',\n        '& + span': {\n          boxShadow: tokens.glowPrimary,\n        },\n      },\n      '&:focus:not(:focus-visible) + span': {\n        boxShadow: 'unset',\n      },\n      '&:focus-visible + span': {\n        boxShadow: tokens.glowPrimary,\n      },\n    },\n    type === 'switch' && sizeToStyle(size),\n  ]),\n  helpText: css(getHelpTextStyle({ size, type, density })),\n});\n\nexport default getStyles;\n","import { createContext, useContext } from 'react';\nimport { BaseCheckboxProps } from './BaseCheckbox';\nimport { BaseCheckboxGroupProps } from './BaseCheckboxGroup';\n\nexport type BaseCheckboxGroupContextProps = Omit<\n  BaseCheckboxGroupProps,\n  'children'\n>;\nexport type BaseCheckboxGroupContextValue = Pick<\n  BaseCheckboxProps,\n  'isChecked' | 'defaultChecked' | 'onChange' | 'onBlur' | 'name' | 'value'\n>;\n\nexport const BaseCheckboxGroupContext = createContext<\n  BaseCheckboxGroupContextProps | undefined\n>(undefined);\n\nexport const useBaseCheckboxGroupContext = () => {\n  const context = useContext(BaseCheckboxGroupContext);\n  return context;\n};\n\nexport const useBaseCheckboxGroup = (\n  props: Partial<BaseCheckboxProps>,\n): BaseCheckboxGroupContextValue => {\n  const context = useBaseCheckboxGroupContext();\n  if (!context) {\n    return props;\n  }\n\n  let isChecked, defaultChecked;\n\n  if (context.type === 'checkbox') {\n    isChecked =\n      context.value === undefined\n        ? undefined\n        : context.value?.includes(props.value);\n    defaultChecked =\n      isChecked !== undefined\n        ? undefined\n        : context.defaultValue?.includes(props.value);\n  }\n\n  if (context.type === 'radio') {\n    isChecked =\n      context.value === undefined ? undefined : context.value === props.value;\n    defaultChecked =\n      isChecked !== undefined\n        ? undefined\n        : context.defaultValue === props.value;\n  }\n\n  const onChange = (event) => {\n    props.onChange && props.onChange(event);\n    context.onChange && context.onChange(event);\n  };\n\n  const onBlur = (event) => {\n    props.onBlur && props.onBlur(event);\n    context.onBlur && context.onBlur(event);\n  };\n\n  return {\n    defaultChecked,\n    isChecked,\n    onBlur,\n    onChange,\n    name: context.name ?? props.name,\n    value: props.value,\n  };\n};\n","import React from 'react';\nimport {\n  BaseCheckboxGroup,\n  BaseCheckboxGroupProps,\n} from '../BaseCheckbox/BaseCheckboxGroup';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport interface CheckboxGroupProps\n  extends Omit<BaseCheckboxGroupProps, 'type'> {\n  /**\n   * Array of values of the checkboxes that should be checked for uncontrolled inputs\n   */\n  defaultValue?: Array<string>;\n  /**\n   * Array of values of the checkboxes that should be checked for controlled inputs\n   */\n  value?: Array<string>;\n}\n\nexport const _CheckboxGroup = (\n  props: ExpandProps<CheckboxGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const { children, testId = 'cf-ui-checkbox-group', ...otherProps } = props;\n  return (\n    <BaseCheckboxGroup\n      ref={ref}\n      testId={testId}\n      type=\"checkbox\"\n      {...otherProps}\n    >\n      {children}\n    </BaseCheckboxGroup>\n  );\n};\n\nexport const CheckboxGroup = React.forwardRef(_CheckboxGroup);\n","import React, { type ChangeEventHandler, type FocusEventHandler } from 'react';\nimport {\n  Stack,\n  type CommonProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { BaseCheckboxGroupContext } from './BaseCheckboxGroupContext';\n\nexport interface BaseCheckboxGroupProps extends CommonProps {\n  /**\n   * Handler that will be triggered when any checkbox inside the group loses focus\n   */\n  onBlur?: FocusEventHandler<HTMLInputElement>;\n  /**\n   * Handler that will be triggered when any checkbox inside the group has their checked state changed\n   */\n  onChange?: ChangeEventHandler<HTMLInputElement>;\n  /**\n   * Name that will be assigned to all checkboxes inside the group, unless a different name is passed to the checkbox\n   */\n  name?: string;\n  /**\n   * Elements that should be in the group\n   */\n  children: React.ReactNode;\n  /**\n   * Type of the inputs used within the group\n   */\n  type: 'checkbox' | 'radio';\n  /**\n   * Array of values for checkboxes or single value for radio, that should be checked for uncontrolled inputs\n   */\n  defaultValue?: Array<string> | string;\n  /**\n   * Array of values for checkboxes or single value for radio, that should be checked for controlled inputs\n   */\n  value?: Array<string> | string;\n}\n\nexport const _BaseCheckboxGroup = (\n  props: ExpandProps<BaseCheckboxGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-base-checkbox-group',\n    ...contextProps\n  } = props;\n  return (\n    <BaseCheckboxGroupContext.Provider value={contextProps}>\n      <Stack\n        ref={ref}\n        testId={testId}\n        className={className}\n        flexDirection=\"column\"\n        alignItems=\"flex-start\"\n        spacing=\"spacingXs\"\n      >\n        {children}\n      </Stack>\n    </BaseCheckboxGroupContext.Provider>\n  );\n};\n\nexport const BaseCheckboxGroup = React.forwardRef(_BaseCheckboxGroup);\n","import { Checkbox as OriginalCheckbox } from './Checkbox';\nimport { CheckboxGroup } from './CheckboxGroup';\n\ntype CompoundCheckbox = typeof OriginalCheckbox & {\n  Group: typeof CheckboxGroup;\n};\n\nexport const Checkbox = OriginalCheckbox as CompoundCheckbox;\nCheckbox.Group = CheckboxGroup;\n","import React, { useState } from 'react';\nimport {\n  useId,\n  type CommonProps,\n  type MarginProps,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Box } from '@contentful/f36-core';\n\nimport { FormControlContext } from './FormControlContext';\nimport type { FormControlContextProps } from './types';\n\nconst FORM_CONTROL_DEFAULT_TAG = 'div';\n\nexport interface FormControlInternalProps\n  extends FormControlContextProps,\n    CommonProps,\n    MarginProps {\n  as?: 'div' | 'fieldset';\n  children: React.ReactNode;\n}\n\nexport type FormControlProps<\n  E extends React.ElementType = typeof FORM_CONTROL_DEFAULT_TAG,\n> = PolymorphicProps<FormControlInternalProps, E>;\n\nfunction _FormControl<\n  E extends React.ElementType = typeof FORM_CONTROL_DEFAULT_TAG,\n>(\n  {\n    as,\n    isInvalid,\n    isRequired,\n    isDisabled,\n    isReadOnly,\n    children,\n    marginBottom = 'spacingL',\n    id,\n    testId = 'cf-ui-form-control',\n    ...otherProps\n  }: FormControlProps<E>,\n  ref: React.Ref<any>,\n) {\n  const generatedId = useId(id, 'field-');\n  const [inputValue, setInputValue] = useState('');\n  const [maxLength, setMaxLength] = useState(0);\n  const roleAttr = as === 'fieldset' ? undefined : 'group';\n  const Element: React.ElementType = as || FORM_CONTROL_DEFAULT_TAG;\n\n  const context = {\n    id: generatedId,\n    isRequired,\n    isDisabled,\n    isInvalid,\n    isReadOnly,\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n  };\n\n  return (\n    <FormControlContext.Provider value={context}>\n      <Box\n        as={Element}\n        ref={ref}\n        role={roleAttr}\n        testId={testId}\n        marginBottom={marginBottom}\n        {...otherProps}\n      >\n        {children}\n      </Box>\n    </FormControlContext.Provider>\n  );\n}\n\n_FormControl.displayName = 'FormControl';\n\nexport const FormControl: PolymorphicComponent<\n  ExpandProps<FormControlInternalProps>,\n  typeof FORM_CONTROL_DEFAULT_TAG\n> = React.forwardRef(_FormControl);\n","import { cx } from 'emotion';\nimport React, { forwardRef, type ReactNode } from 'react';\nimport { getFormLabelStyles } from './FormLabel.styles';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport type {\n  CommonProps,\n  MarginProps,\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { useDensity } from '@contentful/f36-utils';\n\nexport interface FormLabelInternalProps extends CommonProps, MarginProps {\n  /**\n   * Label value to show\n   */\n  children: ReactNode;\n  /**\n   * Whether or not the associated input element is required\n   *\n   * @default false\n   */\n  isRequired?: boolean;\n  /**\n   * Custom text to show in parentheses that gets rendered if the associated\n   * input is required\n   *\n   * @default \"required\"\n   */\n  requiredText?: string;\n  /**\n   * Defines how the element will be rendered\n   * @default label\n   */\n  as?: 'label' | 'legend';\n}\n\nconst FORM_LABEL_DEFAULT_TAG = 'label';\n\nexport type FormLabelProps<\n  E extends React.ElementType = typeof FORM_LABEL_DEFAULT_TAG,\n> = PolymorphicProps<FormLabelInternalProps, E>;\n\nfunction _FormLabel<\n  E extends React.ElementType = typeof FORM_LABEL_DEFAULT_TAG,\n>(\n  {\n    as,\n    children,\n    className,\n    isRequired,\n    requiredText = 'required',\n    testId = 'cf-ui-form-label',\n    ...otherProps\n  }: FormLabelProps<E>,\n  forwardedRef: React.Ref<HTMLLabelElement>,\n) {\n  const density = useDensity();\n  const styles = getFormLabelStyles();\n  const formControlProps = useFormControl({ isRequired });\n\n  const id = formControlProps.id ? formControlProps.id + '-label' : undefined;\n\n  const labelProps =\n    as !== 'legend'\n      ? {\n          htmlFor: otherProps.htmlFor || formControlProps.id,\n        }\n      : {};\n\n  const Element: React.ElementType = as || FORM_LABEL_DEFAULT_TAG;\n\n  return (\n    <Text\n      as={Element}\n      marginBottom=\"spacingXs\"\n      {...otherProps}\n      fontColor=\"gray900\"\n      id={id}\n      {...labelProps}\n      className={cx(styles.root, className)}\n      ref={forwardedRef}\n      testId={testId}\n      fontSize={density === 'high' ? 'fontSizeMHigh' : 'fontSizeM'}\n      lineHeight={density === 'high' ? 'lineHeightMHigh' : 'lineHeightM'}\n    >\n      {children}\n      {formControlProps.isRequired && (\n        <span className={styles.indicator}>({requiredText})</span>\n      )}\n    </Text>\n  );\n}\n\n_FormLabel.displayName = 'FormLabel';\n\nexport const FormLabel: PolymorphicComponent<\n  ExpandProps<FormLabelInternalProps>,\n  typeof FORM_LABEL_DEFAULT_TAG\n> = forwardRef(_FormLabel);\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getFormLabelStyles() {\n  return {\n    root: css({\n      display: 'inline-block',\n      fontWeight: tokens.fontWeightMedium,\n    }),\n    indicator: css({\n      color: tokens.gray500,\n      fontWeight: tokens.fontWeightNormal,\n      marginLeft: tokens.spacing2Xs,\n    }),\n  };\n}\n","import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Text } from '@contentful/f36-typography';\nimport { getCounterStyles } from './Counter.styles';\n\nimport { useFormControl } from '../FormControl/FormControlContext';\n\nexport type CounterProps = PropsWithHTMLElement<CommonProps, 'p'>;\n\nexport const Counter = forwardRef<\n  HTMLParagraphElement,\n  ExpandProps<CounterProps>\n>(({ testId = 'cf-ui-counter', className, ...otherProps }, ref) => {\n  const { maxLength, inputValue } = useFormControl({});\n  const styles = getCounterStyles();\n\n  return (\n    Boolean(maxLength) && (\n      <Text\n        as=\"p\"\n        fontColor=\"gray700\"\n        fontSize=\"fontSizeM\"\n        testId={testId}\n        marginTop=\"spacingXs\"\n        {...otherProps}\n        className={cx(styles.root, className)}\n        ref={ref}\n      >\n        {inputValue.length} / {maxLength}\n      </Text>\n    )\n  );\n});\n\nCounter.displayName = 'Counter';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getCounterStyles() {\n  return {\n    root: css({\n      flexShrink: 0,\n      paddingLeft: tokens.spacingM,\n      textAlign: 'right',\n    }),\n  };\n}\n","import { FormControl as OriginalFormControl } from './FormControl';\nimport { FormLabel } from '../FormLabel';\nimport { ValidationMessage } from '../ValidationMessage';\nimport { HelpText } from '../HelpText';\nimport { Counter } from '../Counter';\n\ntype CompoundFormControl = typeof OriginalFormControl & {\n  Label: typeof FormLabel;\n  ValidationMessage: typeof ValidationMessage;\n  HelpText: typeof HelpText;\n  Counter: typeof Counter;\n};\n\nexport const FormControl = OriginalFormControl as CompoundFormControl;\nFormControl.Label = FormLabel;\nFormControl.ValidationMessage = ValidationMessage;\nFormControl.HelpText = HelpText;\nFormControl.Counter = Counter;\n","import React from 'react';\nimport { useId, type ExpandProps } from '@contentful/f36-core';\n\nimport { BaseCheckbox, BaseCheckboxProps } from '../BaseCheckbox';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { useBaseCheckboxGroup } from '../BaseCheckbox/BaseCheckboxGroupContext';\n\nexport type RadioProps = Omit<\n  BaseCheckboxProps,\n  'type' | 'isIndeterminate' | 'size'\n>;\n\nconst _Radio = (\n  props: ExpandProps<RadioProps>,\n  ref: React.Ref<HTMLInputElement>,\n) => {\n  const {\n    testId = 'cf-ui-radio-button',\n    id,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    children,\n    onBlur,\n    onChange,\n    defaultChecked,\n    isChecked,\n    value,\n    name,\n    ...otherProps\n  } = props;\n\n  const inputId = useId(id, 'radio');\n\n  const groupProps = useBaseCheckboxGroup({\n    onBlur,\n    onChange,\n    value,\n    defaultChecked,\n    isChecked,\n    name,\n  });\n\n  // Removes the not needed properties that comes from FormControl context.\n  const {\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n    isReadOnly,\n    ...formProps\n  } = useFormControl({\n    id: inputId,\n    isDisabled,\n    isInvalid,\n    isRequired,\n  });\n\n  return (\n    <BaseCheckbox\n      {...formProps}\n      {...otherProps}\n      {...groupProps}\n      type=\"radio\"\n      testId={testId}\n      ref={ref}\n    >\n      {children}\n    </BaseCheckbox>\n  );\n};\n\nexport const Radio = React.forwardRef(_Radio);\n","import React from 'react';\nimport {\n  BaseCheckboxGroup,\n  BaseCheckboxGroupProps,\n} from '../BaseCheckbox/BaseCheckboxGroup';\n\nexport interface RadioGroupProps extends Omit<BaseCheckboxGroupProps, 'type'> {\n  /**\n   * Value of the radio that should be checked for uncontrolled inputs\n   */\n  defaultValue?: string;\n  /**\n   * Value of the radio that should be checked for controlled inputs\n   */\n  value?: string;\n}\n\nexport const _RadioGroup = (\n  props: RadioGroupProps,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const { children, testId = 'cf-ui-radio-group', ...groupProps } = props;\n  return (\n    <BaseCheckboxGroup ref={ref} testId={testId} type=\"radio\" {...groupProps}>\n      {children}\n    </BaseCheckboxGroup>\n  );\n};\n\nexport const RadioGroup = React.forwardRef(_RadioGroup);\n","import { Radio as OriginalRadio } from './Radio';\nimport { RadioGroup } from './RadioGroup';\n\ntype CompoundRadio = typeof OriginalRadio & {\n  Group: typeof RadioGroup;\n};\n\nexport const Radio = OriginalRadio as CompoundRadio;\nRadio.Group = RadioGroup;\n","import React, { useRef, useEffect } from 'react';\nimport { BaseInput } from '../BaseInput';\nimport { TextInputProps } from './types';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport const _TextInput = (\n  {\n    className,\n    testId = 'cf-ui-text-input',\n    id,\n    value,\n    defaultValue,\n    onChange,\n    onFocus,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n    size = 'medium',\n    maxLength,\n    ...otherProps\n  }: ExpandProps<TextInputProps>,\n  ref: React.RefObject<HTMLInputElement>,\n) => {\n  const {\n    setMaxLength,\n    maxLength: contextMaxLength,\n    setInputValue,\n    inputValue: contextInputValue,\n    ...formProps\n  } = useFormControl({\n    id,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n  });\n\n  useEffect(() => {\n    if (maxLength !== undefined && typeof setMaxLength === 'function') {\n      setMaxLength(maxLength);\n      setInputValue(value ?? defaultValue ?? '');\n    }\n  }, [maxLength, setMaxLength, setInputValue, defaultValue, value]);\n\n  const handleOnChange = (event) => {\n    if (typeof setInputValue === 'function') {\n      setInputValue(event.target.value);\n    }\n    onChange?.(event);\n  };\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const finalRef = ref || inputRef;\n\n  return (\n    <BaseInput\n      type=\"text\"\n      {...otherProps}\n      {...formProps}\n      testId={testId}\n      ref={finalRef}\n      onChange={maxLength ? handleOnChange : onChange}\n      onFocus={onFocus}\n      as=\"input\"\n      className={className}\n      value={value}\n      defaultValue={defaultValue}\n      size={size}\n      maxLength={maxLength}\n    />\n  );\n};\n\nexport const TextInput = React.forwardRef(_TextInput);\n","import React, {\n  useCallback,\n  type FocusEvent,\n  type KeyboardEvent,\n  type ChangeEvent,\n} from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport getInputStyles from './BaseInput.styles';\nimport { BaseInputInternalProps } from './types';\nimport { useDensity } from '@contentful/f36-utils';\n\nconst INPUT_DEFAULT_TAG = 'input';\n\nexport type BaseInputProps<\n  E extends React.ElementType = typeof INPUT_DEFAULT_TAG,\n> = PolymorphicProps<\n  BaseInputInternalProps,\n  E,\n  'disabled' | 'required' | 'readOnly'\n>;\n\nfunction _BaseInput<E extends React.ElementType = typeof INPUT_DEFAULT_TAG>(\n  props: BaseInputProps<E>,\n  ref: React.Ref<HTMLInputElement | HTMLTextAreaElement>,\n) {\n  const {\n    as = INPUT_DEFAULT_TAG,\n    className,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    name,\n    onBlur,\n    onChange,\n    onFocus,\n    onKeyDown,\n    testId = 'cf-ui-base-input',\n    type = 'text',\n    value = undefined,\n    placeholder,\n    willBlurOnEsc = true,\n    style,\n    icon,\n    defaultValue,\n    size = 'medium',\n    resize = 'vertical',\n    ...otherProps\n  } = props;\n  const density = useDensity();\n  const styles = getInputStyles({\n    as,\n    isDisabled,\n    isInvalid,\n    size,\n    resize,\n    density,\n  });\n\n  const handleFocus = useCallback(\n    (e: FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      e.persist();\n      if (onFocus) {\n        onFocus(e);\n      }\n    },\n    [onFocus],\n  );\n\n  const handleChange = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      e.persist();\n      if (isDisabled || isReadOnly) return;\n\n      if (onChange) {\n        onChange(e);\n      }\n    },\n    [onChange, isDisabled, isReadOnly],\n  );\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      e.persist();\n\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n\n      if (e.nativeEvent.code === 'Escape' && willBlurOnEsc) {\n        e.currentTarget.blur();\n      }\n    },\n    [willBlurOnEsc, onKeyDown],\n  );\n\n  const iconContent = icon && (\n    <Box as=\"span\" className={styles.iconPlaceholder}>\n      {React.cloneElement(icon, {\n        size: 'tiny',\n        variant: 'muted',\n        'aria-hidden': true,\n      })}\n    </Box>\n  );\n\n  const Element = as as React.ElementType;\n\n  const inputContent = (iconClassName?: string) => (\n    <Element\n      {...otherProps}\n      value={value}\n      defaultValue={defaultValue}\n      data-test-id={testId}\n      style={style}\n      placeholder={placeholder}\n      className={cx(styles.input, iconClassName, className)}\n      name={name}\n      type={type}\n      ref={ref}\n      id={id}\n      readOnly={isReadOnly}\n      aria-readonly={isReadOnly ? 'true' : undefined}\n      aria-required={isRequired ? 'true' : undefined}\n      aria-invalid={isInvalid ? 'true' : undefined}\n      aria-describedby={\n        id ? `${id}-${isInvalid ? `validation` : `helptext`}` : undefined\n      }\n      disabled={isDisabled}\n      required={isRequired}\n      onChange={handleChange}\n      onBlur={onBlur}\n      onKeyDown={handleKeyDown}\n      onFocus={handleFocus}\n      size={size}\n    />\n  );\n\n  if (icon) {\n    return (\n      <Box as=\"div\" className={styles.rootComponentWithIcon}>\n        {inputContent(styles.inputWithIcon)}\n        {iconContent}\n      </Box>\n    );\n  }\n\n  return inputContent();\n}\n\n_BaseInput.displayName = 'BaseInput';\n\nexport const BaseInput: PolymorphicComponent<\n  ExpandProps<BaseInputInternalProps>,\n  typeof INPUT_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_BaseInput);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { CSSObject } from '@emotion/serialize';\nimport type { Density } from '@contentful/f36-utils';\nimport { BaseInputInternalProps } from './types';\n\ntype getSizeStylesProps = Pick<BaseInputInternalProps, 'size'> & {\n  density?: Density;\n};\n\nconst getSizeStyles = ({ size, density }: getSizeStylesProps): CSSObject => {\n  const isHighDensity = density === 'high';\n  if (size === 'small') {\n    return {\n      padding: tokens.spacingXs,\n      minHeight: isHighDensity ? tokens.spacingL : tokens.spacingXl,\n      maxHeight: isHighDensity ? tokens.spacingL : tokens.spacingXl,\n    };\n  }\n\n  return {\n    padding: isHighDensity ? tokens.spacingXs : `10px ${tokens.spacingS}`,\n    minHeight: isHighDensity ? tokens.spacingXl : '40px',\n    maxHeight: isHighDensity ? tokens.spacingXl : '40px',\n  };\n};\n\nconst getZIndex = ({\n  isDisabled,\n  isInvalid,\n  zIndexBase = tokens.zIndexDefault,\n}: {\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n  zIndexBase?: number;\n}) => (isDisabled || isInvalid ? zIndexBase + 1 : zIndexBase);\n\ntype getInputStylesProps = Pick<\n  BaseInputInternalProps,\n  'as' | 'isDisabled' | 'isInvalid' | 'size' | 'resize'\n> & {\n  density?: Density;\n};\n\nconst getInvalidOrDisabledStyles = ({\n  isDisabled,\n  isInvalid,\n}: {\n  isDisabled?: boolean;\n  isInvalid?: boolean;\n}) => {\n  if (isDisabled) {\n    return {\n      borderColor: tokens.gray300,\n      boxShadow: 'none',\n    };\n  }\n  if (isInvalid) {\n    return {\n      borderColor: tokens.red600,\n      boxShadow: tokens.glowNegative,\n    };\n  }\n  return {};\n};\n\nconst getStyles = ({\n  as,\n  isDisabled,\n  isInvalid,\n  size,\n  resize,\n  density = 'low',\n}: getInputStylesProps) => {\n  const densityStyles = {\n    low: {\n      borderRadius: tokens.borderRadiusMedium,\n      lineHeight: tokens.lineHeightM,\n      fontSize: tokens.fontSizeM,\n    },\n    high: {\n      borderRadius: tokens.borderRadiusSmall,\n      lineHeight: tokens.lineHeightMHigh,\n      fontSize: tokens.fontSizeMHigh,\n    },\n  };\n\n  return {\n    rootComponentWithIcon: css({\n      position: 'relative',\n      display: 'flex',\n      width: '100%',\n      zIndex: getZIndex({ isDisabled, isInvalid }),\n    }),\n    input: css({\n      outline: 'none',\n      boxShadow: tokens.insetBoxShadowDefault,\n      boxSizing: 'border-box',\n      backgroundColor: isDisabled ? tokens.gray100 : tokens.colorWhite,\n      border: `1px solid ${isInvalid ? tokens.red600 : tokens.gray300}`,\n      color: tokens.gray700,\n      fontFamily: tokens.fontStackPrimary,\n      margin: 0,\n      cursor: isDisabled ? 'not-allowed' : 'auto',\n      width: '100%',\n      zIndex: getZIndex({ isDisabled, isInvalid }),\n      ...densityStyles[density],\n\n      // if the input is a textarea, the resize prop is applied and size should be ignored\n      ...(as === 'textarea' ? { resize } : getSizeStyles({ size, density })),\n\n      '&::placeholder': {\n        color: tokens.gray500,\n      },\n\n      '&:active, &:active:hover, &:focus': {\n        borderColor: tokens.blue600,\n        boxShadow: tokens.glowPrimary,\n        ...getInvalidOrDisabledStyles({ isDisabled, isInvalid }),\n      },\n    }),\n\n    inputWithIcon: css({\n      paddingLeft: tokens.spacingXl,\n    }),\n\n    iconPlaceholder: css({\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: 0,\n      bottom: 0,\n      left: size === 'small' ? tokens.spacingXs : tokens.spacingS,\n      display: 'flex',\n      alignItems: 'center',\n      zIndex: tokens.zIndexDefault,\n    }),\n  };\n};\n\nexport default getStyles;\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Stack,\n  type ExpandProps,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport getStyles from './InputGroup.styles';\nimport type { InputGroupSpacing } from './types';\nimport { useDensity } from '@contentful/f36-utils';\n\nexport interface InputGroupProps extends CommonProps {\n  /**\n   * Sets the spacing of the elements if variant is separate.\n   * @default spacingS\n   */\n  spacing?: InputGroupSpacing;\n  children: React.ReactNode;\n}\n\nconst _InputGroup = (\n  props: ExpandProps<InputGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) => {\n  const { children, className, spacing = 'none', ...otherProps } = props;\n  const density = useDensity();\n  const styles = getStyles({ spacing, density });\n  return (\n    <Stack\n      {...otherProps}\n      spacing={spacing}\n      ref={ref}\n      fullWidth\n      className={cx(styles.inputGroup, className)}\n    >\n      {children}\n    </Stack>\n  );\n};\n\nexport const InputGroup = React.forwardRef(_InputGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { GetStyleArguments } from './types';\n\nconst getInputGroupStyle = ({ spacing, density }) => {\n  const densityBorderRadius =\n    density === 'high' ? tokens.borderRadiusSmall : tokens.borderRadiusMedium;\n\n  const iconStyles =\n    density === 'high'\n      ? {\n          '& svg': {\n            width: '14px',\n            height: '14px',\n          },\n        }\n      : {};\n\n  if (spacing !== 'none') {\n    return css({\n      '& button, & input': {\n        borderRadius: densityBorderRadius,\n        height: 'auto',\n      },\n      ...iconStyles,\n    });\n  }\n\n  return css({\n    position: 'relative',\n    '& button, & input': {\n      borderRadius: '0 !important',\n      height: 'auto',\n    },\n    ...iconStyles,\n    '& > *': {\n      marginRight: '-1px !important',\n      '&:not(:focus), & button:not(:focus)': {\n        boxShadow: 'none !important',\n      },\n      '&:first-child, &:first-child > input, &:first-child button': {\n        borderBottomLeftRadius: `${densityBorderRadius} !important`,\n        borderTopLeftRadius: `${densityBorderRadius} !important`,\n      },\n      '&:last-child, &:last-child > input, &:last-child button': {\n        borderBottomRightRadius: `${densityBorderRadius} !important`,\n        borderTopRightRadius: `${densityBorderRadius} !important`,\n        marginRight: '0 !important',\n      },\n      '&:focus, &:focus-within': {\n        zIndex: tokens.zIndexDefault + 1,\n      },\n    },\n  });\n};\n\nexport default ({ spacing, density }: GetStyleArguments) => ({\n  inputGroup: getInputGroupStyle({ spacing, density }),\n});\n","import { TextInput as OriginalTextInput } from './TextInput';\nimport { InputGroup } from './input-group/InputGroup';\n\ntype CompoundTextInput = typeof OriginalTextInput & {\n  Group: typeof InputGroup;\n};\n\nexport const TextInput = OriginalTextInput as CompoundTextInput;\nTextInput.Group = InputGroup;\n","import React from 'react';\nimport { BaseCheckbox, BaseCheckboxProps } from '../BaseCheckbox';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport type SwitchProps = Omit<BaseCheckboxProps, 'type' | 'isIndeterminate'>;\n\nconst _Switch = (\n  props: ExpandProps<SwitchProps>,\n  ref: React.Ref<HTMLInputElement>,\n) => {\n  const {\n    testId = 'cf-ui-switch',\n    id,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    children,\n    ...otherProps\n  } = props;\n\n  // Removes the not needed properties that comes from FormControl context.\n  const {\n    inputValue,\n    setInputValue,\n    maxLength,\n    setMaxLength,\n    isReadOnly,\n    ...formProps\n  } = useFormControl({\n    id,\n    isDisabled,\n    isInvalid,\n    isRequired,\n  });\n\n  return (\n    <BaseCheckbox\n      {...formProps}\n      {...otherProps}\n      testId={testId}\n      type=\"switch\"\n      ref={ref}\n    >\n      {children}\n    </BaseCheckbox>\n  );\n};\n\nexport const Switch = React.forwardRef(_Switch);\n","import React, { useEffect } from 'react';\nimport { cx } from 'emotion';\n\nimport { BaseInput, type BaseInputProps } from '../BaseInput';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { getStyles } from './Textarea.styles';\nimport type { ExpandProps } from '@contentful/f36-core';\n\nexport interface TextareaProps\n  extends Omit<BaseInputProps<'textarea'>, 'as' | 'type' | 'size'> {\n  /**\n   * Set's default value for textarea\n   */\n  defaultValue?: string;\n}\n\nconst _Textarea = (\n  {\n    className,\n    isDisabled,\n    isInvalid,\n    isRequired,\n    isReadOnly,\n    onChange,\n    testId = 'cf-ui-textarea',\n    id,\n    resize = 'vertical',\n    maxLength,\n    value,\n    defaultValue,\n    ...otherProps\n  }: ExpandProps<TextareaProps>,\n  ref: React.Ref<HTMLTextAreaElement>,\n) => {\n  const styles = getStyles();\n\n  const {\n    setMaxLength,\n    maxLength: contextMaxLength,\n    setInputValue,\n    inputValue: contextInputValue,\n    ...formProps\n  } = useFormControl({\n    id,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n  });\n\n  useEffect(() => {\n    if (maxLength !== undefined && typeof setMaxLength === 'function') {\n      setMaxLength(maxLength);\n      setInputValue(value ?? defaultValue ?? '');\n    }\n  }, [defaultValue, maxLength, setInputValue, setMaxLength, value]);\n\n  const handleOnChange = (event) => {\n    if (typeof setInputValue === 'function') {\n      setInputValue(event.target.value);\n    }\n    onChange?.(event);\n  };\n\n  return (\n    <BaseInput\n      {...otherProps}\n      {...formProps}\n      defaultValue={defaultValue}\n      value={value}\n      testId={testId}\n      as=\"textarea\"\n      ref={ref}\n      className={cx(styles.root, className, {\n        [styles.disabled]: isDisabled,\n        [styles.error]: isInvalid,\n      })}\n      maxLength={maxLength}\n      resize={resize}\n      onChange={maxLength ? handleOnChange : onChange}\n    />\n  );\n};\n\n/**\n * Textarea is a form component that allows the user to enter a sizeable amount of multi-line plain text.\n */\nexport const Textarea = React.forwardRef(_Textarea);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = () => {\n  return {\n    root: css({\n      padding: `10px ${tokens.spacingS}`,\n    }),\n    error: css({\n      '&:focus': {\n        borderColor: tokens.red600,\n        boxShadow: tokens.glowNegative,\n      },\n    }),\n    disabled: css({\n      '&:focus': {\n        borderColor: tokens.gray300,\n        boxShadow: 'none',\n      },\n    }),\n  };\n};\n","import React from 'react';\nimport type { CommonProps, PropsWithHTMLElement } from '@contentful/f36-core';\n\nexport type OptionInternalProps = CommonProps & {\n  isDisabled?: boolean;\n};\n\nexport type OptionProps = PropsWithHTMLElement<\n  OptionInternalProps,\n  'option',\n  'defaultChecked' | 'defaultValue' | 'selected' | 'disabled'\n>;\n\nexport const Option = ({\n  testId = 'cf-ui-select-option',\n  isDisabled,\n  ...otherProps\n}: OptionProps) => {\n  return <option data-test-id={testId} {...otherProps} disabled={isDisabled} />;\n};\n","import React, {\n  useCallback,\n  KeyboardEvent,\n  ReactNode,\n  ChangeEventHandler,\n} from 'react';\nimport { cx } from 'emotion';\nimport { ChevronDownIcon } from '@contentful/f36-icons';\n\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { useFormControl } from '../FormControl/FormControlContext';\nimport { getSelectStyles } from './Select.styles';\nimport { useDensity } from '@contentful/f36-utils';\n\nexport type SelectSize = 'small' | 'medium';\n\nexport type SelectInternalProps = CommonProps & {\n  isRequired?: boolean;\n  isInvalid?: boolean;\n  isDisabled?: boolean;\n  onChange?: ChangeEventHandler<HTMLSelectElement>;\n  children: ReactNode;\n  willBlurOnEsc?: boolean;\n  size?: SelectSize;\n  value?: string;\n  defaultValue?: string;\n};\n\nexport type SelectProps = PropsWithHTMLElement<\n  SelectInternalProps,\n  'select',\n  'disabled' | 'required'\n>;\n\nconst _Select = (\n  {\n    id,\n    children,\n    className,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    testId = 'cf-ui-select',\n    willBlurOnEsc = true,\n    onKeyDown,\n    size = 'medium',\n    value = undefined,\n    defaultValue = undefined,\n    ...otherProps\n  }: ExpandProps<SelectProps>,\n  ref: React.Ref<HTMLSelectElement>,\n) => {\n  const formProps = useFormControl({\n    isDisabled,\n    isInvalid,\n    isRequired,\n    id,\n  });\n\n  const density = useDensity();\n\n  const styles = getSelectStyles({\n    isDisabled: formProps.isDisabled,\n    isInvalid: formProps.isInvalid,\n    size,\n    density,\n  });\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent<HTMLSelectElement>) => {\n      if (e.nativeEvent.code === 'Escape' && willBlurOnEsc) {\n        e.currentTarget.blur();\n      }\n      if (onKeyDown) {\n        onKeyDown(e);\n      }\n    },\n    [onKeyDown, willBlurOnEsc],\n  );\n\n  return (\n    <div className={cx(styles.wrapper, className)}>\n      <select\n        {...otherProps}\n        id={formProps.id}\n        data-test-id={testId}\n        className={styles.select}\n        onKeyDown={handleKeyDown}\n        required={formProps.isRequired}\n        aria-required={formProps.isRequired ? 'true' : undefined}\n        aria-invalid={formProps.isInvalid ? true : undefined}\n        aria-describedby={\n          formProps.id\n            ? `${formProps.id}-${\n                formProps.isInvalid ? `validation` : `helptext`\n              }`\n            : undefined\n        }\n        disabled={formProps.isDisabled}\n        defaultValue={defaultValue}\n        value={value}\n        ref={ref}\n      >\n        {children}\n      </select>\n      <ChevronDownIcon className={styles.icon} variant=\"muted\" />\n    </div>\n  );\n};\n\nexport const Select = React.forwardRef(_Select);\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getSelectStyles({ isInvalid, isDisabled, size, density }) {\n  const getSizeAndDensityStyles = () => {\n    switch (true) {\n      case size === 'small':\n        return {\n          padding: `${tokens.spacing2Xs} ${tokens.spacingL} ${tokens.spacing2Xs} ${tokens.spacingXs}`,\n          height: '32px',\n        };\n\n      case size === 'medium' && density === 'high':\n        return {\n          padding: `${tokens.spacing2Xs} ${tokens.spacingL} ${tokens.spacing2Xs} ${tokens.spacingXs}`,\n          height: '32px',\n          fontSize: tokens.fontSizeMHigh,\n          lineHeight: tokens.lineHeightMHigh,\n          borderRadius: tokens.borderRadiusSmall,\n        };\n\n      case size === 'medium' || density === 'low':\n      default:\n        return {\n          padding: `10px ${tokens.spacingL} 10px ${tokens.spacingS}`,\n          height: '40px',\n        };\n    }\n  };\n\n  const select = css({\n    width: '100%',\n    display: 'block',\n    appearance: 'none',\n    backgroundColor: tokens.colorWhite,\n    color: tokens.gray700,\n\n    fontSize: tokens.fontSizeM,\n    lineHeight: tokens.lineHeightM,\n    fontFamily: tokens.fontStackPrimary,\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: tokens.insetBoxShadowDefault,\n    outline: 'none',\n    border: `1px solid ${tokens.gray300}`,\n    cursor: 'pointer',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n\n    '&::placeholder': {\n      color: tokens.gray500,\n    },\n    '&:focus': {\n      outline: 'none',\n      boxShadow: tokens.glowPrimary,\n      borderColor: tokens.blue500,\n    },\n    '&:-moz-focusring': { color: 'transparent', textShadow: '0 0 0 #000' },\n    '&::-ms-expand': { display: 'none' },\n  });\n\n  const disabled = css({\n    backgroundColor: tokens.gray100,\n    cursor: 'not-allowed',\n    color: tokens.gray600,\n    '&:focus, &:active': { borderColor: tokens.gray300 },\n  });\n\n  const invalid = css({\n    borderColor: isDisabled ? tokens.red300 : tokens.red600,\n    '&:focus': {\n      borderColor: tokens.red600,\n      boxShadow: tokens.glowNegative,\n    },\n  });\n\n  return {\n    wrapper: css({\n      position: 'relative',\n      display: 'block',\n      width: 'auto',\n    }),\n    select: css([\n      select,\n      getSizeAndDensityStyles(),\n      isDisabled && disabled,\n      isInvalid && invalid,\n    ]),\n    icon: css({\n      position: 'absolute',\n      right: tokens.spacingXs,\n      top: '50%',\n      marginTop: '-8px',\n      pointerEvents: 'none',\n    }),\n  };\n}\n","import { Select as OriginalSelect } from './Select';\nimport { Option } from './SelectOption';\n\ntype CompoundSelect = typeof OriginalSelect & {\n  Option: typeof Option;\n};\n\nexport const Select = OriginalSelect as CompoundSelect;\nSelect.Option = Option;\n","import React, { forwardRef, useCallback, type FormEvent } from 'react';\n\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nexport type FormProps = PropsWithHTMLElement<CommonProps, 'form'>;\n\nfunction _Form(\n  {\n    children,\n    onSubmit,\n    testId = 'cf-ui-form-label',\n    ...otherProps\n  }: ExpandProps<FormProps>,\n  ref: React.Ref<HTMLFormElement>,\n) {\n  const handleSubmit = useCallback(\n    (event: FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      if (onSubmit) {\n        onSubmit(event);\n      }\n    },\n    [onSubmit],\n  );\n  return (\n    <form\n      ref={ref}\n      data-test-id={testId}\n      onSubmit={handleSubmit}\n      {...otherProps}\n    >\n      {children}\n    </form>\n  );\n}\n\n_Form.displayName = 'Form';\n\nexport const Form = forwardRef(_Form);\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}