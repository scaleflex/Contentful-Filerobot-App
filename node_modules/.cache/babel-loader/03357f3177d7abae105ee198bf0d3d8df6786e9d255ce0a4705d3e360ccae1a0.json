{"ast":null,"code":"import { MenuDivider, MenuSectionTitle, Menu } from '@contentful/f36-menu';\nimport { Box, Flex } from '@contentful/f36-core';\nimport N from 'react';\nimport { cx, css } from 'emotion';\nimport a from '@contentful/f36-tokens';\nimport { Avatar } from '@contentful/f36-avatar';\nimport { SkeletonContainer, SkeletonImage, SkeletonText, SkeletonBodyText, SkeletonDisplayText } from '@contentful/f36-skeleton';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport { generateIcon } from '@contentful/f36-icon';\nimport { ExternalLinkIcon, MenuIcon, EnvironmentAliasIcon, EnvironmentIcon } from '@contentful/f36-icons';\nvar Ke = Object.defineProperty,\n  eo = Object.defineProperties;\nvar oo = Object.getOwnPropertyDescriptors;\nvar V = Object.getOwnPropertySymbols;\nvar de = Object.prototype.hasOwnProperty,\n  fe = Object.prototype.propertyIsEnumerable;\nvar le = (e, o, t) => o in e ? Ke(e, o, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: t\n  }) : e[o] = t,\n  s = (e, o) => {\n    for (var t in o || (o = {})) de.call(o, t) && le(e, t, o[t]);\n    if (V) for (var t of V(o)) fe.call(o, t) && le(e, t, o[t]);\n    return e;\n  },\n  p = (e, o) => eo(e, oo(o));\nvar d = (e, o) => {\n  var t = {};\n  for (var r in e) de.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && V) for (var r of V(e)) o.indexOf(r) < 0 && fe.call(e, r) && (t[r] = e[r]);\n  return t;\n};\nvar g = {\n    medium: \"@media (min-width: 480px)\",\n    large: \"@media (min-width: 768px)\",\n    xlarge: \"@media (min-width: 1920px)\"\n  },\n  v = (e = a.glowPrimary) => ({\n    \"&:focus\": {\n      boxShadow: e\n    },\n    \"&:focus:not(:focus-visible)\": {\n      boxShadow: \"unset\"\n    },\n    \"&:focus-visible\": {\n      boxShadow: e\n    }\n  });\nvar be = e => ({\n  containerTop: css({\n    justifyContent: \"center\",\n    backgroundColor: \"#0C141C\"\n  }),\n  containerBottom: css({\n    justifyContent: \"center\",\n    borderTop: \"1px solid #21262D\",\n    backgroundColor: \"#161B22\"\n  }),\n  containerTopContent: css({\n    width: \"100%\",\n    maxWidth: e,\n    padding: `${a.spacingXs}`,\n    minHeight: \"2.5rem\",\n    [g.medium]: {\n      padding: `${a.spacingXs} ${a.spacingM}`\n    }\n  }),\n  containerBottomContent: css({\n    width: \"100%\",\n    maxWidth: e,\n    padding: 0,\n    minHeight: \"2.5rem\",\n    overflow: \"auto\",\n    [g.medium]: {\n      padding: `0 ${a.spacing2Xs}`\n    }\n  })\n});\nfunction no(e, o) {\n  let F = e,\n    {\n      children: t,\n      account: r,\n      search: i,\n      switcher: n,\n      help: m,\n      badge: f,\n      bottomRightItems: c,\n      topRightItems: h,\n      contentMaxWidth: w = \"100%\",\n      testId: I = \"cf-ui-navbar\"\n    } = F,\n    P = d(F, [\"children\", \"account\", \"search\", \"switcher\", \"help\", \"badge\", \"bottomRightItems\", \"topRightItems\", \"contentMaxWidth\", \"testId\"]),\n    E = be(w);\n  return N.createElement(Box, p(s({}, P), {\n    ref: o,\n    testId: I\n  }), N.createElement(Flex, {\n    className: E.containerTop\n  }, N.createElement(Flex, {\n    className: E.containerTopContent,\n    justifyContent: \"space-between\"\n  }, N.createElement(Flex, null, n), N.createElement(Flex, {\n    alignItems: \"center\",\n    gap: \"spacingXs\"\n  }, h, f, i, m, r))), N.createElement(Flex, {\n    className: E.containerBottom\n  }, N.createElement(Flex, {\n    className: E.containerBottomContent,\n    justifyContent: \"space-between\"\n  }, N.createElement(Flex, {\n    as: \"nav\",\n    \"aria-label\": \"Main Navigation\",\n    alignItems: \"stretch\"\n  }, t), c && N.createElement(Flex, null, c))));\n}\nvar ge = N.forwardRef(no);\nvar ao = {\n    warning: a.colorWarning,\n    negative: a.colorNegative,\n    info: a.blue500\n  },\n  ue = () => ({\n    root: css({\n      margin: 0,\n      padding: 0,\n      background: \"none\",\n      border: \"none\",\n      cursor: \"pointer\",\n      position: \"relative\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      gap: a.spacing2Xs,\n      outline: \"none\",\n      borderRadius: \"50%\"\n    }, v()),\n    avatar: css({\n      borderRadius: \"50%\",\n      display: \"block\",\n      height: \"24px\",\n      width: \"24px\"\n    }),\n    notificationIcon: e => css({\n      position: \"absolute\",\n      top: 0,\n      right: 0,\n      height: a.spacingS,\n      width: a.spacingS,\n      borderRadius: \"50%\",\n      border: `2px solid ${a.gray900}`,\n      backgroundColor: ao[e],\n      transform: \"translate(30%, -30%)\",\n      zIndex: 1\n    })\n  });\nvar he = () => ({\n  menuList: css({\n    minWidth: \"250px\"\n  })\n});\nvar R = e => {\n  let {\n      trigger: o,\n      children: t,\n      testId: r = \"cf-ui-navbar-menu-list\",\n      onOpen: i,\n      onClose: n\n    } = e,\n    m = he();\n  return N.createElement(Menu, {\n    onOpen: i,\n    onClose: n\n  }, N.createElement(Menu.Trigger, null, o), N.createElement(Menu.List, {\n    className: m.menuList,\n    testId: r\n  }, t));\n};\nfunction co(e, o) {\n  let P = e,\n    {\n      children: t,\n      className: r,\n      testId: i = \"cf-ui-navbar-account-trigger\",\n      avatar: n,\n      initials: m,\n      username: f,\n      hasNotification: c,\n      notificationVariant: h = \"warning\"\n    } = P,\n    w = d(P, [\"children\", \"className\", \"testId\", \"avatar\", \"initials\", \"username\", \"hasNotification\", \"notificationVariant\"]),\n    I = ue();\n  return N.createElement(R, {\n    trigger: N.createElement(Flex, p(s({}, w), {\n      as: \"button\",\n      ref: o,\n      className: cx(I.root, r),\n      testId: i\n    }), N.createElement(Avatar, {\n      src: n,\n      initials: m,\n      size: \"small\",\n      variant: \"user\"\n    }), c ? N.createElement(\"span\", {\n      className: I.notificationIcon(h)\n    }) : null)\n  }, t);\n}\nvar ee = N.forwardRef(co);\nfunction oe({\n  ariaLabel: e\n}) {\n  return N.createElement(SkeletonContainer, {\n    svgWidth: 24,\n    svgHeight: 24,\n    ariaLabel: e,\n    backgroundColor: a.gray800,\n    foregroundColor: a.gray700\n  }, N.createElement(SkeletonImage, {\n    width: 24,\n    height: 24,\n    radiusX: 12,\n    radiusY: 12\n  }));\n}\nvar ye = () => css({\n    \"&\": {\n      color: a.colorWhite,\n      \"& svg\": {\n        fill: a.colorWhite\n      }\n    },\n    \"&::after\": {\n      content: '\"\"',\n      position: \"absolute\",\n      width: `calc(100% - ${a.spacingM})`,\n      height: \"2px\",\n      bottom: \"0.5px\",\n      left: 0,\n      right: 0,\n      margin: \"auto\",\n      backgroundColor: a.colorWhite,\n      zIndex: 0\n    }\n  }),\n  Ie = {\n    display: \"flex\",\n    justifyContent: \"center\",\n    padding: `10px ${a.spacingS}`,\n    alignItems: \"center\",\n    background: \"none\"\n  },\n  xe = () => ({\n    root: css(Ie, {\n      alignItems: \"center\",\n      background: \"none\",\n      border: 0,\n      margin: 0,\n      outline: \"none\",\n      fontSize: a.fontSizeM,\n      lineHeight: a.lineHeightM,\n      fontWeight: a.fontWeightMedium,\n      position: \"relative\",\n      textAlign: \"left\",\n      whiteSpace: \"nowrap\",\n      cursor: \"pointer\",\n      hyphens: \"auto\",\n      textDecoration: \"none\",\n      color: hexToRGBA(a.gray300, .8),\n      boxSizing: \"border-box\",\n      transition: `color ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`,\n      borderRadius: a.borderRadiusMedium,\n      \"&::before\": {\n        content: '\"\"',\n        position: \"absolute\",\n        width: `calc(100% - ${a.spacingXs})`,\n        height: `calc(100% - ${a.spacingS})`,\n        top: `calc(${a.spacingS} / 2)`,\n        left: 0,\n        right: 0,\n        margin: \"auto\",\n        borderRadius: a.borderRadiusSmall,\n        backgroundColor: hexToRGBA(a.colorWhite, .08),\n        opacity: 0,\n        zIndex: 0,\n        scale: 0,\n        transition: `all ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`\n      },\n      \"&:hover::before\": {\n        opacity: 1,\n        scale: \"1\"\n      },\n      \"&:active::before\": {\n        backgroundColor: \"rgba(255, 255, 255, 0.1)\"\n      },\n      \"&:disabled\": {\n        cursor: \"auto\"\n      },\n      \"& svg\": {\n        fill: hexToRGBA(a.gray300, .8),\n        transition: `fill ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`,\n        \"&:first-child\": {\n          display: \"none\",\n          [g.large]: {\n            display: \"block\"\n          }\n        }\n      },\n      \"& > svg, & > span\": {\n        zIndex: a.zIndexDefault\n      }\n    }, v(`inset ${a.glowPrimary}`)),\n    isActive: ye(),\n    dropdownIcon: css({\n      paddingLeft: a.spacing2Xs\n    })\n  }),\n  Pe = () => ({\n    root: css(Ie)\n  });\nvar Se = () => ({\n  root: css({\n    \"&:first-child\": {\n      marginRight: a.spacing2Xs\n    },\n    \"&:last-child\": {\n      marginLeft: a.spacing2Xs\n    },\n    \"img&\": {\n      borderRadius: a.borderRadiusSmall,\n      maxWidth: a.spacingM,\n      maxHeight: a.spacingM\n    }\n  })\n});\nvar z = e => {\n  var i, n;\n  let {\n      icon: o,\n      variant: t\n    } = e,\n    r = Se();\n  return N.cloneElement(o, {\n    className: cx(o.props.className, r.root),\n    size: (i = o.props.size) != null ? i : \"tiny\",\n    variant: (n = o.props.variant) != null ? n : t\n  });\n};\nvar Me = generateIcon({\n  name: \"CircleIcon\",\n  viewBox: \"0 0 24 24\",\n  path: N.createElement(\"path\", {\n    d: \"M11.994 6.526A5.47 5.47 0 0 0 6.526 12a5.47 5.47 0 0 0 5.468 5.473A5.476 5.476 0 0 0 17.473 12a5.477 5.477 0 0 0-5.479-5.474ZM12 15.447a3.448 3.448 0 1 1 0-6.896 3.448 3.448 0 0 1 0 6.896Z\",\n    fill: \"currentFill\"\n  })\n});\nvar we = generateIcon({\n  name: \"ArrowDownIcon\",\n  viewBox: \"0 0 12 20\",\n  path: N.createElement(\"path\", {\n    d: \"M3.03076 8C2.20109 8 1.73228 8.95209 2.23814 9.60971L5.20727 13.4696C5.60757 13.99 6.39223 13.99 6.79252 13.4696L9.76166 9.60971C10.2675 8.95209 9.79871 8 8.96904 8L3.03076 8Z\",\n    fill: \"#9FA8B2\"\n  })\n});\nvar Ee = generateIcon({\n  name: \"HelpIcon\",\n  viewBox: \"0 0 24 24\",\n  path: N.createElement(N.Fragment, null, N.createElement(\"g\", {\n    clipPath: \"url(#HelpIcon_svg__a)\"\n  }, N.createElement(\"path\", {\n    d: \"M12 2.25A9.75 9.75 0 1 0 21.75 12 9.769 9.769 0 0 0 12 2.25ZM12 18a1.125 1.125 0 1 1 0-2.25A1.125 1.125 0 0 1 12 18Zm.75-4.584v.084a.75.75 0 1 1-1.5 0v-.75A.75.75 0 0 1 12 12a1.875 1.875 0 1 0-1.875-1.875.75.75 0 1 1-1.5 0 3.375 3.375 0 1 1 4.125 3.29Z\",\n    fill: \"currentFill\"\n  })), N.createElement(\"defs\", null, N.createElement(\"clipPath\", {\n    id: \"HelpIcon_svg__a\"\n  }, N.createElement(\"path\", {\n    fill: \"currentFill\",\n    d: \"M0 0h24v24H0z\"\n  }))))\n});\nvar Ae = generateIcon({\n  name: \"SearchIcon\",\n  viewBox: \"0 0 24 24\",\n  path: N.createElement(N.Fragment, null, N.createElement(\"g\", {\n    clipPath: \"url(#SearchIcon_svg__a)\"\n  }, N.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6 11.125a5.125 5.125 0 1 1 10.25 0 5.125 5.125 0 0 1-10.25 0ZM11.125 4a7.125 7.125 0 1 0 4.282 12.82l2.886 2.887a1 1 0 0 0 1.414-1.414l-2.886-2.887A7.125 7.125 0 0 0 11.125 4Z\",\n    fill: \"currentFill\"\n  })), N.createElement(\"defs\", null, N.createElement(\"clipPath\", {\n    id: \"SearchIcon_svg__a\"\n  }, N.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M0 0h24v24H0z\"\n  }))))\n});\nvar Ce = generateIcon({\n  name: \"ContentfulLogoIcon\",\n  viewBox: \"0 0 24 24\",\n  path: N.createElement(N.Fragment, null, N.createElement(\"g\", {\n    clipPath: \"url(#a)\"\n  }, N.createElement(\"path\", {\n    d: \"M8.71 3.007c.844.843 1.17 2.078.844 3.228a6.683 6.683 0 0 1 3.444-.953h.025a6.701 6.701 0 0 1 4.743 1.988 2.637 2.637 0 0 0 3.73.093 2.637 2.637 0 0 0 .094-3.731c-.025-.027-.052-.052-.08-.08A11.95 11.95 0 0 0 13.036.006h-.046a11.92 11.92 0 0 0-6.691 2.038h.074c.876 0 1.715.346 2.335.966l.002-.002Z\",\n    fill: \"#1773EB\"\n  }), N.createElement(\"path\", {\n    d: \"M19.593 16.006c-.696 0-1.365.276-1.86.765a6.706 6.706 0 0 1-4.732 1.953h-.025a6.617 6.617 0 0 1-3.446-.97c.079.287.117.584.117.882a3.3 3.3 0 0 1-3.299 3.3h-.087a11.929 11.929 0 0 0 6.696 2.07h.046a11.934 11.934 0 0 0 8.45-3.486 2.64 2.64 0 0 0-1.857-4.514h-.003Z\",\n    fill: \"#E44F20\"\n  }), N.createElement(\"path\", {\n    d: \"M4.013 16.301a3.283 3.283 0 0 1 2.335-.967c.303 0 .604.041.893.123a6.696 6.696 0 0 1 .014-6.928 3.302 3.302 0 0 1-4.176-3.187v-.09a12 12 0 0 0-.033 13.452v-.068c0-.877.344-1.715.967-2.335Z\",\n    fill: \"#FFDA00\"\n  }), N.createElement(\"path\", {\n    d: \"M6.378 2.627c-.751 0-1.275.311-1.912.948-.606.606-.797 1.136-.8 1.767a2.712 2.712 0 1 0 5.427-.003A2.713 2.713 0 0 0 6.38 2.627h-.003Z\",\n    fill: \"#1773EB\"\n  }), N.createElement(\"path\", {\n    d: \"M3.628 18.639c0 .748.311 1.275.948 1.912.606.606 1.136.8 1.767.8a2.703 2.703 0 1 0-.017-5.408 2.703 2.703 0 0 0-2.695 2.704v-.008h-.003Z\",\n    fill: \"#E44F20\"\n  })), N.createElement(\"defs\", null, N.createElement(\"clipPath\", {\n    id: \"a\"\n  }, N.createElement(\"path\", {\n    fill: \"#fff\",\n    d: \"M0 0h24v24H0z\"\n  }))))\n});\nvar Mo = \"button\";\nfunction wo(e, o) {\n  let F = e,\n    {\n      as: t = Mo,\n      icon: r,\n      title: i,\n      children: n,\n      className: m,\n      isActive: f,\n      testId: c = \"cf-ui-navbar-item\",\n      onOpen: h,\n      onClose: w\n    } = F,\n    I = d(F, [\"as\", \"icon\", \"title\", \"children\", \"className\", \"isActive\", \"testId\", \"onOpen\", \"onClose\"]),\n    P = xe(),\n    E = N.createElement(t, p(s({}, I), {\n      ref: o,\n      \"data-test-id\": c,\n      className: cx(P.root, f && P.isActive, m)\n    }), r ? N.createElement(z, {\n      icon: r,\n      variant: \"white\"\n    }) : null, N.createElement(\"span\", null, i), ke(e) && N.createElement(we, {\n      className: P.dropdownIcon\n    }));\n  return ke(e) ? N.createElement(R, {\n    trigger: E,\n    testId: c,\n    onOpen: h,\n    onClose: w\n  }, n) : E;\n}\nvar ke = e => !!e.children,\n  re = N.forwardRef(wo);\nvar ne = ({\n  estimatedWidth: e\n}) => {\n  let o = Pe();\n  return N.createElement(SkeletonContainer, {\n    className: o.root,\n    svgWidth: e,\n    svgHeight: 40,\n    backgroundColor: a.gray800,\n    foregroundColor: a.gray700\n  }, N.createElement(SkeletonText, {\n    lineHeight: 6,\n    numberOfLines: 1,\n    offsetTop: 7,\n    radiusX: a.borderRadiusSmall,\n    radiusY: a.borderRadiusSmall\n  }));\n};\nvar Re = () => ({\n  root: css({\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\"\n  })\n});\nvar Bo = \"button\";\nfunction _o(e, o) {\n  let h = e,\n    {\n      as: t = Bo,\n      icon: r,\n      title: i,\n      className: n\n    } = h,\n    m = d(h, [\"as\", \"icon\", \"title\", \"className\"]),\n    f = Re(),\n    c = Lo(e);\n  return N.createElement(Menu.Item, p(s({}, m), {\n    ref: o,\n    as: t,\n    className: cx(f.root, n)\n  }), r ? N.createElement(z, {\n    icon: r,\n    variant: \"secondary\"\n  }) : c && Be, N.createElement(\"span\", null, i), r && c ? Be : null);\n}\nvar Be = N.createElement(z, {\n    icon: N.createElement(ExternalLinkIcon, null),\n    variant: \"muted\"\n  }),\n  Lo = e => e.as === \"a\" && e.target === \"_blank\",\n  ae = N.forwardRef(_o);\nvar ie = ({\n  ariaLabel: e\n}) => N.createElement(Menu.Item, null, N.createElement(Flex, {\n  alignItems: \"center\",\n  gap: a.spacingXs\n}, N.createElement(SkeletonContainer, {\n  svgHeight: 16,\n  svgWidth: 18\n}, N.createElement(SkeletonImage, {\n  width: 16,\n  height: 16\n})), N.createElement(SkeletonContainer, {\n  svgHeight: 16,\n  svgWidth: 190,\n  ariaLabel: e\n}, N.createElement(SkeletonBodyText, {\n  numberOfLines: 1\n}))));\nvar Le = () => ({\n  root: css({\n    margin: 0,\n    padding: 0,\n    background: \"none\",\n    border: \"none\",\n    color: a.gray300,\n    cursor: \"pointer\",\n    fontSize: a.fontSizeS,\n    fontWeight: a.fontWeightMedium,\n    position: \"relative\",\n    outline: \"none\",\n    borderRadius: a.borderRadiusMedium,\n    \"&:after\": {\n      content: '\"\"',\n      border: \"1px solid #353A41\",\n      boxSizing: \"border-box\",\n      height: \"16px\",\n      right: \"-1px\",\n      position: \"absolute\",\n      width: 0\n    },\n    \"&:last-child:after\": {\n      display: \"none\"\n    },\n    \"&:hover li\": {\n      backgroundColor: hexToRGBA(a.colorWhite, .15)\n    }\n  }, v(`0px 0px 0px 2px ${a.colorBlack}, 0px 0px 0px 5px ${a.blue300}`)),\n  breadcrumbs: css({\n    listStyleType: \"none\",\n    margin: 0,\n    padding: 0,\n    position: \"relative\"\n  }),\n  menuIcon: css({\n    display: \"none\",\n    [g.medium]: {\n      display: \"block\"\n    }\n  })\n});\nfunction Vo(e, o) {\n  let c = e,\n    {\n      children: t,\n      className: r,\n      logo: i,\n      testId: n = \"cf-ui-navbar-switcher\"\n    } = c,\n    m = d(c, [\"children\", \"className\", \"logo\", \"testId\"]),\n    f = Le();\n  return N.createElement(Flex, p(s({}, m), {\n    as: \"button\",\n    ref: o,\n    className: cx(f.root, r),\n    testId: n,\n    alignItems: \"center\",\n    fullHeight: !0,\n    gap: \"spacingXs\"\n  }), i || N.createElement(Ce, null), N.createElement(MenuIcon, {\n    className: f.menuIcon,\n    size: \"small\",\n    variant: \"white\"\n  }), N.createElement(Flex, {\n    as: \"ul\",\n    alignItems: \"center\",\n    className: f.breadcrumbs\n  }, t));\n}\nvar pe = N.forwardRef(Vo);\nvar me = ({\n  estimatedWidth: e\n}) => N.createElement(SkeletonContainer, {\n  svgWidth: e,\n  svgHeight: 24,\n  backgroundColor: a.gray800,\n  foregroundColor: a.gray700\n}, N.createElement(SkeletonDisplayText, {\n  lineHeight: 24,\n  numberOfLines: 1,\n  radiusX: 12,\n  radiusY: 12\n}));\nvar Oe = () => ({\n  root: css({\n    margin: 0,\n    padding: 0,\n    background: \"none\",\n    border: \"none\",\n    cursor: \"pointer\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    minWidth: a.spacingL,\n    transition: `color ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`,\n    outline: \"none\",\n    borderRadius: a.borderRadiusMedium,\n    \"& svg\": {\n      fill: a.gray300,\n      transition: `fill ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`\n    },\n    \"&:hover, & svg:hover\": {\n      color: a.gray100,\n      fill: a.gray100\n    }\n  }, v())\n});\nfunction Yo(e, o) {\n  let m = e,\n    {\n      className: t,\n      testId: r = \"cf-ui-navbar-search\"\n    } = m,\n    i = d(m, [\"className\", \"testId\"]),\n    n = Oe();\n  return N.createElement(Flex, p(s({\n    \"aria-label\": \"Quick Search\"\n  }, i), {\n    as: \"button\",\n    ref: o,\n    className: cx(n.root, t),\n    testId: r\n  }), N.createElement(Ae, {\n    size: \"medium\",\n    variant: \"white\"\n  }));\n}\nvar ze = N.forwardRef(Yo);\nvar De = {\n    display: \"none\",\n    \"&:first-child\": {\n      display: \"block\"\n    },\n    [g.medium]: {\n      display: \"block\",\n      \"&:first-child\": {\n        display: \"none\"\n      }\n    }\n  },\n  $e = () => ({\n    breadcrumbsItem: css({\n      position: \"relative\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      backgroundColor: hexToRGBA(a.gray100, .1),\n      boxShadow: `0px 0px 0px 2px ${a.colorBlack}`,\n      display: \"inline-flex\",\n      margin: 0,\n      minWidth: 0,\n      padding: `0 ${a.spacingXs}`,\n      height: a.spacingL,\n      borderRadius: \"3rem\",\n      zIndex: 2,\n      transition: `background-color ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`,\n      whiteSpace: \"nowrap\",\n      \"&:not(:first-child)\": {\n        clipPath: \"path('M0 24C6 24 10 18 10 10C10 5 6 0 0 0H400C400 0 400 5 400 24H0Z')\"\n      },\n      \"&:first-child\": {\n        minWidth: \"24px\"\n      },\n      \"&:nth-child(2)\": {\n        zIndex: 1,\n        left: `-${a.spacingXs}`,\n        paddingLeft: a.spacingM,\n        borderRadius: \"0 3rem 3rem 0\",\n        span: {\n          maxWidth: \"80px\",\n          textOverflow: \"ellipsis\",\n          overflow: \"hidden\",\n          [g.large]: {\n            maxWidth: \"100%\"\n          }\n        }\n      },\n      \"&:nth-child(3)\": {\n        left: `-${a.spacingM}`,\n        paddingLeft: a.spacingM,\n        borderRadius: \"0 3rem 3rem 0\",\n        fontFamily: a.fontStackMonospace,\n        fontSize: a.fontSizeS,\n        fontWeight: a.fontWeightMedium,\n        zIndex: 0,\n        span: {\n          maxWidth: \"40px\",\n          textOverflow: \"ellipsis\",\n          overflow: \"hidden\",\n          [g.large]: {\n            maxWidth: \"100%\"\n          }\n        },\n        \"> div\": {\n          [g.medium]: {\n            gap: a.spacing2Xs\n          }\n        }\n      }\n    }),\n    breadcrumbsItemCircle: css({\n      borderRadius: \"50%\",\n      color: a.gray400,\n      padding: 0,\n      display: \"flex\",\n      justifyContent: \"center\",\n      fontSize: \"11px\",\n      width: a.spacingL,\n      height: a.spacingL\n    }),\n    breadcrumbsItemEnvMaster: css({\n      color: a.green400,\n      \" svg\": p(s({}, De), {\n        fill: a.green400\n      })\n    }),\n    breadcrumbsItemEnvNonMaster: css({\n      color: a.orange400,\n      svg: p(s({}, De), {\n        fill: a.orange400\n      })\n    })\n  });\nfunction Ge({\n  isAlias: e\n}) {\n  return N.createElement(N.Fragment, null, N.createElement(Me, {\n    key: \"mobile-icon\",\n    size: \"tiny\"\n  }), e ? N.createElement(EnvironmentAliasIcon, {\n    key: \"full-icon\",\n    size: \"tiny\"\n  }) : N.createElement(EnvironmentIcon, {\n    key: \"full-icon\",\n    size: \"tiny\"\n  }));\n}\nfunction tt(e, o) {\n  let I = e,\n    {\n      children: t,\n      isCircle: r,\n      className: i,\n      envVariant: n,\n      isAlias: m,\n      testId: f = \"cf-ui-navbar-switcher-item\"\n    } = I,\n    c = d(I, [\"children\", \"isCircle\", \"className\", \"envVariant\", \"isAlias\", \"testId\"]),\n    h = $e(),\n    w = cx(h.breadcrumbsItem, i, {\n      [h.breadcrumbsItemCircle]: r,\n      [h.breadcrumbsItemEnvMaster]: n === \"master\",\n      [h.breadcrumbsItemEnvNonMaster]: n === \"non-master\"\n    });\n  return N.createElement(\"li\", p(s({}, c), {\n    ref: o,\n    className: w,\n    \"data-test-id\": f\n  }), N.createElement(Flex, {\n    fullHeight: !0,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, n && N.createElement(Ge, {\n    isAlias: m\n  }), N.createElement(\"span\", null, t)));\n}\nvar Ve = N.forwardRef(tt);\nvar Xe = () => ({\n  root: css({\n    margin: 0,\n    padding: 0,\n    background: \"none\",\n    border: \"none\",\n    cursor: \"pointer\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: a.gray300,\n    fontSize: 0,\n    gap: 0,\n    minWidth: a.spacingL,\n    transition: `color ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`,\n    outline: \"none\",\n    borderRadius: a.borderRadiusMedium,\n    [g.medium]: {\n      fontSize: a.fontSizeS,\n      gap: a.spacing2Xs,\n      fontWeight: a.fontWeightMedium,\n      marginRight: a.spacingXs\n    },\n    \"&:hover, &:hover svg\": {\n      color: a.gray100,\n      fill: a.gray100\n    },\n    \"& svg\": {\n      fill: a.gray300,\n      transition: `fill ${a.transitionDurationShort} ${a.transitionEasingCubicBezier}`\n    }\n  }, v())\n});\nfunction it(e, o) {\n  let f = e,\n    {\n      children: t,\n      className: r,\n      testId: i = \"cf-ui-navbar-help-trigger\"\n    } = f,\n    n = d(f, [\"children\", \"className\", \"testId\"]),\n    m = Xe();\n  return N.createElement(R, {\n    testId: \"cf-ui-navbar-help-menu\",\n    trigger: N.createElement(Flex, p(s({\n      \"aria-label\": \"Help Menu\"\n    }, n), {\n      as: \"button\",\n      ref: o,\n      className: cx(m.root, r),\n      testId: i\n    }), N.createElement(Ee, {\n      size: \"medium\",\n      variant: \"white\"\n    }), \"Help\")\n  }, t);\n}\nvar Ue = N.forwardRef(it);\nvar Ze = () => ({\n  root: css({\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    background: \"none\",\n    border: `1px solid ${a.purple400}`,\n    margin: 0,\n    outline: \"none\",\n    fontSize: a.fontSizeS,\n    lineHeight: a.lineHeightS,\n    fontWeight: a.fontWeightMedium,\n    textAlign: \"center\",\n    padding: `0 ${a.spacingXs}`,\n    textDecoration: \"none\",\n    color: `${a.purple400}!important`,\n    borderRadius: \"1.75rem\"\n  })\n});\nvar mt = \"div\";\nfunction ct(e, o) {\n  let c = e,\n    {\n      as: t = mt,\n      children: r,\n      className: i,\n      testId: n = \"cf-ui-navbar-badge\"\n    } = c,\n    m = d(c, [\"as\", \"children\", \"className\", \"testId\"]),\n    f = Ze();\n  return N.createElement(t, p(s({}, m), {\n    ref: o,\n    className: cx(f.root, i),\n    \"data-test-id\": n\n  }), r);\n}\nvar qe = N.forwardRef(ct);\nvar Ye = () => ({\n  root: css({\n    margin: 0,\n    background: \"none\",\n    border: \"none\",\n    cursor: \"pointer\",\n    display: \"flex\",\n    gap: a.spacing2Xs,\n    alignItems: \"center\",\n    color: a.gray300,\n    padding: `0 ${a.spacing2Xs}`,\n    minHeight: a.spacingL,\n    fontSize: a.fontSizeS,\n    fontWeight: a.fontWeightMedium,\n    outline: \"none\",\n    borderRadius: a.borderRadiusMedium,\n    \"&:hover\": {\n      color: a.gray100\n    },\n    svg: {\n      fill: \"currentColor\"\n    }\n  }, v())\n});\nvar ft = \"button\";\nfunction bt(e, o) {\n  let c = e,\n    {\n      as: t = ft,\n      children: r,\n      className: i,\n      testId: n = \"cf-ui-navbar-topbar-item\"\n    } = c,\n    m = d(c, [\"as\", \"children\", \"className\", \"testId\"]),\n    f = Ye();\n  return N.createElement(t, p(s({}, m), {\n    ref: o,\n    className: cx(f.root, i),\n    \"data-test-id\": n\n  }), r);\n}\nvar Je = N.forwardRef(bt);\nvar b = ge;\nb.Item = re;\nb.ItemSkeleton = ne;\nb.MenuItem = ae;\nb.MenuItemSkeleton = ie;\nb.MenuDivider = MenuDivider;\nb.MenuSectionTitle = MenuSectionTitle;\nb.Switcher = pe;\nb.SwitcherSkeleton = me;\nb.SwitcherItem = Ve;\nb.Search = ze;\nb.Help = Ue;\nb.Account = ee;\nb.AccountSkeleton = oe;\nb.Badge = qe;\nb.TopbarItem = Je;\nexport { b as Navbar, ye as getNavbarItemActiveStyles };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":[],"sources":["/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/CompoundNavbar.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/Navbar.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/Navbar.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/utils.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarAccount/NavbarAccount.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarAccount/NavbarAccount.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarMenu/NavbarMenu.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarMenu/NavbarMenu.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarAccount/NavbarAccountSkeleton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarItem/NavbarItem.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarItem/NavbarItem.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarItemIcon/NavbarItemIcon.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarItemIcon/NavbarItemIcon.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/icons/CircleIcon.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/icons/ArrowDownIcon.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/icons/HelpIcon.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/icons/SearchIcon.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/icons/ContentfulLogoIcon.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarItem/NavbarItemSkeleton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarMenuItem/NavbarMenuItem.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarMenuItem/NavbarMenuItem.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarMenuItem/NavbarMenuItemSkeleton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSwitcher/NavbarSwitcher.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSwitcher/NavbarSwitcher.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSwitcher/NavbarSwitcherSkeleton.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSearch/NavbarSearch.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSearch/NavbarSearch.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSwitcherItem/NavbarSwitcherItem.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSwitcherItem/NavbarSwitcherItem.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarSwitcherItem/NavbarEnvVariant.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarHelp/NavbarHelp.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarHelp/NavbarHelp.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarBadge/NavbarBadge.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarBadge/NavbarBadge.styles.ts","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarTopbarItem/NavbarTopbarItem.tsx","/home/hieple1993/Contentful-Filerobot-App/node_modules/@contentful/f36-navbar/src/NavbarTopbarItem/NavbarTopbarItem.styles.ts"],"sourcesContent":["import { MenuDivider } from '@contentful/f36-menu';\nimport { MenuSectionTitle } from '@contentful/f36-menu';\nimport { Navbar as OriginalNavbar } from './Navbar';\n\nimport { NavbarAccount, NavbarAccountSkeleton } from './NavbarAccount';\nimport { NavbarItem, NavbarItemSkeleton } from './NavbarItem';\nimport { NavbarMenuItem, NavbarMenuItemSkeleton } from './NavbarMenuItem';\nimport { NavbarSwitcher, NavbarSwitcherSkeleton } from './NavbarSwitcher';\n\nimport { NavbarSearch } from './NavbarSearch/NavbarSearch';\nimport { NavbarSwitcherItem } from './NavbarSwitcherItem/NavbarSwitcherItem';\nimport { NavbarHelp } from './NavbarHelp/NavbarHelp';\nimport { NavbarBadge } from './NavbarBadge/NavbarBadge';\nimport { NavbarTopbarItem } from './NavbarTopbarItem/NavbarTopbarItem';\n\ntype CompoundNavbar = typeof OriginalNavbar & {\n  Item: typeof NavbarItem;\n  ItemSkeleton: typeof NavbarItemSkeleton;\n  MenuItem: typeof NavbarMenuItem;\n  MenuItemSkeleton: typeof NavbarMenuItemSkeleton;\n  MenuDivider: typeof MenuDivider;\n  MenuSectionTitle: typeof MenuSectionTitle;\n  Switcher: typeof NavbarSwitcher;\n  SwitcherSkeleton: typeof NavbarSwitcherSkeleton;\n  SwitcherItem: typeof NavbarSwitcherItem;\n  Search: typeof NavbarSearch;\n  Help: typeof NavbarHelp;\n  Account: typeof NavbarAccount;\n  AccountSkeleton: typeof NavbarAccountSkeleton;\n  Badge: typeof NavbarBadge;\n  TopbarItem: typeof NavbarTopbarItem;\n};\n\nexport const Navbar = OriginalNavbar as CompoundNavbar;\nNavbar.Item = NavbarItem;\nNavbar.ItemSkeleton = NavbarItemSkeleton;\nNavbar.MenuItem = NavbarMenuItem;\nNavbar.MenuItemSkeleton = NavbarMenuItemSkeleton;\nNavbar.MenuDivider = MenuDivider;\nNavbar.MenuSectionTitle = MenuSectionTitle;\nNavbar.Switcher = NavbarSwitcher;\nNavbar.SwitcherSkeleton = NavbarSwitcherSkeleton;\nNavbar.SwitcherItem = NavbarSwitcherItem;\nNavbar.Search = NavbarSearch;\nNavbar.Help = NavbarHelp;\nNavbar.Account = NavbarAccount;\nNavbar.AccountSkeleton = NavbarAccountSkeleton;\nNavbar.Badge = NavbarBadge;\nNavbar.TopbarItem = NavbarTopbarItem;\n","import {\n  Box,\n  type CommonProps,\n  type ExpandProps,\n  Flex,\n} from '@contentful/f36-core';\nimport React from 'react';\nimport { getNavbarStyles } from './Navbar.styles';\n\ntype NavbarOwnProps = CommonProps & {\n  children?: React.ReactNode;\n  account?: React.ReactNode;\n  search?: React.ReactNode;\n  switcher?: React.ReactNode;\n  help?: React.ReactNode;\n  badge?: React.ReactNode;\n  /**\n   * Items that will be rendered on the bottom-right of the navbar.\n   * Useful for separating other navigation items from main ones, (e.g. separating \"Settings\" from all other navigation items).\n   */\n  bottomRightItems?: React.ReactNode;\n  /**\n   * Items that will be rendered on the top-right of the navbar.\n   * Useful for providing additional context or actions to the user (e.g. a Feedback form link).\n   */\n  topRightItems?: React.ReactNode;\n  /**\n   * Defines the max-width of the content inside the navbar.\n   * @default '100%'\n   */\n  contentMaxWidth?: string;\n};\n\n// expose only the HTML props that are needed to not pollute the API\ntype NavbarHTMLElementProps = Pick<React.ComponentPropsWithoutRef<'div'>, 'id'>;\n\nexport type NavbarProps = NavbarHTMLElementProps & NavbarOwnProps;\n\nfunction _Navbar(props: ExpandProps<NavbarProps>, ref: React.Ref<HTMLElement>) {\n  const {\n    children,\n    account,\n    search,\n    switcher,\n    help,\n    badge,\n    bottomRightItems,\n    topRightItems,\n    contentMaxWidth = '100%',\n    testId = 'cf-ui-navbar',\n    ...otherProps\n  } = props;\n  const styles = getNavbarStyles(contentMaxWidth);\n\n  return (\n    <Box {...otherProps} ref={ref} testId={testId}>\n      <Flex className={styles.containerTop}>\n        <Flex\n          className={styles.containerTopContent}\n          justifyContent=\"space-between\"\n        >\n          <Flex>{switcher}</Flex>\n          <Flex alignItems=\"center\" gap=\"spacingXs\">\n            {topRightItems}\n            {badge}\n            {search}\n            {help}\n            {account}\n          </Flex>\n        </Flex>\n      </Flex>\n\n      <Flex className={styles.containerBottom}>\n        <Flex\n          className={styles.containerBottomContent}\n          justifyContent=\"space-between\"\n        >\n          <Flex as=\"nav\" aria-label=\"Main Navigation\" alignItems=\"stretch\">\n            {children}\n          </Flex>\n          {bottomRightItems && <Flex>{bottomRightItems}</Flex>}\n        </Flex>\n      </Flex>\n    </Box>\n  );\n}\n\nexport const Navbar = React.forwardRef(_Navbar);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { mqs } from './utils.styles';\n\nexport const getNavbarStyles = (maxWidth: string) => ({\n  containerTop: css({\n    justifyContent: 'center',\n    backgroundColor: '#0C141C',\n  }),\n  containerBottom: css({\n    justifyContent: 'center',\n    borderTop: `1px solid #21262D`,\n    backgroundColor: '#161B22',\n  }),\n  containerTopContent: css({\n    width: '100%',\n    maxWidth: maxWidth,\n    padding: `${tokens.spacingXs}`,\n    minHeight: '2.5rem',\n    [mqs.medium]: {\n      padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    },\n  }),\n  containerBottomContent: css({\n    width: '100%',\n    maxWidth: maxWidth,\n    padding: 0,\n    minHeight: '2.5rem',\n    overflow: 'auto',\n    [mqs.medium]: {\n      padding: `0 ${tokens.spacing2Xs}`,\n    },\n  }),\n});\n","import tokens from '@contentful/f36-tokens';\n\ntype screens = 'medium' | 'large' | 'xlarge';\ntype mediaqueries = Record<screens, string>;\nexport const mqs: mediaqueries = {\n  medium: '@media (min-width: 480px)',\n  large: '@media (min-width: 768px)',\n  xlarge: '@media (min-width: 1920px)',\n};\n\nexport const getGlowOnFocusStyles = (shadow: string = tokens.glowPrimary) => ({\n  '&:focus': {\n    boxShadow: shadow,\n  },\n  '&:focus:not(:focus-visible)': {\n    boxShadow: 'unset',\n  },\n  '&:focus-visible': {\n    boxShadow: shadow,\n  },\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarAccountStyles } from './NavbarAccount.styles';\nimport {\n  Flex,\n  type PropsWithHTMLElement,\n  type CommonProps,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { NavbarMenu } from '../NavbarMenu/NavbarMenu';\nimport { Avatar } from '@contentful/f36-avatar';\n\ntype NavbarAccountOwnProps = CommonProps & {\n  children: React.ReactNode;\n  username: string;\n  avatar?: string;\n  initials?: string;\n  hasNotification?: boolean;\n  /**\n   * @default 'warning'\n   */\n  notificationVariant?: 'warning' | 'negative' | 'info';\n};\n\nexport type NavbarAccountProps = PropsWithHTMLElement<\n  NavbarAccountOwnProps,\n  'button'\n>;\n\nfunction _NavbarAccount(\n  props: ExpandProps<NavbarAccountProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-navbar-account-trigger',\n    avatar,\n    initials,\n    username,\n    hasNotification,\n    notificationVariant = 'warning',\n    ...otherProps\n  } = props;\n  const styles = getNavbarAccountStyles();\n\n  return (\n    <NavbarMenu\n      trigger={\n        <Flex\n          {...otherProps}\n          as=\"button\"\n          ref={ref}\n          className={cx(styles.root, className)}\n          testId={testId}\n        >\n          <Avatar\n            src={avatar}\n            initials={initials}\n            size=\"small\"\n            variant=\"user\"\n          />\n          {hasNotification ? (\n            <span className={styles.notificationIcon(notificationVariant)} />\n          ) : null}\n        </Flex>\n      }\n    >\n      {children}\n    </NavbarMenu>\n  );\n}\n\nexport const NavbarAccount = React.forwardRef(_NavbarAccount);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { NavbarAccountProps } from './NavbarAccount';\nimport { getGlowOnFocusStyles } from '../utils.styles';\n\nconst notificationVarianColorMap: Record<\n  NavbarAccountProps['notificationVariant'],\n  string\n> = {\n  warning: tokens.colorWarning,\n  negative: tokens.colorNegative,\n  info: tokens.blue500,\n};\n\nexport const getNavbarAccountStyles = () => ({\n  root: css(\n    {\n      // default button reset styles\n      margin: 0,\n      padding: 0,\n      background: 'none',\n      border: 'none',\n\n      cursor: 'pointer',\n      position: 'relative',\n      alignItems: 'center',\n      justifyContent: 'center',\n      gap: tokens.spacing2Xs,\n      outline: 'none',\n      borderRadius: '50%',\n    },\n    getGlowOnFocusStyles(),\n  ),\n  avatar: css({\n    borderRadius: '50%',\n    display: 'block',\n    height: '24px',\n    width: '24px',\n  }),\n  notificationIcon: (variant: NavbarAccountProps['notificationVariant']) =>\n    css({\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      height: tokens.spacingS,\n      width: tokens.spacingS,\n      borderRadius: '50%',\n      border: `2px solid ${tokens.gray900}`,\n      backgroundColor: notificationVarianColorMap[variant],\n      transform: 'translate(30%, -30%)',\n      zIndex: 1, // move above the avatar\n    }),\n});\n","import React from 'react';\nimport { Menu, type MenuListProps, type MenuProps } from '@contentful/f36-menu';\nimport { getNavbarMenuStyles } from './NavbarMenu.styles';\n\nexport type NavbarMenuProps = {\n  trigger: React.ReactNode;\n  children?: React.ReactNode;\n} & Pick<MenuListProps, 'testId'> &\n  Pick<MenuProps, 'onOpen' | 'onClose'>;\n\nexport const NavbarMenu = (props: NavbarMenuProps) => {\n  const {\n    trigger,\n    children,\n    testId = 'cf-ui-navbar-menu-list',\n    onOpen,\n    onClose,\n  } = props;\n  const styles = getNavbarMenuStyles();\n\n  return (\n    <Menu onOpen={onOpen} onClose={onClose}>\n      <Menu.Trigger>{trigger}</Menu.Trigger>\n      <Menu.List className={styles.menuList} testId={testId}>\n        {children}\n      </Menu.List>\n    </Menu>\n  );\n};\n","import { css } from 'emotion';\n\nexport const getNavbarMenuStyles = () => ({\n  menuList: css({\n    minWidth: '250px',\n  }),\n});\n","import React from 'react';\nimport { SkeletonContainer, SkeletonImage } from '@contentful/f36-skeleton';\nimport tokens from '@contentful/f36-tokens';\n\nexport function NavbarAccountSkeleton({ ariaLabel }: { ariaLabel?: string }) {\n  return (\n    <SkeletonContainer\n      svgWidth={24}\n      svgHeight={24}\n      ariaLabel={ariaLabel}\n      backgroundColor={tokens.gray800}\n      foregroundColor={tokens.gray700}\n    >\n      <SkeletonImage width={24} height={24} radiusX={12} radiusY={12} />\n    </SkeletonContainer>\n  );\n}\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarItemStyles } from './NavbarItem.styles';\nimport { NavbarMenu, type NavbarMenuProps } from '../NavbarMenu/NavbarMenu';\nimport {\n  NavbarItemIcon,\n  type NavbarItemIconProps,\n} from '../NavbarItemIcon/NavbarItemIcon';\nimport { ArrowDownIcon } from '../icons';\nimport type {\n  CommonProps,\n  ExpandProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n} from '@contentful/f36-core';\n\nconst NAVBAR_ITEM_DEFAULT_TAG = 'button';\n\ntype NavbarItemTriggerProps = CommonProps & {\n  title: string;\n  icon?: NavbarItemIconProps['icon'];\n  isActive?: boolean;\n  as?: React.ElementType;\n};\n\ntype NavbarItemAsMenuProps = NavbarItemTriggerProps &\n  Pick<NavbarMenuProps, 'onOpen' | 'onClose'> & {\n    children: React.ReactNode;\n  };\ntype NavbarItemAsItemProps = NavbarItemTriggerProps & {\n  children?: never;\n  onOpen?: never;\n  onClose?: never;\n};\ntype NavbarItemOwnProps = NavbarItemAsItemProps | NavbarItemAsMenuProps;\n\nexport type NavbarItemProps<\n  E extends React.ElementType = typeof NAVBAR_ITEM_DEFAULT_TAG,\n> = PolymorphicProps<NavbarItemOwnProps, E>;\n\nfunction _NavbarItem(\n  props: NavbarItemProps<React.ElementType>,\n  ref: React.Ref<any>,\n) {\n  const {\n    as: Comp = NAVBAR_ITEM_DEFAULT_TAG,\n    icon,\n    title,\n    children,\n    className,\n    isActive,\n    testId = 'cf-ui-navbar-item',\n    onOpen,\n    onClose,\n    ...otherProps\n  } = props;\n  const styles = getNavbarItemStyles();\n\n  const item = (\n    <Comp\n      {...otherProps}\n      ref={ref}\n      data-test-id={testId}\n      className={cx(styles.root, isActive && styles.isActive, className)}\n    >\n      {icon ? <NavbarItemIcon icon={icon} variant=\"white\" /> : null}\n      <span>{title}</span>\n      {isNavbarItemHasMenu(props) && (\n        <ArrowDownIcon className={styles.dropdownIcon} />\n      )}\n    </Comp>\n  );\n\n  if (isNavbarItemHasMenu(props)) {\n    return (\n      <NavbarMenu\n        trigger={item}\n        testId={testId}\n        onOpen={onOpen}\n        onClose={onClose}\n      >\n        {children}\n      </NavbarMenu>\n    );\n  }\n\n  return item;\n}\n\nconst isNavbarItemHasMenu = <E extends React.ElementType>(\n  props: NavbarItemProps<E>,\n): props is PolymorphicProps<NavbarItemAsMenuProps, E> =>\n  Boolean(props.children);\n\nexport const NavbarItem: PolymorphicComponent<\n  ExpandProps<NavbarItemOwnProps>,\n  typeof NAVBAR_ITEM_DEFAULT_TAG\n> = React.forwardRef(_NavbarItem);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport { getGlowOnFocusStyles, mqs } from '../utils.styles';\n\nexport const getNavbarItemActiveStyles = () =>\n  css({\n    '&': {\n      color: tokens.colorWhite,\n      '& svg': {\n        fill: tokens.colorWhite,\n      },\n    },\n\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      width: `calc(100% - ${tokens.spacingM})`,\n      height: '2px',\n      bottom: '0.5px',\n      left: 0,\n      right: 0,\n      margin: 'auto',\n      backgroundColor: tokens.colorWhite,\n      zIndex: 0,\n    },\n  });\n\nconst commonItemStyles = {\n  display: 'flex',\n  justifyContent: 'center',\n  padding: `10px ${tokens.spacingS}`,\n  alignItems: 'center',\n  background: 'none',\n};\n\nexport const getNavbarItemStyles = () => ({\n  root: css(\n    commonItemStyles,\n    {\n      alignItems: 'center',\n      background: 'none',\n      border: 0,\n      margin: 0,\n      outline: 'none',\n      fontSize: tokens.fontSizeM,\n      lineHeight: tokens.lineHeightM,\n      fontWeight: tokens.fontWeightMedium,\n      position: 'relative',\n      textAlign: 'left',\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      hyphens: 'auto',\n      textDecoration: 'none',\n      color: hexToRGBA(tokens.gray300, 0.8),\n      boxSizing: 'border-box',\n      transition: `color ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n      borderRadius: tokens.borderRadiusMedium,\n\n      '&::before': {\n        content: '\"\"',\n        position: 'absolute',\n        width: `calc(100% - ${tokens.spacingXs})`,\n        height: `calc(100% - ${tokens.spacingS})`,\n        top: `calc(${tokens.spacingS} / 2)`,\n        left: 0,\n        right: 0,\n        margin: 'auto',\n        borderRadius: tokens.borderRadiusSmall,\n        backgroundColor: hexToRGBA(tokens.colorWhite, 0.08),\n        opacity: 0,\n        zIndex: 0,\n        scale: 0,\n        transition: `all ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n      },\n\n      '&:hover::before': {\n        opacity: 1,\n        scale: '1',\n      },\n\n      '&:active::before': {\n        backgroundColor: `rgba(255, 255, 255, 0.1)`,\n      },\n      '&:disabled': {\n        cursor: 'auto',\n      },\n\n      '& svg': {\n        fill: hexToRGBA(tokens.gray300, 0.8),\n        transition: `fill ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n\n        '&:first-child': {\n          display: 'none',\n          [mqs.large]: {\n            display: 'block',\n          },\n        },\n      },\n      '& > svg, & > span': {\n        zIndex: tokens.zIndexDefault,\n      },\n    },\n    getGlowOnFocusStyles(`inset ${tokens.glowPrimary}`),\n  ),\n  isActive: getNavbarItemActiveStyles(),\n  dropdownIcon: css({\n    paddingLeft: tokens.spacing2Xs,\n  }),\n});\n\nexport const getNavbarItemSkeletonStyles = () => ({\n  root: css(commonItemStyles),\n});\n","import React from 'react';\nimport type { IconProps } from '@contentful/f36-icons';\nimport { getNavbarItemIconStyles } from './NavbarItemIcon.styles';\nimport { cx } from 'emotion';\n\nexport type NavbarItemIconProps = {\n  icon: React.ReactElement<IconProps>;\n} & Pick<IconProps, 'variant'>;\n\nexport const NavbarItemIcon = (props: NavbarItemIconProps) => {\n  const { icon, variant } = props;\n  const styles = getNavbarItemIconStyles();\n\n  return React.cloneElement(icon, {\n    className: cx(icon.props.className, styles.root),\n    size: icon.props.size ?? 'tiny',\n    variant: icon.props.variant ?? variant,\n  });\n};\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getNavbarItemIconStyles = () => ({\n  root: css({\n    '&:first-child': {\n      marginRight: tokens.spacing2Xs,\n    },\n    '&:last-child': {\n      marginLeft: tokens.spacing2Xs,\n    },\n    'img&': {\n      borderRadius: tokens.borderRadiusSmall,\n      maxWidth: tokens.spacingM,\n      maxHeight: tokens.spacingM,\n    },\n  }),\n});\n","import React from 'react';\nimport { generateIcon } from '@contentful/f36-icon';\n\nexport const CircleIcon = /*#__PURE__*/ generateIcon({\n  name: 'CircleIcon',\n  viewBox: '0 0 24 24',\n  path: (\n    <path\n      d=\"M11.994 6.526A5.47 5.47 0 0 0 6.526 12a5.47 5.47 0 0 0 5.468 5.473A5.476 5.476 0 0 0 17.473 12a5.477 5.477 0 0 0-5.479-5.474ZM12 15.447a3.448 3.448 0 1 1 0-6.896 3.448 3.448 0 0 1 0 6.896Z\"\n      fill=\"currentFill\"\n    />\n  ),\n});\n","import React from 'react';\nimport { generateIcon } from '@contentful/f36-icon';\n\nexport const ArrowDownIcon = /*#__PURE__*/ generateIcon({\n  name: 'ArrowDownIcon',\n  viewBox: '0 0 12 20',\n  path: (\n    <path\n      d=\"M3.03076 8C2.20109 8 1.73228 8.95209 2.23814 9.60971L5.20727 13.4696C5.60757 13.99 6.39223 13.99 6.79252 13.4696L9.76166 9.60971C10.2675 8.95209 9.79871 8 8.96904 8L3.03076 8Z\"\n      fill=\"#9FA8B2\"\n    />\n  ),\n});\n","import React from 'react';\nimport { generateIcon } from '@contentful/f36-icon';\n\nexport const HelpIcon = /*#__PURE__*/ generateIcon({\n  name: 'HelpIcon',\n  viewBox: '0 0 24 24',\n  path: (\n    <>\n      <g clipPath=\"url(#HelpIcon_svg__a)\">\n        <path\n          d=\"M12 2.25A9.75 9.75 0 1 0 21.75 12 9.769 9.769 0 0 0 12 2.25ZM12 18a1.125 1.125 0 1 1 0-2.25A1.125 1.125 0 0 1 12 18Zm.75-4.584v.084a.75.75 0 1 1-1.5 0v-.75A.75.75 0 0 1 12 12a1.875 1.875 0 1 0-1.875-1.875.75.75 0 1 1-1.5 0 3.375 3.375 0 1 1 4.125 3.29Z\"\n          fill=\"currentFill\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"HelpIcon_svg__a\">\n          <path fill=\"currentFill\" d=\"M0 0h24v24H0z\" />\n        </clipPath>\n      </defs>\n    </>\n  ),\n});\n","import React from 'react';\nimport { generateIcon } from '@contentful/f36-icon';\n\nexport const SearchIcon = /*#__PURE__*/ generateIcon({\n  name: 'SearchIcon',\n  viewBox: '0 0 24 24',\n  path: (\n    <>\n      <g clipPath=\"url(#SearchIcon_svg__a)\">\n        <path\n          fillRule=\"evenodd\"\n          clipRule=\"evenodd\"\n          d=\"M6 11.125a5.125 5.125 0 1 1 10.25 0 5.125 5.125 0 0 1-10.25 0ZM11.125 4a7.125 7.125 0 1 0 4.282 12.82l2.886 2.887a1 1 0 0 0 1.414-1.414l-2.886-2.887A7.125 7.125 0 0 0 11.125 4Z\"\n          fill=\"currentFill\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"SearchIcon_svg__a\">\n          <path fill=\"#fff\" d=\"M0 0h24v24H0z\" />\n        </clipPath>\n      </defs>\n    </>\n  ),\n});\n","import React from 'react';\nimport { generateIcon } from '@contentful/f36-icon';\n\nexport const ContentfulLogoIcon = /*#__PURE__*/ generateIcon({\n  name: 'ContentfulLogoIcon',\n  viewBox: '0 0 24 24',\n  path: (\n    <>\n      <g clipPath=\"url(#a)\">\n        <path\n          d=\"M8.71 3.007c.844.843 1.17 2.078.844 3.228a6.683 6.683 0 0 1 3.444-.953h.025a6.701 6.701 0 0 1 4.743 1.988 2.637 2.637 0 0 0 3.73.093 2.637 2.637 0 0 0 .094-3.731c-.025-.027-.052-.052-.08-.08A11.95 11.95 0 0 0 13.036.006h-.046a11.92 11.92 0 0 0-6.691 2.038h.074c.876 0 1.715.346 2.335.966l.002-.002Z\"\n          fill=\"#1773EB\"\n        />\n        <path\n          d=\"M19.593 16.006c-.696 0-1.365.276-1.86.765a6.706 6.706 0 0 1-4.732 1.953h-.025a6.617 6.617 0 0 1-3.446-.97c.079.287.117.584.117.882a3.3 3.3 0 0 1-3.299 3.3h-.087a11.929 11.929 0 0 0 6.696 2.07h.046a11.934 11.934 0 0 0 8.45-3.486 2.64 2.64 0 0 0-1.857-4.514h-.003Z\"\n          fill=\"#E44F20\"\n        />\n        <path\n          d=\"M4.013 16.301a3.283 3.283 0 0 1 2.335-.967c.303 0 .604.041.893.123a6.696 6.696 0 0 1 .014-6.928 3.302 3.302 0 0 1-4.176-3.187v-.09a12 12 0 0 0-.033 13.452v-.068c0-.877.344-1.715.967-2.335Z\"\n          fill=\"#FFDA00\"\n        />\n        <path\n          d=\"M6.378 2.627c-.751 0-1.275.311-1.912.948-.606.606-.797 1.136-.8 1.767a2.712 2.712 0 1 0 5.427-.003A2.713 2.713 0 0 0 6.38 2.627h-.003Z\"\n          fill=\"#1773EB\"\n        />\n        <path\n          d=\"M3.628 18.639c0 .748.311 1.275.948 1.912.606.606 1.136.8 1.767.8a2.703 2.703 0 1 0-.017-5.408 2.703 2.703 0 0 0-2.695 2.704v-.008h-.003Z\"\n          fill=\"#E44F20\"\n        />\n      </g>\n      <defs>\n        <clipPath id=\"a\">\n          <path fill=\"#fff\" d=\"M0 0h24v24H0z\" />\n        </clipPath>\n      </defs>\n    </>\n  ),\n});\n","import React from 'react';\nimport { SkeletonContainer, SkeletonText } from '@contentful/f36-skeleton';\nimport tokens from '@contentful/f36-tokens';\nimport { getNavbarItemSkeletonStyles } from './NavbarItem.styles';\n\nexport const NavbarItemSkeleton = ({\n  estimatedWidth,\n}: {\n  estimatedWidth: number;\n}) => {\n  const styles = getNavbarItemSkeletonStyles();\n\n  return (\n    <SkeletonContainer\n      className={styles.root}\n      svgWidth={estimatedWidth}\n      svgHeight={40}\n      backgroundColor={tokens.gray800}\n      foregroundColor={tokens.gray700}\n    >\n      <SkeletonText\n        lineHeight={6}\n        numberOfLines={1}\n        offsetTop={7}\n        radiusX={tokens.borderRadiusSmall}\n        radiusY={tokens.borderRadiusSmall}\n      />\n    </SkeletonContainer>\n  );\n};\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarMenuItemStyles } from './NavbarMenuItem.styles';\nimport { Menu, type MenuItemProps } from '@contentful/f36-menu';\nimport {\n  NavbarItemIcon,\n  type NavbarItemIconProps,\n} from '../NavbarItemIcon/NavbarItemIcon';\nimport { ExternalLinkIcon } from '@contentful/f36-icons';\nimport type {\n  ExpandProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n} from '@contentful/f36-core';\n\nconst NAVBAR_MENU_ITEM_DEFAULT_TAG = 'button';\n\ntype NavbarMenuItemOwnProps = {\n  children?: null;\n  title: string;\n  icon?: NavbarItemIconProps['icon'];\n  as?: React.ElementType;\n} & Omit<MenuItemProps, 'children' | 'as'>;\n\nexport type NavbarMenuItemProps<\n  E extends React.ElementType = typeof NAVBAR_MENU_ITEM_DEFAULT_TAG,\n> = PolymorphicProps<NavbarMenuItemOwnProps, E>;\n\nfunction _NavbarMenuItem(\n  props: NavbarMenuItemProps<React.ElementType>,\n  ref: React.Ref<any>,\n) {\n  const {\n    as: Comp = NAVBAR_MENU_ITEM_DEFAULT_TAG,\n    icon,\n    title,\n    className,\n    ...otherProps\n  } = props;\n  const styles = getNavbarMenuItemStyles();\n\n  const itemIsExternalLink = isExternalLink(\n    props as unknown as NavbarMenuItemProps<'a'>,\n  );\n\n  return (\n    <Menu.Item\n      {...otherProps}\n      ref={ref}\n      as={Comp as MenuItemProps['as']}\n      className={cx(styles.root, className)}\n    >\n      {icon ? (\n        <NavbarItemIcon icon={icon} variant=\"secondary\" />\n      ) : (\n        itemIsExternalLink && externalIcon\n      )}\n      <span>{title}</span>\n      {icon && itemIsExternalLink ? externalIcon : null}\n    </Menu.Item>\n  );\n}\n\nconst externalIcon = (\n  <NavbarItemIcon icon={<ExternalLinkIcon />} variant=\"muted\" />\n);\n\nconst isExternalLink = (props: NavbarMenuItemProps<'a'>) =>\n  props.as === 'a' && props.target === '_blank';\n\nexport const NavbarMenuItem: PolymorphicComponent<\n  ExpandProps<NavbarMenuItemOwnProps>,\n  typeof NAVBAR_MENU_ITEM_DEFAULT_TAG\n> = React.forwardRef(_NavbarMenuItem);\n","import { css } from 'emotion';\n\nexport const getNavbarMenuItemStyles = () => ({\n  root: css({\n    display: 'flex',\n    justifyContent: 'flex-start',\n    alignItems: 'center',\n  }),\n});\n","import React from 'react';\nimport { Menu } from '@contentful/f36-menu';\nimport {\n  SkeletonBodyText,\n  SkeletonContainer,\n  SkeletonImage,\n} from '@contentful/f36-skeleton';\nimport { Flex } from '@contentful/f36-core';\n\nimport tokens from '@contentful/f36-tokens';\n\nexport const NavbarMenuItemSkeleton = ({\n  ariaLabel,\n}: {\n  ariaLabel?: string;\n}) => (\n  <Menu.Item>\n    <Flex alignItems=\"center\" gap={tokens.spacingXs}>\n      <SkeletonContainer svgHeight={16} svgWidth={18}>\n        <SkeletonImage width={16} height={16} />\n      </SkeletonContainer>\n      <SkeletonContainer svgHeight={16} svgWidth={190} ariaLabel={ariaLabel}>\n        <SkeletonBodyText numberOfLines={1} />\n      </SkeletonContainer>\n    </Flex>\n  </Menu.Item>\n);\n","import React from 'react';\nimport { getNavbarSwitcherStyles } from './NavbarSwitcher.styles';\nimport {\n  Flex,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { MenuIcon } from '@contentful/f36-icons';\nimport { cx } from 'emotion';\nimport { ContentfulLogoIcon } from '../icons';\n\ntype NavbarSwitcherOwnProps = CommonProps & {\n  children?: React.ReactNode;\n  /**\n   * Will be displayed instead of the default Contentful logo\n   */\n  logo?: React.ReactNode;\n};\n\nexport type NavbarSwitcherProps = PropsWithHTMLElement<\n  NavbarSwitcherOwnProps,\n  'button'\n>;\n\nfunction _NavbarSwitcher(\n  props: ExpandProps<NavbarSwitcherProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const {\n    children,\n    className,\n    logo,\n    testId = 'cf-ui-navbar-switcher',\n    ...otherProps\n  } = props;\n  const styles = getNavbarSwitcherStyles();\n\n  return (\n    <Flex\n      {...otherProps}\n      as=\"button\"\n      ref={ref}\n      className={cx(styles.root, className)}\n      testId={testId}\n      alignItems=\"center\"\n      fullHeight\n      gap=\"spacingXs\"\n    >\n      {logo || <ContentfulLogoIcon />}\n      <MenuIcon className={styles.menuIcon} size=\"small\" variant=\"white\" />\n      <Flex as=\"ul\" alignItems=\"center\" className={styles.breadcrumbs}>\n        {children}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport const NavbarSwitcher = React.forwardRef(_NavbarSwitcher);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport { getGlowOnFocusStyles, mqs } from '../utils.styles';\n\nexport const getNavbarSwitcherStyles = () => ({\n  root: css(\n    {\n      // default button reset styles\n      margin: 0,\n      padding: 0,\n      background: 'none',\n      border: 'none',\n\n      color: tokens.gray300,\n      cursor: 'pointer',\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightMedium,\n      position: 'relative',\n      outline: 'none',\n      borderRadius: tokens.borderRadiusMedium,\n\n      '&:after': {\n        content: '\"\"',\n        border: '1px solid #353A41',\n        boxSizing: 'border-box',\n        height: '16px',\n        right: '-1px',\n        position: 'absolute',\n        width: 0,\n      },\n      '&:last-child:after': {\n        display: 'none',\n      },\n      '&:hover li': {\n        backgroundColor: hexToRGBA(tokens.colorWhite, 0.15),\n      },\n    },\n    getGlowOnFocusStyles(\n      `0px 0px 0px 2px ${tokens.colorBlack}, 0px 0px 0px 5px ${tokens.blue300}`,\n    ),\n  ),\n  breadcrumbs: css({\n    listStyleType: 'none',\n    margin: 0,\n    padding: 0,\n    position: 'relative',\n  }),\n  menuIcon: css({\n    display: 'none',\n    [mqs.medium]: {\n      display: 'block',\n    },\n  }),\n});\n","import React from 'react';\nimport {\n  SkeletonContainer,\n  SkeletonDisplayText,\n} from '@contentful/f36-skeleton';\nimport tokens from '@contentful/f36-tokens';\n\nexport const NavbarSwitcherSkeleton = ({\n  estimatedWidth,\n}: {\n  estimatedWidth: number;\n}) => (\n  <SkeletonContainer\n    svgWidth={estimatedWidth}\n    svgHeight={24}\n    backgroundColor={tokens.gray800}\n    foregroundColor={tokens.gray700}\n  >\n    <SkeletonDisplayText\n      lineHeight={24}\n      numberOfLines={1}\n      radiusX={12}\n      radiusY={12}\n    />\n  </SkeletonContainer>\n);\n","import { cx } from 'emotion';\nimport React from 'react';\nimport { getNavbarSearchStyles } from './NavbarSearch.styles';\nimport { SearchIcon } from '../icons';\nimport {\n  type CommonProps,\n  type ExpandProps,\n  Flex,\n  type PropsWithHTMLElement,\n} from '@contentful/f36-core';\n\ntype NavbarSearchOwnProps = CommonProps;\n\nexport type NavbarSearchProps = PropsWithHTMLElement<\n  NavbarSearchOwnProps,\n  'button'\n>;\n\nfunction _NavbarSearch(\n  props: ExpandProps<NavbarSearchProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const { className, testId = 'cf-ui-navbar-search', ...otherProps } = props;\n  const styles = getNavbarSearchStyles();\n\n  return (\n    <Flex\n      aria-label=\"Quick Search\"\n      {...otherProps}\n      as=\"button\"\n      ref={ref}\n      className={cx(styles.root, className)}\n      testId={testId}\n    >\n      <SearchIcon size=\"medium\" variant=\"white\" />\n    </Flex>\n  );\n}\n\nexport const NavbarSearch = React.forwardRef(_NavbarSearch);\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport { getGlowOnFocusStyles } from '../utils.styles';\n\nexport const getNavbarSearchStyles = () => ({\n  root: css(\n    {\n      // default button reset styles\n      margin: 0,\n      padding: 0,\n      background: 'none',\n      border: 'none',\n\n      cursor: 'pointer',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minWidth: tokens.spacingL,\n      transition: `color ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n      outline: 'none',\n      borderRadius: tokens.borderRadiusMedium,\n\n      '& svg': {\n        fill: tokens.gray300,\n        transition: `fill ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n      },\n      '&:hover, & svg:hover': {\n        color: tokens.gray100,\n        fill: tokens.gray100,\n      },\n    },\n    getGlowOnFocusStyles(),\n  ),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarSwitcherItemStyles } from './NavbarSwitcherItem.styles';\nimport { NavbarEnvVariant } from './NavbarEnvVariant';\nimport {\n  Flex,\n  type CommonProps,\n  type ExpandProps,\n  type PropsWithHTMLElement,\n} from '@contentful/f36-core';\n\ntype NavbarSwitcherItemOwnProps = CommonProps & {\n  children?: React.ReactNode;\n  isCircle?: boolean;\n  envVariant?: 'master' | 'non-master';\n  isAlias?: boolean;\n};\n\nexport type NavbarSwitcherItemProps = PropsWithHTMLElement<\n  NavbarSwitcherItemOwnProps,\n  'li'\n>;\n\nfunction _NavbarSwitcherItem(\n  props: ExpandProps<NavbarSwitcherItemProps>,\n  ref: React.Ref<HTMLLIElement>,\n) {\n  const {\n    children,\n    isCircle,\n    className,\n    envVariant,\n    isAlias,\n    testId = 'cf-ui-navbar-switcher-item',\n    ...otherProps\n  } = props;\n  const styles = getNavbarSwitcherItemStyles();\n  const classes = cx(styles.breadcrumbsItem, className, {\n    [styles.breadcrumbsItemCircle]: isCircle,\n    [styles.breadcrumbsItemEnvMaster]: envVariant === 'master',\n    [styles.breadcrumbsItemEnvNonMaster]: envVariant === 'non-master',\n  });\n\n  return (\n    <li {...otherProps} ref={ref} className={classes} data-test-id={testId}>\n      <Flex fullHeight justifyContent=\"center\" alignItems=\"center\">\n        {envVariant && <NavbarEnvVariant isAlias={isAlias} />}\n        <span>{children}</span>\n      </Flex>\n    </li>\n  );\n}\n\nexport const NavbarSwitcherItem = React.forwardRef(_NavbarSwitcherItem);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport { mqs } from '../utils.styles';\n\nconst mobileIcon = {\n  display: 'none',\n  '&:first-child': {\n    display: 'block',\n  },\n\n  [mqs.medium]: {\n    display: 'block',\n    '&:first-child': {\n      display: 'none',\n    },\n  },\n};\n\nexport const getNavbarSwitcherItemStyles = () => ({\n  breadcrumbsItem: css({\n    position: 'relative',\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: hexToRGBA(tokens.gray100, 0.1),\n    boxShadow: `0px 0px 0px 2px ${tokens.colorBlack}`,\n    display: 'inline-flex',\n    margin: 0,\n    minWidth: 0,\n    padding: `0 ${tokens.spacingXs}`,\n    height: tokens.spacingL,\n    borderRadius: '3rem',\n    zIndex: 2,\n    transition: `background-color ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n    whiteSpace: 'nowrap',\n    '&:not(:first-child)': {\n      clipPath: `path('M0 24C6 24 10 18 10 10C10 5 6 0 0 0H400C400 0 400 5 400 24H0Z')`,\n    },\n    '&:first-child': {\n      minWidth: '24px',\n    },\n    '&:nth-child(2)': {\n      zIndex: 1,\n      left: `-${tokens.spacingXs}`,\n      paddingLeft: tokens.spacingM,\n      borderRadius: `0 3rem 3rem 0`,\n      span: {\n        maxWidth: '80px',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        [mqs.large]: {\n          maxWidth: '100%',\n        },\n      },\n    },\n    '&:nth-child(3)': {\n      left: `-${tokens.spacingM}`,\n      paddingLeft: tokens.spacingM,\n      borderRadius: `0 3rem 3rem 0`,\n      fontFamily: tokens.fontStackMonospace,\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightMedium,\n      zIndex: 0,\n      span: {\n        maxWidth: '40px',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        [mqs.large]: {\n          maxWidth: '100%',\n        },\n      },\n      '> div': {\n        [mqs.medium]: {\n          gap: tokens.spacing2Xs,\n        },\n      },\n    },\n  }),\n  breadcrumbsItemCircle: css({\n    borderRadius: '50%',\n    color: tokens.gray400,\n    padding: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    fontSize: '11px',\n    width: tokens.spacingL,\n    height: tokens.spacingL,\n  }),\n  breadcrumbsItemEnvMaster: css({\n    color: tokens.green400,\n    ' svg': {\n      ...mobileIcon,\n      fill: tokens.green400,\n    },\n  }),\n  breadcrumbsItemEnvNonMaster: css({\n    color: tokens.orange400,\n    svg: {\n      ...mobileIcon,\n      fill: tokens.orange400,\n    },\n  }),\n});\n","import React from 'react';\nimport { NavbarSwitcherItemProps } from './NavbarSwitcherItem';\nimport { CircleIcon } from '../icons';\nimport { EnvironmentAliasIcon, EnvironmentIcon } from '@contentful/f36-icons';\n\nexport type NavbarEnvVariantProps = Pick<NavbarSwitcherItemProps, 'isAlias'>;\n\nexport function NavbarEnvVariant({ isAlias }: NavbarEnvVariantProps) {\n  return (\n    <>\n      <CircleIcon key=\"mobile-icon\" size=\"tiny\" />\n      {isAlias ? (\n        <EnvironmentAliasIcon key=\"full-icon\" size=\"tiny\" />\n      ) : (\n        <EnvironmentIcon key=\"full-icon\" size=\"tiny\" />\n      )}\n    </>\n  );\n}\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarHelpStyles } from './NavbarHelp.styles';\nimport { HelpIcon } from '../icons';\nimport {\n  Flex,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { NavbarMenu } from '../NavbarMenu/NavbarMenu';\n\ntype NavbarHelpOwnProps = CommonProps & {\n  children: React.ReactNode;\n};\n\nexport type NavbarHelpProps = PropsWithHTMLElement<\n  NavbarHelpOwnProps,\n  'button'\n>;\n\nfunction _NavbarHelp(\n  props: ExpandProps<NavbarHelpProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-navbar-help-trigger',\n    ...otherProps\n  } = props;\n  const styles = getNavbarHelpStyles();\n\n  return (\n    <NavbarMenu\n      testId=\"cf-ui-navbar-help-menu\"\n      trigger={\n        <Flex\n          aria-label=\"Help Menu\"\n          {...otherProps}\n          as=\"button\"\n          ref={ref}\n          className={cx(styles.root, className)}\n          testId={testId}\n        >\n          <HelpIcon size=\"medium\" variant=\"white\" />\n          Help\n        </Flex>\n      }\n    >\n      {children}\n    </NavbarMenu>\n  );\n}\n\nexport const NavbarHelp = React.forwardRef(_NavbarHelp);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { getGlowOnFocusStyles, mqs } from '../utils.styles';\n\nexport const getNavbarHelpStyles = () => ({\n  root: css(\n    {\n      // default button reset styles\n      margin: 0,\n      padding: 0,\n      background: 'none',\n      border: 'none',\n\n      cursor: 'pointer',\n      alignItems: 'center',\n      justifyContent: 'center',\n      color: tokens.gray300,\n      fontSize: 0,\n      gap: 0,\n      minWidth: tokens.spacingL,\n      transition: `color ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n      outline: 'none',\n      borderRadius: tokens.borderRadiusMedium,\n\n      [mqs.medium]: {\n        fontSize: tokens.fontSizeS,\n        gap: tokens.spacing2Xs,\n        fontWeight: tokens.fontWeightMedium,\n        marginRight: tokens.spacingXs,\n      },\n      '&:hover, &:hover svg': {\n        color: tokens.gray100,\n        fill: tokens.gray100,\n      },\n      '& svg': {\n        fill: tokens.gray300,\n        transition: `fill ${tokens.transitionDurationShort} ${tokens.transitionEasingCubicBezier}`,\n      },\n    },\n    getGlowOnFocusStyles(),\n  ),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarBadgeStyles } from './NavbarBadge.styles';\nimport type {\n  CommonProps,\n  ExpandProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n} from '@contentful/f36-core';\n\nconst NAVBAR_BADGE_DEFAULT_TAG = 'div';\n\ntype NavbarBadgeOwnProps = CommonProps & {\n  children?: React.ReactNode;\n  as?: React.ElementType;\n};\n\nexport type NavbarBadgeProps<\n  E extends React.ElementType = typeof NAVBAR_BADGE_DEFAULT_TAG,\n> = PolymorphicProps<NavbarBadgeOwnProps, E>;\n\nfunction _NavbarBadge(\n  props: NavbarBadgeProps<React.ElementType>,\n  ref: React.Ref<any>,\n) {\n  const {\n    as: Comp = NAVBAR_BADGE_DEFAULT_TAG,\n    children,\n    className,\n    testId = 'cf-ui-navbar-badge',\n    ...otherProps\n  } = props;\n  const styles = getNavbarBadgeStyles();\n\n  return (\n    <Comp\n      {...otherProps}\n      ref={ref}\n      className={cx(styles.root, className)}\n      data-test-id={testId}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport const NavbarBadge: PolymorphicComponent<\n  ExpandProps<NavbarBadgeOwnProps>,\n  typeof NAVBAR_BADGE_DEFAULT_TAG\n> = React.forwardRef(_NavbarBadge);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getNavbarBadgeStyles = () => ({\n  root: css({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    background: 'none',\n    border: `1px solid ${tokens.purple400}`,\n    margin: 0,\n    outline: 'none',\n    fontSize: tokens.fontSizeS,\n    lineHeight: tokens.lineHeightS,\n    fontWeight: tokens.fontWeightMedium,\n    textAlign: 'center',\n    padding: `0 ${tokens.spacingXs}`,\n    textDecoration: 'none',\n    color: `${tokens.purple400}!important`,\n    borderRadius: '1.75rem',\n  }),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { getNavbarTopbarItemStyles } from './NavbarTopbarItem.styles';\nimport type {\n  CommonProps,\n  ExpandProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n} from '@contentful/f36-core';\n\nconst NAVBAR_BADGE_DEFAULT_TAG = 'button';\n\ntype NavbarTopbarItemOwnProps = CommonProps & {\n  children?: React.ReactNode;\n};\n\nexport type NavbarTopbarItemProps<\n  E extends React.ElementType = typeof NAVBAR_BADGE_DEFAULT_TAG,\n> = PolymorphicProps<NavbarTopbarItemOwnProps, E>;\n\nfunction _NavbarTopbarItem<\n  E extends React.ElementType = typeof NAVBAR_BADGE_DEFAULT_TAG,\n>(props: NavbarTopbarItemProps<E>, ref: React.Ref<any>) {\n  const {\n    as: Comp = NAVBAR_BADGE_DEFAULT_TAG,\n    children,\n    className,\n    testId = 'cf-ui-navbar-topbar-item',\n    ...otherProps\n  } = props;\n  const styles = getNavbarTopbarItemStyles();\n\n  return (\n    <Comp\n      {...otherProps}\n      ref={ref}\n      className={cx(styles.root, className)}\n      data-test-id={testId}\n    >\n      {children}\n    </Comp>\n  );\n}\n\nexport const NavbarTopbarItem: PolymorphicComponent<\n  ExpandProps<NavbarTopbarItemOwnProps>,\n  typeof NAVBAR_BADGE_DEFAULT_TAG\n> = React.forwardRef(_NavbarTopbarItem);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { getGlowOnFocusStyles } from '../utils.styles';\n\nexport const getNavbarTopbarItemStyles = () => ({\n  root: css(\n    {\n      // default button reset styles\n      margin: 0,\n      background: 'none',\n      border: 'none',\n\n      cursor: 'pointer',\n      display: 'flex',\n      gap: tokens.spacing2Xs,\n      alignItems: 'center',\n      color: tokens.gray300,\n      padding: `0 ${tokens.spacing2Xs}`,\n      minHeight: tokens.spacingL,\n      fontSize: tokens.fontSizeS,\n      fontWeight: tokens.fontWeightMedium,\n      outline: 'none',\n      borderRadius: tokens.borderRadiusMedium,\n\n      '&:hover': {\n        color: tokens.gray100,\n      },\n      svg: {\n        fill: 'currentColor',\n      },\n    },\n    getGlowOnFocusStyles(),\n  ),\n});\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}