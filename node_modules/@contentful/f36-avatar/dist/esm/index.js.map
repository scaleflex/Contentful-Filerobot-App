{"version":3,"sources":["../../src/Avatar/Avatar.tsx","../../src/Avatar/Avatar.styles.ts","../../src/Avatar/utils.ts","../../src/AvatarGroup/AvatarGroup.tsx","../../src/AvatarGroup/AvatarGroup.styles.ts"],"names":["React","forwardRef","cx","Image","Tooltip","css","tokens","avatarColorMap","applyMuted","color","r","g","b","getColorVariantStyles","colorVariant","colorToken","colorWidth","convertSizeToPixels","size","getInitialsFontSize","sizePixels","getAvatarStyles","variant","borderRadius","isMuted","__spreadValues","_Avatar","_a","forwardedRef","_b","alt","className","icon","isLoading","initials","src","testId","tooltipProps","otherProps","__objRest","isFallback","styles","content","__spreadProps","Avatar","Stack","Menu","getAvatarGroupStyles","_AvatarGroup","children","maxVisibleChildren","childrenArray","childrenToRenderCount","childrenToRender","childrenInMenu","child","index","zIndex","AvatarGroup"],"mappings":"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","sourcesContent":["import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\n\nimport { type CommonProps } from '@contentful/f36-core';\nimport { Image, type ImageProps } from '@contentful/f36-image';\nimport {\n  Tooltip,\n  type TooltipInternalProps,\n  type WithEnhancedContent,\n} from '@contentful/f36-tooltip';\n\nimport { convertSizeToPixels, getAvatarStyles } from './Avatar.styles';\nimport type { ColorVariant } from './utils';\n\nexport type Size = 'tiny' | 'small' | 'medium' | 'large';\n\nexport type Variant = 'app' | 'user';\n\nexport interface AvatarProps extends CommonProps {\n  alt?: ImageProps['alt'];\n  /**\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * @default 'medium'\n   */\n  size?: Size;\n  initials?: string;\n  src?: ImageProps['src'];\n  /**\n   * A tooltipProps attribute used to conditionally render the tooltip around root element\n   */\n  tooltipProps?: CommonProps &\n    WithEnhancedContent &\n    Omit<TooltipInternalProps, 'children'>;\n  /**\n   * @default 'user'\n   */\n  variant?: Variant;\n  /**\n   * @default 'gray'\n   */\n  colorVariant?: ColorVariant;\n  icon?: React.ReactElement;\n}\n\nfunction _Avatar(\n  {\n    alt = '',\n    className,\n    colorVariant = 'gray',\n    icon,\n    isLoading = false,\n    size = 'medium',\n    initials,\n    src,\n    testId = 'cf-ui-avatar',\n    tooltipProps,\n    variant = 'user',\n    ...otherProps\n  }: AvatarProps,\n  forwardedRef: React.Ref<HTMLDivElement>,\n) {\n  // Only render the fallback when `src` is undefined or an empty string\n  const isFallback = Boolean(!isLoading && !src);\n  const styles = getAvatarStyles({ size, variant, colorVariant });\n  const sizePixels = convertSizeToPixels(size);\n\n  const content = (\n    <div\n      className={cx(styles.root, className, {\n        [styles.imageContainer]: !!src,\n      })}\n      data-test-id={testId}\n      ref={forwardedRef}\n      {...otherProps}\n    >\n      {isFallback ? (\n        <div className={styles.fallback} data-test-id={`${testId}-fallback`}>\n          {initials?.substring(0, 2).toUpperCase()}\n        </div>\n      ) : (\n        <Image\n          alt={alt}\n          className={styles.image}\n          height={sizePixels}\n          src={src}\n          width={sizePixels}\n        />\n      )}\n      {!!icon && <span className={styles.overlayIcon}>{icon}</span>}\n    </div>\n  );\n\n  if (tooltipProps)\n    return (\n      <Tooltip {...tooltipProps} usePortal>\n        {content}\n      </Tooltip>\n    );\n\n  return content;\n}\n\nexport const Avatar = forwardRef(_Avatar);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type AvatarProps } from './Avatar';\nimport { applyMuted, avatarColorMap, type ColorVariant } from './utils';\n\nexport const getColorVariantStyles = (colorVariant: ColorVariant) => {\n  const colorToken: string = avatarColorMap[colorVariant];\n\n  const colorWidth = ['muted', 'gray'].includes(colorVariant) ? 1 : 2;\n\n  return {\n    boxShadow: [\n      `0px 0px 0px ${colorWidth}px ${colorToken} inset`,\n      `0px 0px 0px ${colorWidth + 1}px ${tokens.colorWhite} inset`,\n    ].join(', '),\n  };\n};\n\nexport const convertSizeToPixels = (size: AvatarProps['size']) =>\n  ({\n    tiny: '20px',\n    small: '24px',\n    medium: '32px',\n    large: '48px',\n  }[size]);\n\nconst getInitialsFontSize = (sizePixels: string) =>\n  Math.round(Number(sizePixels.replace('px', '')) / 2);\n\nexport const getAvatarStyles = ({\n  size,\n  variant,\n  colorVariant,\n}: {\n  size: AvatarProps['size'];\n  variant: AvatarProps['variant'];\n  colorVariant: ColorVariant;\n}) => {\n  const borderRadius = variant === 'app' ? tokens.borderRadiusSmall : '100%';\n  const sizePixels = convertSizeToPixels(size);\n  const isMuted = colorVariant === 'muted';\n\n  return {\n    fallback: css({\n      backgroundColor: isMuted ? applyMuted(tokens.gray300) : tokens.gray300,\n      color: isMuted ? applyMuted(tokens.gray700) : tokens.gray700,\n      height: '100%',\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontStretch: 'semi-condensed',\n      fontSize: `${getInitialsFontSize(sizePixels)}px`,\n    }),\n    image: css({\n      borderRadius,\n      display: 'block',\n    }),\n    root: css({\n      borderRadius,\n      height: sizePixels,\n      overflow: 'hidden',\n      position: 'relative',\n      width: sizePixels,\n      '&::after': {\n        borderRadius,\n        bottom: 0,\n        content: '\"\"',\n        display: 'block',\n        left: 0,\n        position: 'absolute',\n        top: 0,\n        right: 0,\n        ...getColorVariantStyles(colorVariant),\n      },\n    }),\n    imageContainer: css(\n      {\n        backgroundColor: tokens.colorWhite,\n        overflow: 'visible',\n        zIndex: 1,\n      },\n      colorVariant === 'muted' && {\n        img: {\n          opacity: 0.5,\n        },\n      },\n    ),\n    overlayIcon: css({\n      svg: {\n        backgroundColor: tokens.colorWhite,\n        borderRadius: '100%',\n        position: 'absolute',\n        bottom: 0,\n        right: '-10%',\n        width: '40%',\n        height: '40%',\n        zIndex: 1,\n      },\n    }),\n  };\n};\n","import tokens from '@contentful/f36-tokens';\n\nexport type ColorVariant = keyof typeof avatarColorMap;\n\nexport const avatarColorMap = {\n  primary: tokens.blue500,\n  muted: applyMuted(tokens.gray500),\n  green: tokens.green400,\n  orange: tokens.orange400,\n  yellow: tokens.yellow500,\n  purple: tokens.purple400,\n  gray: tokens.gray400,\n  pink: '#FF77AE',\n  emerald: '#00B8A2',\n  lavender: '#9095FF',\n};\n\n/**\n * @param color Color string in hex format with a leading `#`\n */\nexport function applyMuted(color: string): string {\n  // This is a temporary solution because `color-mix` is not supported in Safari\n  const r = parseInt(color.slice(1, 3), 16);\n  const g = parseInt(color.slice(3, 5), 16);\n  const b = parseInt(color.slice(5, 7), 16);\n\n  return `rgb(${[\n    Math.round((255 + r) / 2),\n    Math.round((255 + g) / 2),\n    Math.round((255 + b) / 2),\n  ].join(' ')})`;\n\n  // Eventually we should use `color-mix`\n  // return `color-mix(in srgb, ${color}, ${tokens.colorWhite} 50%)`;\n}\n","import React, { forwardRef } from 'react';\nimport { cx } from 'emotion';\n\nimport { Stack, type CommonProps } from '@contentful/f36-core';\nimport { Menu } from '@contentful/f36-menu';\n\nimport { type AvatarProps } from '../Avatar';\nimport { getAvatarGroupStyles } from './AvatarGroup.styles';\n\nexport interface AvatarGroupProps extends CommonProps {\n  children?:\n    | React.ReactElement<AvatarProps>[]\n    | React.ReactElement<AvatarProps>;\n  maxVisibleChildren?: number;\n  size?: 'small' | 'medium';\n  variant?: 'stacked' | 'spaced';\n}\n\nfunction _AvatarGroup(\n  {\n    children,\n    className,\n    maxVisibleChildren = 3,\n    size = 'medium',\n    testId = 'cf-ui-avatar-group',\n    variant = 'spaced',\n  }: AvatarGroupProps,\n  forwardedRef: React.Ref<HTMLDivElement>,\n) {\n  const styles = getAvatarGroupStyles(size);\n\n  const childrenArray = React.Children.toArray(children);\n  const childrenToRenderCount =\n    childrenArray.length > maxVisibleChildren\n      ? maxVisibleChildren - 1\n      : maxVisibleChildren;\n  const childrenToRender = childrenArray.slice(0, childrenToRenderCount);\n  const childrenInMenu = childrenArray.slice(childrenToRenderCount);\n\n  return (\n    <Stack\n      flexDirection=\"row\"\n      testId={testId}\n      ref={forwardedRef}\n      className={cx(className, {\n        [styles.groupStacked]: variant === 'stacked',\n        [styles.groupSpaced]: variant === 'spaced',\n      })}\n    >\n      {childrenToRender.map((child, index) => {\n        const zIndex = childrenToRender.length - index;\n\n        return React.cloneElement(child as React.ReactElement, {\n          key: `avatar-rendered-${index}`,\n          size: size,\n          className: cx((child as React.ReactElement).props.className, {\n            [styles.avatarStacked]: variant === 'stacked',\n          }),\n          style: {\n            zIndex,\n          },\n        });\n      })}\n      {childrenInMenu.length > 0 && (\n        <Menu placement=\"bottom-end\">\n          <Menu.Trigger>\n            <button\n              type=\"button\"\n              className={cx(\n                {\n                  [styles.avatarStacked]: variant === 'stacked',\n                },\n                styles.moreAvatarsBtn,\n              )}\n            >\n              +{childrenInMenu.length}\n            </button>\n          </Menu.Trigger>\n          <Menu.List>\n            {childrenInMenu.map((child, index) => {\n              return (\n                <Menu.Item\n                  className={styles.moreAvatarsItem}\n                  key={`avatar-${index}`}\n                >\n                  {React.cloneElement(child as React.ReactElement, {\n                    key: `avatar-menuitem-${index}`,\n                    size: 'tiny',\n                    tooltipProps: undefined,\n                  })}\n                  {(child as React.ReactElement).props.alt}\n                </Menu.Item>\n              );\n            })}\n          </Menu.List>\n        </Menu>\n      )}\n    </Stack>\n  );\n}\nexport const AvatarGroup = forwardRef(_AvatarGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { type AvatarProps } from '../Avatar/';\nimport { convertSizeToPixels } from '../Avatar/Avatar.styles';\n\nexport const getAvatarGroupStyles = (size: AvatarProps['size']) => {\n  return {\n    groupSpaced: css({\n      gap: tokens.spacing2Xs,\n    }),\n    groupStacked: css({\n      gap: 0,\n      '> :not(:first-child)': {\n        marginLeft: `-${tokens.spacing2Xs}`,\n      },\n    }),\n    avatarStacked: css({\n      position: 'relative',\n      boxShadow: `0px 0px 0px 1px ${tokens.colorWhite}`,\n    }),\n    moreAvatarsBtn: css({\n      cursor: 'pointer',\n      backgroundColor: tokens.colorWhite,\n      color: tokens.gray600,\n      fontSize: tokens.fontSizeS,\n      border: 'none',\n      boxShadow: `0px 0px 0px 1px ${tokens.gray200} inset`,\n      borderRadius: '99999999em',\n      height: convertSizeToPixels(size),\n      width: convertSizeToPixels(size),\n      overflow: 'hidden',\n      zIndex: 0,\n    }),\n    moreAvatarsItem: css({\n      cursor: 'default',\n    }),\n  };\n};\n"]}